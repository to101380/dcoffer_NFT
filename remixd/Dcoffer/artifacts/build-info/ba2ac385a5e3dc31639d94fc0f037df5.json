{
	"id": "ba2ac385a5e3dc31639d94fc0f037df5",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.13",
	"solcLongVersion": "0.8.13+commit.abaa5c0e",
	"input": {
		"language": "Solidity",
		"sources": {
			"ERC721A/ERC721A.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// ERC721A Contracts v3.3.0\r\n// Creator: Chiru Labs\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport './IERC721A.sol';\r\nimport './IDCF.sol';\r\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\r\nimport '@openzeppelin/contracts/utils/Address.sol';\r\nimport '@openzeppelin/contracts/utils/Context.sol';\r\nimport '@openzeppelin/contracts/utils/Strings.sol';\r\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\r\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension. Built to optimize for lower gas during batch mints.\r\n *\r\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\r\n *\r\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\r\n *\r\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\r\n */\r\ncontract ERC721A is Context, ERC165, IERC721A, IDCF {\r\n    using SafeMath for uint;\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // The tokenId of the next token to be minted.\r\n    uint256 internal _currentIndex;\r\n\r\n    // The number of tokens burned.\r\n    uint256 internal _burnCounter;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to ownership details\r\n    // An empty struct value does not necessarily mean the token is unowned. See _ownershipOf implementation for details.\r\n    mapping(uint256 => TokenOwnership) internal _ownerships;\r\n\r\n    // Mapping owner address to address data\r\n    mapping(address => AddressData) private _addressData;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     *[user][1] = last_block\r\n     *[user][2] = accumulation_block \r\n    */   \r\n    mapping(address => mapping(uint256 => uint256))private _BlockScore;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _currentIndex = _startTokenId();\r\n    }\r\n\r\n  \r\n\r\n    function BlockScore(address user)public view returns(uint256){\r\n        uint256 difference = block.number.sub(_BlockScore[user][1]);\r\n        uint256 Product = balanceOf(user).mul(difference);\r\n        uint256 accumulation = _BlockScore[user][2].add(Product);\r\n        return accumulation;\r\n    }\r\n\r\n    function updateBlockScore()private{\r\n        uint256 Score = BlockScore(msg.sender);\r\n        _BlockScore[msg.sender][2]=_BlockScore[msg.sender][2].add(Score);\r\n        _BlockScore[msg.sender][1] = block.number;\r\n    }\r\n\r\n   \r\n\r\n    /**\r\n     * To change the starting tokenId, please override this function.\r\n     */\r\n    function _startTokenId() internal view virtual returns (uint256) {\r\n        return 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        // Counter underflow is impossible as _burnCounter cannot be incremented\r\n        // more than _currentIndex - _startTokenId() times\r\n        unchecked {\r\n            return _currentIndex - _burnCounter - _startTokenId();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the total amount of tokens minted in the contract.\r\n     */\r\n    function _totalMinted() internal view returns (uint256) {\r\n        // Counter underflow is impossible as _currentIndex does not decrement,\r\n        // and it is initialized to _startTokenId()\r\n        unchecked {\r\n            return _currentIndex - _startTokenId();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view override returns (uint256) {\r\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\r\n        return uint256(_addressData[owner].balance);\r\n    }\r\n\r\n    /**\r\n     * Returns the number of tokens minted by `owner`.\r\n     */\r\n    function _numberMinted(address owner) internal view returns (uint256) {\r\n        return uint256(_addressData[owner].numberMinted);\r\n    }\r\n\r\n    /**\r\n     * Returns the number of tokens burned by or on behalf of `owner`.\r\n     */\r\n    function _numberBurned(address owner) internal view returns (uint256) {\r\n        return uint256(_addressData[owner].numberBurned);\r\n    }\r\n\r\n    /**\r\n     * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\r\n     */\r\n    function _getAux(address owner) internal view returns (uint64) {\r\n        return _addressData[owner].aux;\r\n    }\r\n\r\n    /**\r\n     * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\r\n     * If there are multiple variables, please pack them into a uint64.\r\n     */\r\n    function _setAux(address owner, uint64 aux) internal {\r\n        _addressData[owner].aux = aux;\r\n    }\r\n\r\n    /**\r\n     * Gas spent here starts off proportional to the maximum mint batch size.\r\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\r\n     */\r\n    function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\r\n        uint256 curr = tokenId;\r\n\r\n        unchecked {\r\n            if (_startTokenId() <= curr) if (curr < _currentIndex) {\r\n                TokenOwnership memory ownership = _ownerships[curr];\r\n                if (!ownership.burned) {\r\n                    if (ownership.addr != address(0)) {\r\n                        return ownership;\r\n                    }\r\n                    // Invariant:\r\n                    // There will always be an ownership that has an address and is not burned\r\n                    // before an ownership that does not have an address and is not burned.\r\n                    // Hence, curr will not underflow.\r\n                    while (true) {\r\n                        curr--;\r\n                        ownership = _ownerships[curr];\r\n                        if (ownership.addr != address(0)) {\r\n                            return ownership;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        revert OwnerQueryForNonexistentToken();\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view override returns (address) {\r\n        return _ownershipOf(tokenId).addr;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return 'https://gateway.pinata.cloud/ipfs/QmfHWktTbSTBNLww8ZDh2qc5DKqiZciknoq76ZfXrsoR1v/';\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public override {\r\n        address owner = ERC721A.ownerOf(tokenId);\r\n        if (to == owner) revert ApprovalToCurrentOwner();\r\n\r\n        if (_msgSender() != owner) if(!isApprovedForAll(owner, _msgSender())) {\r\n            revert ApprovalCallerNotOwnerNorApproved();\r\n        }\r\n\r\n        _approve(to, tokenId, owner);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view override returns (address) {\r\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        if (operator == _msgSender()) revert ApproveToCaller();\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, '');\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        _transfer(from, to, tokenId);\r\n        if (to.isContract()) if(!_checkContractOnERC721Received(from, to, tokenId, _data)) {\r\n            revert TransferToNonERC721ReceiverImplementer();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     */\r\n    function _exists(uint256 tokenId) internal view returns (bool) {\r\n        return _startTokenId() <= tokenId && tokenId < _currentIndex && !_ownerships[tokenId].burned;\r\n    }\r\n\r\n    /**\r\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\r\n     */\r\n    function _safeMint(address to, uint256 quantity) internal {\r\n        _safeMint(to, quantity, '');\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - If `to` refers to a smart contract, it must implement\r\n     *   {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\r\n     * - `quantity` must be greater than 0.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 quantity,\r\n        bytes memory _data\r\n    ) internal {\r\n        \r\n        uint256 startTokenId = _currentIndex;\r\n        if (to == address(0)) revert MintToZeroAddress();\r\n        if (quantity == 0) revert MintZeroQuantity();\r\n\r\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\r\n\r\n        // Overflows are incredibly unrealistic.\r\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\r\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\r\n        unchecked {\r\n            _addressData[to].balance += uint64(quantity);\r\n            _addressData[to].numberMinted += uint64(quantity);\r\n\r\n            _ownerships[startTokenId].addr = to;\r\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\r\n\r\n            uint256 updatedIndex = startTokenId;\r\n            uint256 end = updatedIndex + quantity;\r\n\r\n            if (to.isContract()) {\r\n                do {\r\n                    emit Transfer(address(0), to, updatedIndex);\r\n                    if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {\r\n                        revert TransferToNonERC721ReceiverImplementer();\r\n                    }\r\n                } while (updatedIndex < end);\r\n                // Reentrancy protection\r\n                if (_currentIndex != startTokenId) revert();\r\n            } else {\r\n                do {\r\n                    emit Transfer(address(0), to, updatedIndex++);\r\n                } while (updatedIndex < end);\r\n            }\r\n            _currentIndex = updatedIndex;\r\n        }\r\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `quantity` tokens and transfers them to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `quantity` must be greater than 0.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 quantity) internal { \r\n        uint256 startTokenId = _currentIndex;\r\n        if (to == address(0)) revert MintToZeroAddress();\r\n        if (quantity == 0) revert MintZeroQuantity();\r\n\r\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\r\n\r\n        // Overflows are incredibly unrealistic.\r\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\r\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\r\n        unchecked {\r\n            _addressData[to].balance += uint64(quantity);\r\n            _addressData[to].numberMinted += uint64(quantity);\r\n\r\n            _ownerships[startTokenId].addr = to;\r\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\r\n\r\n            uint256 updatedIndex = startTokenId;\r\n            uint256 end = updatedIndex + quantity;\r\n\r\n            do {\r\n                emit Transfer(address(0), to, updatedIndex++);\r\n            } while (updatedIndex < end);\r\n\r\n            _currentIndex = updatedIndex;\r\n        }\r\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) private {\r\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\r\n\r\n        if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\r\n\r\n        bool isApprovedOrOwner = (_msgSender() == from ||\r\n            isApprovedForAll(from, _msgSender()) ||\r\n            getApproved(tokenId) == _msgSender());\r\n\r\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\r\n        if (to == address(0)) revert TransferToZeroAddress();\r\n\r\n        _beforeTokenTransfers(from, to, tokenId, 1);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId, from);\r\n\r\n        // Underflow of the sender's balance is impossible because we check for\r\n        // ownership above and the recipient's balance can't realistically overflow.\r\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\r\n        unchecked {\r\n            _addressData[from].balance -= 1;\r\n            _addressData[to].balance += 1;\r\n\r\n            TokenOwnership storage currSlot = _ownerships[tokenId];\r\n            currSlot.addr = to;\r\n            currSlot.startTimestamp = uint64(block.timestamp);\r\n\r\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\r\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\r\n            uint256 nextTokenId = tokenId + 1;\r\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\r\n            if (nextSlot.addr == address(0)) {\r\n                // This will suffice for checking _exists(nextTokenId),\r\n                // as a burned slot cannot contain the zero address.\r\n                if (nextTokenId != _currentIndex) {\r\n                    nextSlot.addr = from;\r\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\r\n                }\r\n            }\r\n        }\r\n\r\n        emit Transfer(from, to, tokenId);\r\n        _afterTokenTransfers(from, to, tokenId, 1);\r\n    }\r\n\r\n    /**\r\n     * @dev Equivalent to `_burn(tokenId, false)`.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        _burn(tokenId, false);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\r\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\r\n\r\n        address from = prevOwnership.addr;\r\n\r\n        if (approvalCheck) {\r\n            bool isApprovedOrOwner = (_msgSender() == from ||\r\n                isApprovedForAll(from, _msgSender()) ||\r\n                getApproved(tokenId) == _msgSender());\r\n\r\n            if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\r\n        }\r\n\r\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId, from);\r\n\r\n        // Underflow of the sender's balance is impossible because we check for\r\n        // ownership above and the recipient's balance can't realistically overflow.\r\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\r\n        unchecked {\r\n            AddressData storage addressData = _addressData[from];\r\n            addressData.balance -= 1;\r\n            addressData.numberBurned += 1;\r\n\r\n            // Keep track of who burned the token, and the timestamp of burning.\r\n            TokenOwnership storage currSlot = _ownerships[tokenId];\r\n            currSlot.addr = from;\r\n            currSlot.startTimestamp = uint64(block.timestamp);\r\n            currSlot.burned = true;\r\n\r\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\r\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\r\n            uint256 nextTokenId = tokenId + 1;\r\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\r\n            if (nextSlot.addr == address(0)) {\r\n                // This will suffice for checking _exists(nextTokenId),\r\n                // as a burned slot cannot contain the zero address.\r\n                if (nextTokenId != _currentIndex) {\r\n                    nextSlot.addr = from;\r\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\r\n                }\r\n            }\r\n        }\r\n\r\n        emit Transfer(from, address(0), tokenId);\r\n        _afterTokenTransfers(from, address(0), tokenId, 1);\r\n\r\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\r\n        unchecked {\r\n            _burnCounter++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(\r\n        address to,\r\n        uint256 tokenId,\r\n        address owner\r\n    ) private {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(owner, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkContractOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n            return retval == IERC721Receiver(to).onERC721Received.selector;\r\n        } catch (bytes memory reason) {\r\n            if (reason.length == 0) {\r\n                revert TransferToNonERC721ReceiverImplementer();\r\n            } else {\r\n                assembly {\r\n                    revert(add(32, reason), mload(reason))\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\r\n     * And also called before burning one token.\r\n     *\r\n     * startTokenId - the first token id to be transferred\r\n     * quantity - the amount to be transferred\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, `tokenId` will be burned by `from`.\r\n     * - `from` and `to` are never both zero.\r\n     */\r\n    function _beforeTokenTransfers(\r\n        address from,\r\n        address to,\r\n        uint256 startTokenId,\r\n        uint256 quantity\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\r\n     * minting.\r\n     * And also called after one token has been burned.\r\n     *\r\n     * startTokenId - the first token id to be transferred\r\n     * quantity - the amount to be transferred\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` has been minted for `to`.\r\n     * - When `to` is zero, `tokenId` has been burned by `from`.\r\n     * - `from` and `to` are never both zero.\r\n     */\r\n    function _afterTokenTransfers(\r\n        address from,\r\n        address to,\r\n        uint256 startTokenId,\r\n        uint256 quantity\r\n    ) internal virtual {}\r\n}"
			},
			"@openzeppelin/contracts/utils/math/SafeMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
			},
			"ERC721A/IDCF.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// ERC721A Contracts v3.3.0\r\n// Creator: Chiru Labs\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of an ERC721A compliant contract.\r\n */\r\ninterface IDCF  {\r\n   \r\n\r\n    function BlockScore(address user)external view returns(uint);\r\n\r\n}"
			},
			"ERC721A/IERC721A.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// ERC721A Contracts v3.3.0\r\n// Creator: Chiru Labs\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\r\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\r\n\r\n/**\r\n * @dev Interface of an ERC721A compliant contract.\r\n */\r\ninterface IERC721A is IERC721, IERC721Metadata {\r\n    /**\r\n     * The caller must own the token or be an approved operator.\r\n     */\r\n    error ApprovalCallerNotOwnerNorApproved();\r\n\r\n    /**\r\n     * The token does not exist.\r\n     */\r\n    error ApprovalQueryForNonexistentToken();\r\n\r\n    /**\r\n     * The caller cannot approve to their own address.\r\n     */\r\n    error ApproveToCaller();\r\n\r\n    /**\r\n     * The caller cannot approve to the current owner.\r\n     */\r\n    error ApprovalToCurrentOwner();\r\n\r\n    /**\r\n     * Cannot query the balance for the zero address.\r\n     */\r\n    error BalanceQueryForZeroAddress();\r\n\r\n    /**\r\n     * Cannot mint to the zero address.\r\n     */\r\n    error MintToZeroAddress();\r\n\r\n    /**\r\n     * The quantity of tokens minted must be more than zero.\r\n     */\r\n    error MintZeroQuantity();\r\n\r\n    /**\r\n     * The token does not exist.\r\n     */\r\n    error OwnerQueryForNonexistentToken();\r\n\r\n    /**\r\n     * The caller must own the token or be an approved operator.\r\n     */\r\n    error TransferCallerNotOwnerNorApproved();\r\n\r\n    /**\r\n     * The token must be owned by `from`.\r\n     */\r\n    error TransferFromIncorrectOwner();\r\n\r\n    /**\r\n     * Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\r\n     */\r\n    error TransferToNonERC721ReceiverImplementer();\r\n\r\n    /**\r\n     * Cannot transfer to the zero address.\r\n     */\r\n    error TransferToZeroAddress();\r\n\r\n    /**\r\n     * The token does not exist.\r\n     */\r\n    error URIQueryForNonexistentToken();\r\n\r\n    // Compiler will pack this into a single 256bit word.\r\n    struct TokenOwnership {\r\n        // The address of the owner.\r\n        address addr;\r\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\r\n        uint64 startTimestamp;\r\n        // Whether the token has been burned.\r\n        bool burned;\r\n    }\r\n\r\n    // Compiler will pack this into a single 256bit word.\r\n    struct AddressData {\r\n        // Realistically, 2**64-1 is more than enough.\r\n        uint64 balance;\r\n        // Keeps track of mint count with minimal overhead for tokenomics.\r\n        uint64 numberMinted;\r\n        // Keeps track of burn count with minimal overhead for tokenomics.\r\n        uint64 numberBurned;\r\n        // For miscellaneous variable(s) pertaining to the address\r\n        // (e.g. number of whitelist mint slots used).\r\n        // If there are multiple variables, please pack them into a uint64.\r\n        uint64 aux;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     * \r\n     * Burned tokens are calculated here, use `_totalMinted()` if you want to count just minted tokens.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n}"
			},
			"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"IERC721": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Required interface of an ERC721 compliant contract.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://77724cecdfba8814632ab58737c2b0f2d4ad2d532bc614aee559b5593c1152f0\",\"dweb:/ipfs/QmUcE6gXyv7CQh4sUdcDABYKGTovTe1zLMZSEq95nkc3ph\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
				"IERC721Receiver": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "onERC721Received",
							"outputs": [
								{
									"internalType": "bytes4",
									"name": "",
									"type": "bytes4"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.",
						"kind": "dev",
						"methods": {
							"onERC721Received(address,address,uint256,bytes)": {
								"details": "Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."
							}
						},
						"title": "ERC721 token receiver interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"onERC721Received(address,address,uint256,bytes)": "150b7a02"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"}},\"title\":\"ERC721 token receiver interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":\"IERC721Receiver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e75cf83beb757b8855791088546b8337e9d4684e169400c20d44a515353b708\",\"dweb:/ipfs/QmYvPafLfoquiDMEj7CKHtvbgHu7TJNPSVPSCjrtjV8HjV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
				"IERC721Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "See https://eips.ethereum.org/EIPS/eip-721",
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"name()": {
								"details": "Returns the token collection name."
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"symbol()": {
								"details": "Returns the token collection symbol."
							},
							"tokenURI(uint256)": {
								"details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"title": "ERC-721 Non-Fungible Token Standard, optional metadata extension",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":\"IERC721Metadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://77724cecdfba8814632ab58737c2b0f2d4ad2d532bc614aee559b5593c1152f0\",\"dweb:/ipfs/QmUcE6gXyv7CQh4sUdcDABYKGTovTe1zLMZSEq95nkc3ph\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"Address": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Address.sol\":194:8255  library Address {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Address.sol\":194:8255  library Address {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212201e24e11923d484da47038440bceb62d5db08b1751b1b54b9d8368d96842a4ef464736f6c634300080d0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212201e24e11923d484da47038440bceb62d5db08b1751b1b54b9d8368d96842a4ef464736f6c634300080d0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x1E 0x24 0xE1 NOT 0x23 0xD4 DUP5 0xDA SELFBALANCE SUB DUP5 BLOCKHASH 0xBC 0xEB PUSH3 0xD5DB08 0xB1 PUSH22 0x1B1B54B9D8368D96842A4EF464736F6C634300080D00 CALLER ",
							"sourceMap": "194:8061:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212201e24e11923d484da47038440bceb62d5db08b1751b1b54b9d8368d96842a4ef464736f6c634300080d0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x1E 0x24 0xE1 NOT 0x23 0xD4 DUP5 0xDA SELFBALANCE SUB DUP5 BLOCKHASH 0xBC 0xEB PUSH3 0xD5DB08 0xB1 PUSH22 0x1B1B54B9D8368D96842A4EF464736F6C634300080D00 CALLER ",
							"sourceMap": "194:8061:3:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionDelegateCall(address,bytes memory)": "infinite",
								"functionDelegateCall(address,bytes memory,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH #[$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH [$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 3,
									"value": "B"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "CODECOPY",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "BYTE",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "EQ",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 3,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 3,
									"value": "4"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 3,
									"value": "24"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "REVERT",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "tag",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "ADDRESS",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "MSTORE8",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "RETURN",
									"source": 3
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212201e24e11923d484da47038440bceb62d5db08b1751b1b54b9d8368d96842a4ef464736f6c634300080d0033",
									".code": [
										{
											"begin": 194,
											"end": 8255,
											"name": "PUSHDEPLOYADDRESS",
											"source": 3
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "ADDRESS",
											"source": 3
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "PUSH",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "REVERT",
											"source": 3
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3a57d0854b2fdce6ebff933a48dca2445643d1eccfc27f00292e937f26c6a58\",\"dweb:/ipfs/QmW45rZooS9TqR4YXUbjRbtf2Bpb5ouSarBvfW1LdGprvV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"Strings": {
					"abi": [],
					"devdoc": {
						"details": "String operations.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Strings.sol\":146:2031  library Strings {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":146:2031  library Strings {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220ff3f46967c3073caf32f56f8ade32c659a6fb3efc57a43fa16bae5471858928c64736f6c634300080d0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ff3f46967c3073caf32f56f8ade32c659a6fb3efc57a43fa16bae5471858928c64736f6c634300080d0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SELFDESTRUCT EXTCODEHASH CHAINID SWAP7 PUSH29 0x3073CAF32F56F8ADE32C659A6FB3EFC57A43FA16BAE5471858928C6473 PUSH16 0x6C634300080D00330000000000000000 ",
							"sourceMap": "146:1885:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ff3f46967c3073caf32f56f8ade32c659a6fb3efc57a43fa16bae5471858928c64736f6c634300080d0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SELFDESTRUCT EXTCODEHASH CHAINID SWAP7 PUSH29 0x3073CAF32F56F8ADE32C659A6FB3EFC57A43FA16BAE5471858928C6473 PUSH16 0x6C634300080D00330000000000000000 ",
							"sourceMap": "146:1885:5:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"toHexString(uint256)": "infinite",
								"toHexString(uint256,uint256)": "infinite",
								"toString(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH #[$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH [$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 5,
									"value": "B"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "CODECOPY",
									"source": 5
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "BYTE",
									"source": 5
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 5,
									"value": "73"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "EQ",
									"source": 5
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 5,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 5,
									"value": "4"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 5,
									"value": "24"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "REVERT",
									"source": 5
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "tag",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "ADDRESS",
									"source": 5
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 5,
									"value": "73"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "MSTORE8",
									"source": 5
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "RETURN",
									"source": 5
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220ff3f46967c3073caf32f56f8ade32c659a6fb3efc57a43fa16bae5471858928c64736f6c634300080d0033",
									".code": [
										{
											"begin": 146,
											"end": 2031,
											"name": "PUSHDEPLOYADDRESS",
											"source": 5
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "ADDRESS",
											"source": 5
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "PUSH",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "REVERT",
											"source": 5
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8179c356adb19e70d6b31a1eedc8c5c7f0c00e669e2540f4099e3844c6074d30\",\"dweb:/ipfs/QmWFbivarEobbqhS1go64ootVuHfVohBseerYy9FTEd1W2\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
				"ERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "See {IERC165-supportsInterface}."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d\",\"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"IERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/math/SafeMath.sol": {
				"SafeMath": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":482:6782  library SafeMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":482:6782  library SafeMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122096cd1b093a4397f8438b96b89f783006275ebc2fa9dc186c5dc5b69d2e218b7764736f6c634300080d0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122096cd1b093a4397f8438b96b89f783006275ebc2fa9dc186c5dc5b69d2e218b7764736f6c634300080d0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP7 0xCD SHL MULMOD GASPRICE NUMBER SWAP8 0xF8 NUMBER DUP12 SWAP7 0xB8 SWAP16 PUSH25 0x3006275EBC2FA9DC186C5DC5B69D2E218B7764736F6C634300 ADDMOD 0xD STOP CALLER ",
							"sourceMap": "482:6300:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122096cd1b093a4397f8438b96b89f783006275ebc2fa9dc186c5dc5b69d2e218b7764736f6c634300080d0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP7 0xCD SHL MULMOD GASPRICE NUMBER SWAP8 0xF8 NUMBER DUP12 SWAP7 0xB8 SWAP16 PUSH25 0x3006275EBC2FA9DC186C5DC5B69D2E218B7764736F6C634300 ADDMOD 0xD STOP CALLER ",
							"sourceMap": "482:6300:8:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"add(uint256,uint256)": "infinite",
								"div(uint256,uint256)": "infinite",
								"div(uint256,uint256,string memory)": "infinite",
								"mod(uint256,uint256)": "infinite",
								"mod(uint256,uint256,string memory)": "infinite",
								"mul(uint256,uint256)": "infinite",
								"sub(uint256,uint256)": "infinite",
								"sub(uint256,uint256,string memory)": "infinite",
								"tryAdd(uint256,uint256)": "infinite",
								"tryDiv(uint256,uint256)": "infinite",
								"tryMod(uint256,uint256)": "infinite",
								"tryMul(uint256,uint256)": "infinite",
								"trySub(uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH #[$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH [$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 8,
									"value": "B"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "CODECOPY",
									"source": 8
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "BYTE",
									"source": 8
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 8,
									"value": "73"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "EQ",
									"source": 8
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 8,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 8,
									"value": "4"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 8,
									"value": "24"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "tag",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "ADDRESS",
									"source": 8
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 8,
									"value": "73"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "MSTORE8",
									"source": 8
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "RETURN",
									"source": 8
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122096cd1b093a4397f8438b96b89f783006275ebc2fa9dc186c5dc5b69d2e218b7764736f6c634300080d0033",
									".code": [
										{
											"begin": 482,
											"end": 6782,
											"name": "PUSHDEPLOYADDRESS",
											"source": 8
										},
										{
											"begin": 482,
											"end": 6782,
											"name": "ADDRESS",
											"source": 8
										},
										{
											"begin": 482,
											"end": 6782,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 482,
											"end": 6782,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 482,
											"end": 6782,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 482,
											"end": 6782,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 482,
											"end": 6782,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 482,
											"end": 6782,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 482,
											"end": 6782,
											"name": "REVERT",
											"source": 8
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://864a40efcffdf408044c332a5aa38ec5618ed7b4eecb8f65faf45671bd6cdc65\",\"dweb:/ipfs/QmQJquTMtc6fgm5JQzGdsGpA2fqBe3MHWEdt2qzaLySMdN\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"ERC721A/ERC721A.sol": {
				"ERC721A": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "name_",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "symbol_",
									"type": "string"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "ApprovalCallerNotOwnerNorApproved",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ApprovalQueryForNonexistentToken",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ApprovalToCurrentOwner",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ApproveToCaller",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "BalanceQueryForZeroAddress",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "MintToZeroAddress",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "MintZeroQuantity",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "OwnerQueryForNonexistentToken",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferCallerNotOwnerNorApproved",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferFromIncorrectOwner",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferToNonERC721ReceiverImplementer",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferToZeroAddress",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "URIQueryForNonexistentToken",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								}
							],
							"name": "BlockScore",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension. Built to optimize for lower gas during batch mints. Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..). Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply. Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).",
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "See {IERC721-approve}."
							},
							"balanceOf(address)": {
								"details": "See {IERC721-balanceOf}."
							},
							"getApproved(uint256)": {
								"details": "See {IERC721-getApproved}."
							},
							"isApprovedForAll(address,address)": {
								"details": "See {IERC721-isApprovedForAll}."
							},
							"name()": {
								"details": "See {IERC721Metadata-name}."
							},
							"ownerOf(uint256)": {
								"details": "See {IERC721-ownerOf}."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "See {IERC721-safeTransferFrom}."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "See {IERC721-safeTransferFrom}."
							},
							"setApprovalForAll(address,bool)": {
								"details": "See {IERC721-setApprovalForAll}."
							},
							"supportsInterface(bytes4)": {
								"details": "See {IERC165-supportsInterface}."
							},
							"symbol()": {
								"details": "See {IERC721Metadata-symbol}."
							},
							"tokenURI(uint256)": {
								"details": "See {IERC721Metadata-tokenURI}."
							},
							"totalSupply()": {
								"details": "Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC721-transferFrom}."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"ERC721A/ERC721A.sol\":1018:22873  contract ERC721A is Context, ERC165, IERC721A, IDCF {... */\n  mstore(0x40, 0x80)\n    /* \"ERC721A/ERC721A.sol\":2187:2345  constructor(string memory name_, string memory symbol_) {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  dup2\n  add\n  0x40\n  mstore\n  dup2\n  add\n  swap1\n  tag_2\n  swap2\n  swap1\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"ERC721A/ERC721A.sol\":2262:2267  name_ */\n  dup2\n    /* \"ERC721A/ERC721A.sol\":2254:2259  _name */\n  0x02\n    /* \"ERC721A/ERC721A.sol\":2254:2267  _name = name_ */\n  swap1\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  swap1\n  tag_6\n  swap3\n  swap2\n  swap1\n  tag_7\n  jump\t// in\ntag_6:\n  pop\n    /* \"ERC721A/ERC721A.sol\":2288:2295  symbol_ */\n  dup1\n    /* \"ERC721A/ERC721A.sol\":2278:2285  _symbol */\n  0x03\n    /* \"ERC721A/ERC721A.sol\":2278:2295  _symbol = symbol_ */\n  swap1\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  swap1\n  tag_8\n  swap3\n  swap2\n  swap1\n  tag_7\n  jump\t// in\ntag_8:\n  pop\n    /* \"ERC721A/ERC721A.sol\":2322:2337  _startTokenId() */\n  tag_9\n    /* \"ERC721A/ERC721A.sol\":2322:2335  _startTokenId */\n  shl(0x20, tag_10)\n    /* \"ERC721A/ERC721A.sol\":2322:2337  _startTokenId() */\n  0x20\n  shr\n  jump\t// in\ntag_9:\n    /* \"ERC721A/ERC721A.sol\":2306:2319  _currentIndex */\n  0x00\n    /* \"ERC721A/ERC721A.sol\":2306:2337  _currentIndex = _startTokenId() */\n  dup2\n  swap1\n  sstore\n  pop\n    /* \"ERC721A/ERC721A.sol\":2187:2345  constructor(string memory name_, string memory symbol_) {... */\n  pop\n  pop\n    /* \"ERC721A/ERC721A.sol\":1018:22873  contract ERC721A is Context, ERC165, IERC721A, IDCF {... */\n  jump(tag_11)\n    /* \"ERC721A/ERC721A.sol\":2985:3077  function _startTokenId() internal view virtual returns (uint256) {... */\ntag_10:\n    /* \"ERC721A/ERC721A.sol\":3041:3048  uint256 */\n  0x00\n    /* \"ERC721A/ERC721A.sol\":3068:3069  1 */\n  0x01\n    /* \"ERC721A/ERC721A.sol\":3061:3069  return 1 */\n  swap1\n  pop\n    /* \"ERC721A/ERC721A.sol\":2985:3077  function _startTokenId() internal view virtual returns (uint256) {... */\n  swap1\n  jump\t// out\n    /* \"ERC721A/ERC721A.sol\":1018:22873  contract ERC721A is Context, ERC165, IERC721A, IDCF {... */\ntag_7:\n  dup3\n  dup1\n  sload\n  tag_13\n  swap1\n  tag_14\n  jump\t// in\ntag_13:\n  swap1\n  0x00\n  mstore\n  keccak256(0x00, 0x20)\n  swap1\n  0x1f\n  add\n  0x20\n  swap1\n  div\n  dup2\n  add\n  swap3\n  dup3\n  tag_16\n  jumpi\n  0x00\n  dup6\n  sstore\n  jump(tag_15)\ntag_16:\n  dup3\n  0x1f\n  lt\n  tag_17\n  jumpi\n  dup1\n  mload\n  not(0xff)\n  and\n  dup4\n  dup1\n  add\n  or\n  dup6\n  sstore\n  jump(tag_15)\ntag_17:\n  dup3\n  dup1\n  add\n  0x01\n  add\n  dup6\n  sstore\n  dup3\n  iszero\n  tag_15\n  jumpi\n  swap2\n  dup3\n  add\ntag_18:\n  dup3\n  dup2\n  gt\n  iszero\n  tag_19\n  jumpi\n  dup3\n  mload\n  dup3\n  sstore\n  swap2\n  0x20\n  add\n  swap2\n  swap1\n  0x01\n  add\n  swap1\n  jump(tag_18)\ntag_19:\ntag_15:\n  pop\n  swap1\n  pop\n  tag_20\n  swap2\n  swap1\n  tag_21\n  jump\t// in\ntag_20:\n  pop\n  swap1\n  jump\t// out\ntag_21:\ntag_22:\n  dup1\n  dup3\n  gt\n  iszero\n  tag_23\n  jumpi\n  0x00\n  dup2\n  0x00\n  swap1\n  sstore\n  pop\n  0x01\n  add\n  jump(tag_22)\ntag_23:\n  pop\n  swap1\n  jump\t// out\n    /* \"#utility.yul\":7:82   */\ntag_24:\n    /* \"#utility.yul\":40:46   */\n  0x00\n    /* \"#utility.yul\":73:75   */\n  0x40\n    /* \"#utility.yul\":67:76   */\n  mload\n    /* \"#utility.yul\":57:76   */\n  swap1\n  pop\n    /* \"#utility.yul\":7:82   */\n  swap1\n  jump\t// out\n    /* \"#utility.yul\":88:205   */\ntag_25:\n    /* \"#utility.yul\":197:198   */\n  0x00\n    /* \"#utility.yul\":194:195   */\n  dup1\n    /* \"#utility.yul\":187:199   */\n  revert\n    /* \"#utility.yul\":211:328   */\ntag_26:\n    /* \"#utility.yul\":320:321   */\n  0x00\n    /* \"#utility.yul\":317:318   */\n  dup1\n    /* \"#utility.yul\":310:322   */\n  revert\n    /* \"#utility.yul\":334:451   */\ntag_27:\n    /* \"#utility.yul\":443:444   */\n  0x00\n    /* \"#utility.yul\":440:441   */\n  dup1\n    /* \"#utility.yul\":433:445   */\n  revert\n    /* \"#utility.yul\":457:574   */\ntag_28:\n    /* \"#utility.yul\":566:567   */\n  0x00\n    /* \"#utility.yul\":563:564   */\n  dup1\n    /* \"#utility.yul\":556:568   */\n  revert\n    /* \"#utility.yul\":580:682   */\ntag_29:\n    /* \"#utility.yul\":621:627   */\n  0x00\n    /* \"#utility.yul\":672:674   */\n  0x1f\n    /* \"#utility.yul\":668:675   */\n  not\n    /* \"#utility.yul\":663:665   */\n  0x1f\n    /* \"#utility.yul\":656:661   */\n  dup4\n    /* \"#utility.yul\":652:666   */\n  add\n    /* \"#utility.yul\":648:676   */\n  and\n    /* \"#utility.yul\":638:676   */\n  swap1\n  pop\n    /* \"#utility.yul\":580:682   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":688:868   */\ntag_30:\n    /* \"#utility.yul\":736:813   */\n  0x4e487b7100000000000000000000000000000000000000000000000000000000\n    /* \"#utility.yul\":733:734   */\n  0x00\n    /* \"#utility.yul\":726:814   */\n  mstore\n    /* \"#utility.yul\":833:837   */\n  0x41\n    /* \"#utility.yul\":830:831   */\n  0x04\n    /* \"#utility.yul\":823:838   */\n  mstore\n    /* \"#utility.yul\":857:861   */\n  0x24\n    /* \"#utility.yul\":854:855   */\n  0x00\n    /* \"#utility.yul\":847:862   */\n  revert\n    /* \"#utility.yul\":874:1155   */\ntag_31:\n    /* \"#utility.yul\":957:984   */\n  tag_47\n    /* \"#utility.yul\":979:983   */\n  dup3\n    /* \"#utility.yul\":957:984   */\n  tag_29\n  jump\t// in\ntag_47:\n    /* \"#utility.yul\":949:955   */\n  dup2\n    /* \"#utility.yul\":945:985   */\n  add\n    /* \"#utility.yul\":1087:1093   */\n  dup2\n    /* \"#utility.yul\":1075:1085   */\n  dup2\n    /* \"#utility.yul\":1072:1094   */\n  lt\n    /* \"#utility.yul\":1051:1069   */\n  0xffffffffffffffff\n    /* \"#utility.yul\":1039:1049   */\n  dup3\n    /* \"#utility.yul\":1036:1070   */\n  gt\n    /* \"#utility.yul\":1033:1095   */\n  or\n    /* \"#utility.yul\":1030:1118   */\n  iszero\n  tag_48\n  jumpi\n    /* \"#utility.yul\":1098:1116   */\n  tag_49\n  tag_30\n  jump\t// in\ntag_49:\n    /* \"#utility.yul\":1030:1118   */\ntag_48:\n    /* \"#utility.yul\":1138:1148   */\n  dup1\n    /* \"#utility.yul\":1134:1136   */\n  0x40\n    /* \"#utility.yul\":1127:1149   */\n  mstore\n    /* \"#utility.yul\":917:1155   */\n  pop\n    /* \"#utility.yul\":874:1155   */\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1161:1290   */\ntag_32:\n    /* \"#utility.yul\":1195:1201   */\n  0x00\n    /* \"#utility.yul\":1222:1242   */\n  tag_51\n  tag_24\n  jump\t// in\ntag_51:\n    /* \"#utility.yul\":1212:1242   */\n  swap1\n  pop\n    /* \"#utility.yul\":1251:1284   */\n  tag_52\n    /* \"#utility.yul\":1279:1283   */\n  dup3\n    /* \"#utility.yul\":1271:1277   */\n  dup3\n    /* \"#utility.yul\":1251:1284   */\n  tag_31\n  jump\t// in\ntag_52:\n    /* \"#utility.yul\":1161:1290   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1296:1604   */\ntag_33:\n    /* \"#utility.yul\":1358:1362   */\n  0x00\n    /* \"#utility.yul\":1448:1466   */\n  0xffffffffffffffff\n    /* \"#utility.yul\":1440:1446   */\n  dup3\n    /* \"#utility.yul\":1437:1467   */\n  gt\n    /* \"#utility.yul\":1434:1490   */\n  iszero\n  tag_54\n  jumpi\n    /* \"#utility.yul\":1470:1488   */\n  tag_55\n  tag_30\n  jump\t// in\ntag_55:\n    /* \"#utility.yul\":1434:1490   */\ntag_54:\n    /* \"#utility.yul\":1508:1537   */\n  tag_56\n    /* \"#utility.yul\":1530:1536   */\n  dup3\n    /* \"#utility.yul\":1508:1537   */\n  tag_29\n  jump\t// in\ntag_56:\n    /* \"#utility.yul\":1500:1537   */\n  swap1\n  pop\n    /* \"#utility.yul\":1592:1596   */\n  0x20\n    /* \"#utility.yul\":1586:1590   */\n  dup2\n    /* \"#utility.yul\":1582:1597   */\n  add\n    /* \"#utility.yul\":1574:1597   */\n  swap1\n  pop\n    /* \"#utility.yul\":1296:1604   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1610:1917   */\ntag_34:\n    /* \"#utility.yul\":1678:1679   */\n  0x00\n    /* \"#utility.yul\":1688:1801   */\ntag_58:\n    /* \"#utility.yul\":1702:1708   */\n  dup4\n    /* \"#utility.yul\":1699:1700   */\n  dup2\n    /* \"#utility.yul\":1696:1709   */\n  lt\n    /* \"#utility.yul\":1688:1801   */\n  iszero\n  tag_60\n  jumpi\n    /* \"#utility.yul\":1787:1788   */\n  dup1\n    /* \"#utility.yul\":1782:1785   */\n  dup3\n    /* \"#utility.yul\":1778:1789   */\n  add\n    /* \"#utility.yul\":1772:1790   */\n  mload\n    /* \"#utility.yul\":1768:1769   */\n  dup2\n    /* \"#utility.yul\":1763:1766   */\n  dup5\n    /* \"#utility.yul\":1759:1770   */\n  add\n    /* \"#utility.yul\":1752:1791   */\n  mstore\n    /* \"#utility.yul\":1724:1726   */\n  0x20\n    /* \"#utility.yul\":1721:1722   */\n  dup2\n    /* \"#utility.yul\":1717:1727   */\n  add\n    /* \"#utility.yul\":1712:1727   */\n  swap1\n  pop\n    /* \"#utility.yul\":1688:1801   */\n  jump(tag_58)\ntag_60:\n    /* \"#utility.yul\":1819:1825   */\n  dup4\n    /* \"#utility.yul\":1816:1817   */\n  dup2\n    /* \"#utility.yul\":1813:1826   */\n  gt\n    /* \"#utility.yul\":1810:1911   */\n  iszero\n  tag_61\n  jumpi\n    /* \"#utility.yul\":1899:1900   */\n  0x00\n    /* \"#utility.yul\":1890:1896   */\n  dup5\n    /* \"#utility.yul\":1885:1888   */\n  dup5\n    /* \"#utility.yul\":1881:1897   */\n  add\n    /* \"#utility.yul\":1874:1901   */\n  mstore\n    /* \"#utility.yul\":1810:1911   */\ntag_61:\n    /* \"#utility.yul\":1659:1917   */\n  pop\n    /* \"#utility.yul\":1610:1917   */\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1923:2344   */\ntag_35:\n    /* \"#utility.yul\":2012:2017   */\n  0x00\n    /* \"#utility.yul\":2037:2103   */\n  tag_63\n    /* \"#utility.yul\":2053:2102   */\n  tag_64\n    /* \"#utility.yul\":2095:2101   */\n  dup5\n    /* \"#utility.yul\":2053:2102   */\n  tag_33\n  jump\t// in\ntag_64:\n    /* \"#utility.yul\":2037:2103   */\n  tag_32\n  jump\t// in\ntag_63:\n    /* \"#utility.yul\":2028:2103   */\n  swap1\n  pop\n    /* \"#utility.yul\":2126:2132   */\n  dup3\n    /* \"#utility.yul\":2119:2124   */\n  dup2\n    /* \"#utility.yul\":2112:2133   */\n  mstore\n    /* \"#utility.yul\":2164:2168   */\n  0x20\n    /* \"#utility.yul\":2157:2162   */\n  dup2\n    /* \"#utility.yul\":2153:2169   */\n  add\n    /* \"#utility.yul\":2202:2205   */\n  dup5\n    /* \"#utility.yul\":2193:2199   */\n  dup5\n    /* \"#utility.yul\":2188:2191   */\n  dup5\n    /* \"#utility.yul\":2184:2200   */\n  add\n    /* \"#utility.yul\":2181:2206   */\n  gt\n    /* \"#utility.yul\":2178:2290   */\n  iszero\n  tag_65\n  jumpi\n    /* \"#utility.yul\":2209:2288   */\n  tag_66\n  tag_28\n  jump\t// in\ntag_66:\n    /* \"#utility.yul\":2178:2290   */\ntag_65:\n    /* \"#utility.yul\":2299:2338   */\n  tag_67\n    /* \"#utility.yul\":2331:2337   */\n  dup5\n    /* \"#utility.yul\":2326:2329   */\n  dup3\n    /* \"#utility.yul\":2321:2324   */\n  dup6\n    /* \"#utility.yul\":2299:2338   */\n  tag_34\n  jump\t// in\ntag_67:\n    /* \"#utility.yul\":2018:2344   */\n  pop\n    /* \"#utility.yul\":1923:2344   */\n  swap4\n  swap3\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2364:2719   */\ntag_36:\n    /* \"#utility.yul\":2431:2436   */\n  0x00\n    /* \"#utility.yul\":2480:2483   */\n  dup3\n    /* \"#utility.yul\":2473:2477   */\n  0x1f\n    /* \"#utility.yul\":2465:2471   */\n  dup4\n    /* \"#utility.yul\":2461:2478   */\n  add\n    /* \"#utility.yul\":2457:2484   */\n  slt\n    /* \"#utility.yul\":2447:2569   */\n  tag_69\n  jumpi\n    /* \"#utility.yul\":2488:2567   */\n  tag_70\n  tag_27\n  jump\t// in\ntag_70:\n    /* \"#utility.yul\":2447:2569   */\ntag_69:\n    /* \"#utility.yul\":2598:2604   */\n  dup2\n    /* \"#utility.yul\":2592:2605   */\n  mload\n    /* \"#utility.yul\":2623:2713   */\n  tag_71\n    /* \"#utility.yul\":2709:2712   */\n  dup5\n    /* \"#utility.yul\":2701:2707   */\n  dup3\n    /* \"#utility.yul\":2694:2698   */\n  0x20\n    /* \"#utility.yul\":2686:2692   */\n  dup7\n    /* \"#utility.yul\":2682:2699   */\n  add\n    /* \"#utility.yul\":2623:2713   */\n  tag_35\n  jump\t// in\ntag_71:\n    /* \"#utility.yul\":2614:2713   */\n  swap2\n  pop\n    /* \"#utility.yul\":2437:2719   */\n  pop\n    /* \"#utility.yul\":2364:2719   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2725:3578   */\ntag_3:\n    /* \"#utility.yul\":2824:2830   */\n  0x00\n    /* \"#utility.yul\":2832:2838   */\n  dup1\n    /* \"#utility.yul\":2881:2883   */\n  0x40\n    /* \"#utility.yul\":2869:2878   */\n  dup4\n    /* \"#utility.yul\":2860:2867   */\n  dup6\n    /* \"#utility.yul\":2856:2879   */\n  sub\n    /* \"#utility.yul\":2852:2884   */\n  slt\n    /* \"#utility.yul\":2849:2968   */\n  iszero\n  tag_73\n  jumpi\n    /* \"#utility.yul\":2887:2966   */\n  tag_74\n  tag_25\n  jump\t// in\ntag_74:\n    /* \"#utility.yul\":2849:2968   */\ntag_73:\n    /* \"#utility.yul\":3028:3029   */\n  0x00\n    /* \"#utility.yul\":3017:3026   */\n  dup4\n    /* \"#utility.yul\":3013:3030   */\n  add\n    /* \"#utility.yul\":3007:3031   */\n  mload\n    /* \"#utility.yul\":3058:3076   */\n  0xffffffffffffffff\n    /* \"#utility.yul\":3050:3056   */\n  dup2\n    /* \"#utility.yul\":3047:3077   */\n  gt\n    /* \"#utility.yul\":3044:3161   */\n  iszero\n  tag_75\n  jumpi\n    /* \"#utility.yul\":3080:3159   */\n  tag_76\n  tag_26\n  jump\t// in\ntag_76:\n    /* \"#utility.yul\":3044:3161   */\ntag_75:\n    /* \"#utility.yul\":3185:3259   */\n  tag_77\n    /* \"#utility.yul\":3251:3258   */\n  dup6\n    /* \"#utility.yul\":3242:3248   */\n  dup3\n    /* \"#utility.yul\":3231:3240   */\n  dup7\n    /* \"#utility.yul\":3227:3249   */\n  add\n    /* \"#utility.yul\":3185:3259   */\n  tag_36\n  jump\t// in\ntag_77:\n    /* \"#utility.yul\":3175:3259   */\n  swap3\n  pop\n    /* \"#utility.yul\":2978:3269   */\n  pop\n    /* \"#utility.yul\":3329:3331   */\n  0x20\n    /* \"#utility.yul\":3318:3327   */\n  dup4\n    /* \"#utility.yul\":3314:3332   */\n  add\n    /* \"#utility.yul\":3308:3333   */\n  mload\n    /* \"#utility.yul\":3360:3378   */\n  0xffffffffffffffff\n    /* \"#utility.yul\":3352:3358   */\n  dup2\n    /* \"#utility.yul\":3349:3379   */\n  gt\n    /* \"#utility.yul\":3346:3463   */\n  iszero\n  tag_78\n  jumpi\n    /* \"#utility.yul\":3382:3461   */\n  tag_79\n  tag_26\n  jump\t// in\ntag_79:\n    /* \"#utility.yul\":3346:3463   */\ntag_78:\n    /* \"#utility.yul\":3487:3561   */\n  tag_80\n    /* \"#utility.yul\":3553:3560   */\n  dup6\n    /* \"#utility.yul\":3544:3550   */\n  dup3\n    /* \"#utility.yul\":3533:3542   */\n  dup7\n    /* \"#utility.yul\":3529:3551   */\n  add\n    /* \"#utility.yul\":3487:3561   */\n  tag_36\n  jump\t// in\ntag_80:\n    /* \"#utility.yul\":3477:3561   */\n  swap2\n  pop\n    /* \"#utility.yul\":3279:3571   */\n  pop\n    /* \"#utility.yul\":2725:3578   */\n  swap3\n  pop\n  swap3\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":3584:3764   */\ntag_37:\n    /* \"#utility.yul\":3632:3709   */\n  0x4e487b7100000000000000000000000000000000000000000000000000000000\n    /* \"#utility.yul\":3629:3630   */\n  0x00\n    /* \"#utility.yul\":3622:3710   */\n  mstore\n    /* \"#utility.yul\":3729:3733   */\n  0x22\n    /* \"#utility.yul\":3726:3727   */\n  0x04\n    /* \"#utility.yul\":3719:3734   */\n  mstore\n    /* \"#utility.yul\":3753:3757   */\n  0x24\n    /* \"#utility.yul\":3750:3751   */\n  0x00\n    /* \"#utility.yul\":3743:3758   */\n  revert\n    /* \"#utility.yul\":3770:4090   */\ntag_14:\n    /* \"#utility.yul\":3814:3820   */\n  0x00\n    /* \"#utility.yul\":3851:3852   */\n  0x02\n    /* \"#utility.yul\":3845:3849   */\n  dup3\n    /* \"#utility.yul\":3841:3853   */\n  div\n    /* \"#utility.yul\":3831:3853   */\n  swap1\n  pop\n    /* \"#utility.yul\":3898:3899   */\n  0x01\n    /* \"#utility.yul\":3892:3896   */\n  dup3\n    /* \"#utility.yul\":3888:3900   */\n  and\n    /* \"#utility.yul\":3919:3937   */\n  dup1\n    /* \"#utility.yul\":3909:3990   */\n  tag_83\n  jumpi\n    /* \"#utility.yul\":3975:3979   */\n  0x7f\n    /* \"#utility.yul\":3967:3973   */\n  dup3\n    /* \"#utility.yul\":3963:3980   */\n  and\n    /* \"#utility.yul\":3953:3980   */\n  swap2\n  pop\n    /* \"#utility.yul\":3909:3990   */\ntag_83:\n    /* \"#utility.yul\":4037:4039   */\n  0x20\n    /* \"#utility.yul\":4029:4035   */\n  dup3\n    /* \"#utility.yul\":4026:4040   */\n  lt\n    /* \"#utility.yul\":4006:4024   */\n  dup2\n    /* \"#utility.yul\":4003:4041   */\n  sub\n    /* \"#utility.yul\":4000:4084   */\n  tag_84\n  jumpi\n    /* \"#utility.yul\":4056:4074   */\n  tag_85\n  tag_37\n  jump\t// in\ntag_85:\n    /* \"#utility.yul\":4000:4084   */\ntag_84:\n    /* \"#utility.yul\":3821:4090   */\n  pop\n    /* \"#utility.yul\":3770:4090   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"ERC721A/ERC721A.sol\":1018:22873  contract ERC721A is Context, ERC165, IERC721A, IDCF {... */\ntag_11:\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"ERC721A/ERC721A.sol\":1018:22873  contract ERC721A is Context, ERC165, IERC721A, IDCF {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x42842e0e\n      gt\n      tag_18\n      jumpi\n      dup1\n      0xa22cb465\n      gt\n      tag_19\n      jumpi\n      dup1\n      0xa22cb465\n      eq\n      tag_14\n      jumpi\n      dup1\n      0xb88d4fde\n      eq\n      tag_15\n      jumpi\n      dup1\n      0xc87b56dd\n      eq\n      tag_16\n      jumpi\n      dup1\n      0xe985e9c5\n      eq\n      tag_17\n      jumpi\n      jump(tag_2)\n    tag_19:\n      dup1\n      0x42842e0e\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x6352211e\n      eq\n      tag_11\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_12\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_13\n      jumpi\n      jump(tag_2)\n    tag_18:\n      dup1\n      0x095ea7b3\n      gt\n      tag_20\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x325b272a\n      eq\n      tag_9\n      jumpi\n      jump(tag_2)\n    tag_20:\n      dup1\n      0x01ffc9a7\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x06fdde03\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x081812fc\n      eq\n      tag_5\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"ERC721A/ERC721A.sol\":3971:4276  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {... */\n    tag_3:\n      tag_21\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_22\n      swap2\n      swap1\n      tag_23\n      jump\t// in\n    tag_22:\n      tag_24\n      jump\t// in\n    tag_21:\n      mload(0x40)\n      tag_25\n      swap2\n      swap1\n      tag_26\n      jump\t// in\n    tag_25:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"ERC721A/ERC721A.sol\":7086:7186  function name() public view virtual override returns (string memory) {... */\n    tag_4:\n      tag_27\n      tag_28\n      jump\t// in\n    tag_27:\n      mload(0x40)\n      tag_29\n      swap2\n      swap1\n      tag_30\n      jump\t// in\n    tag_29:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"ERC721A/ERC721A.sol\":8671:8875  function getApproved(uint256 tokenId) public view override returns (address) {... */\n    tag_5:\n      tag_31\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_32\n      swap2\n      swap1\n      tag_33\n      jump\t// in\n    tag_32:\n      tag_34\n      jump\t// in\n    tag_31:\n      mload(0x40)\n      tag_35\n      swap2\n      swap1\n      tag_36\n      jump\t// in\n    tag_35:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"ERC721A/ERC721A.sol\":8233:8605  function approve(address to, uint256 tokenId) public override {... */\n    tag_6:\n      tag_37\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_38\n      swap2\n      swap1\n      tag_39\n      jump\t// in\n    tag_38:\n      tag_40\n      jump\t// in\n    tag_37:\n      stop\n        /* \"ERC721A/ERC721A.sol\":3211:3523  function totalSupply() public view override returns (uint256) {... */\n    tag_7:\n      tag_41\n      tag_42\n      jump\t// in\n    tag_41:\n      mload(0x40)\n      tag_43\n      swap2\n      swap1\n      tag_44\n      jump\t// in\n    tag_43:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"ERC721A/ERC721A.sol\":9536:9706  function transferFrom(... */\n    tag_8:\n      tag_45\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_46\n      swap2\n      swap1\n      tag_47\n      jump\t// in\n    tag_46:\n      tag_48\n      jump\t// in\n    tag_45:\n      stop\n        /* \"ERC721A/ERC721A.sol\":2359:2655  function BlockScore(address user)public view returns(uint256){... */\n    tag_9:\n      tag_49\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_50\n      swap2\n      swap1\n      tag_51\n      jump\t// in\n    tag_50:\n      tag_52\n      jump\t// in\n    tag_49:\n      mload(0x40)\n      tag_53\n      swap2\n      swap1\n      tag_44\n      jump\t// in\n    tag_53:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"ERC721A/ERC721A.sol\":9777:9962  function safeTransferFrom(... */\n    tag_10:\n      tag_54\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_55\n      swap2\n      swap1\n      tag_47\n      jump\t// in\n    tag_55:\n      tag_56\n      jump\t// in\n    tag_54:\n      stop\n        /* \"ERC721A/ERC721A.sol\":6894:7019  function ownerOf(uint256 tokenId) public view override returns (address) {... */\n    tag_11:\n      tag_57\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_58\n      swap2\n      swap1\n      tag_33\n      jump\t// in\n    tag_58:\n      tag_59\n      jump\t// in\n    tag_57:\n      mload(0x40)\n      tag_60\n      swap2\n      swap1\n      tag_36\n      jump\t// in\n    tag_60:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"ERC721A/ERC721A.sol\":4340:4546  function balanceOf(address owner) public view override returns (uint256) {... */\n    tag_12:\n      tag_61\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_62\n      swap2\n      swap1\n      tag_51\n      jump\t// in\n    tag_62:\n      tag_63\n      jump\t// in\n    tag_61:\n      mload(0x40)\n      tag_64\n      swap2\n      swap1\n      tag_44\n      jump\t// in\n    tag_64:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"ERC721A/ERC721A.sol\":7255:7359  function symbol() public view virtual override returns (string memory) {... */\n    tag_13:\n      tag_65\n      tag_66\n      jump\t// in\n    tag_65:\n      mload(0x40)\n      tag_67\n      swap2\n      swap1\n      tag_30\n      jump\t// in\n    tag_67:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"ERC721A/ERC721A.sol\":8947:9234  function setApprovalForAll(address operator, bool approved) public virtual override {... */\n    tag_14:\n      tag_68\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_69\n      swap2\n      swap1\n      tag_70\n      jump\t// in\n    tag_69:\n      tag_71\n      jump\t// in\n    tag_68:\n      stop\n        /* \"ERC721A/ERC721A.sol\":10033:10403  function safeTransferFrom(... */\n    tag_15:\n      tag_72\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_73\n      swap2\n      swap1\n      tag_74\n      jump\t// in\n    tag_73:\n      tag_75\n      jump\t// in\n    tag_72:\n      stop\n        /* \"ERC721A/ERC721A.sol\":7430:7748  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {... */\n    tag_16:\n      tag_76\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_77\n      swap2\n      swap1\n      tag_33\n      jump\t// in\n    tag_77:\n      tag_78\n      jump\t// in\n    tag_76:\n      mload(0x40)\n      tag_79\n      swap2\n      swap1\n      tag_30\n      jump\t// in\n    tag_79:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"ERC721A/ERC721A.sol\":9305:9469  function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {... */\n    tag_17:\n      tag_80\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_81\n      swap2\n      swap1\n      tag_82\n      jump\t// in\n    tag_81:\n      tag_83\n      jump\t// in\n    tag_80:\n      mload(0x40)\n      tag_84\n      swap2\n      swap1\n      tag_26\n      jump\t// in\n    tag_84:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"ERC721A/ERC721A.sol\":3971:4276  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {... */\n    tag_24:\n        /* \"ERC721A/ERC721A.sol\":4073:4077  bool */\n      0x00\n        /* \"ERC721A/ERC721A.sol\":4125:4150  type(IERC721).interfaceId */\n      0x80ac58cd00000000000000000000000000000000000000000000000000000000\n        /* \"ERC721A/ERC721A.sol\":4110:4150  interfaceId == type(IERC721).interfaceId */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n        /* \"ERC721A/ERC721A.sol\":4110:4121  interfaceId */\n      dup3\n        /* \"ERC721A/ERC721A.sol\":4110:4150  interfaceId == type(IERC721).interfaceId */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      eq\n        /* \"ERC721A/ERC721A.sol\":4110:4215  interfaceId == type(IERC721).interfaceId ||... */\n      dup1\n      tag_86\n      jumpi\n      pop\n        /* \"ERC721A/ERC721A.sol\":4182:4215  type(IERC721Metadata).interfaceId */\n      0x5b5e139f00000000000000000000000000000000000000000000000000000000\n        /* \"ERC721A/ERC721A.sol\":4167:4215  interfaceId == type(IERC721Metadata).interfaceId */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n        /* \"ERC721A/ERC721A.sol\":4167:4178  interfaceId */\n      dup3\n        /* \"ERC721A/ERC721A.sol\":4167:4215  interfaceId == type(IERC721Metadata).interfaceId */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      eq\n        /* \"ERC721A/ERC721A.sol\":4110:4215  interfaceId == type(IERC721).interfaceId ||... */\n    tag_86:\n        /* \"ERC721A/ERC721A.sol\":4110:4268  interfaceId == type(IERC721).interfaceId ||... */\n      dup1\n      tag_87\n      jumpi\n      pop\n        /* \"ERC721A/ERC721A.sol\":4232:4268  super.supportsInterface(interfaceId) */\n      tag_88\n        /* \"ERC721A/ERC721A.sol\":4256:4267  interfaceId */\n      dup3\n        /* \"ERC721A/ERC721A.sol\":4232:4255  super.supportsInterface */\n      tag_89\n        /* \"ERC721A/ERC721A.sol\":4232:4268  super.supportsInterface(interfaceId) */\n      jump\t// in\n    tag_88:\n        /* \"ERC721A/ERC721A.sol\":4110:4268  interfaceId == type(IERC721).interfaceId ||... */\n    tag_87:\n        /* \"ERC721A/ERC721A.sol\":4090:4268  return... */\n      swap1\n      pop\n        /* \"ERC721A/ERC721A.sol\":3971:4276  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"ERC721A/ERC721A.sol\":7086:7186  function name() public view virtual override returns (string memory) {... */\n    tag_28:\n        /* \"ERC721A/ERC721A.sol\":7140:7153  string memory */\n      0x60\n        /* \"ERC721A/ERC721A.sol\":7173:7178  _name */\n      0x02\n        /* \"ERC721A/ERC721A.sol\":7166:7178  return _name */\n      dup1\n      sload\n      tag_91\n      swap1\n      tag_92\n      jump\t// in\n    tag_91:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_93\n      swap1\n      tag_92\n      jump\t// in\n    tag_93:\n      dup1\n      iszero\n      tag_94\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_95\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_94)\n    tag_95:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_96:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_96\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_94:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"ERC721A/ERC721A.sol\":7086:7186  function name() public view virtual override returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"ERC721A/ERC721A.sol\":8671:8875  function getApproved(uint256 tokenId) public view override returns (address) {... */\n    tag_34:\n        /* \"ERC721A/ERC721A.sol\":8739:8746  address */\n      0x00\n        /* \"ERC721A/ERC721A.sol\":8764:8780  _exists(tokenId) */\n      tag_98\n        /* \"ERC721A/ERC721A.sol\":8772:8779  tokenId */\n      dup3\n        /* \"ERC721A/ERC721A.sol\":8764:8771  _exists */\n      tag_99\n        /* \"ERC721A/ERC721A.sol\":8764:8780  _exists(tokenId) */\n      jump\t// in\n    tag_98:\n        /* \"ERC721A/ERC721A.sol\":8759:8823  if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken() */\n      tag_100\n      jumpi\n        /* \"ERC721A/ERC721A.sol\":8789:8823  ApprovalQueryForNonexistentToken() */\n      mload(0x40)\n      0xcf4700e400000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"ERC721A/ERC721A.sol\":8759:8823  if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken() */\n    tag_100:\n        /* \"ERC721A/ERC721A.sol\":8843:8858  _tokenApprovals */\n      0x06\n        /* \"ERC721A/ERC721A.sol\":8843:8867  _tokenApprovals[tokenId] */\n      0x00\n        /* \"ERC721A/ERC721A.sol\":8859:8866  tokenId */\n      dup4\n        /* \"ERC721A/ERC721A.sol\":8843:8867  _tokenApprovals[tokenId] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"ERC721A/ERC721A.sol\":8836:8867  return _tokenApprovals[tokenId] */\n      swap1\n      pop\n        /* \"ERC721A/ERC721A.sol\":8671:8875  function getApproved(uint256 tokenId) public view override returns (address) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"ERC721A/ERC721A.sol\":8233:8605  function approve(address to, uint256 tokenId) public override {... */\n    tag_40:\n        /* \"ERC721A/ERC721A.sol\":8306:8319  address owner */\n      0x00\n        /* \"ERC721A/ERC721A.sol\":8322:8346  ERC721A.ownerOf(tokenId) */\n      tag_102\n        /* \"ERC721A/ERC721A.sol\":8338:8345  tokenId */\n      dup3\n        /* \"ERC721A/ERC721A.sol\":8322:8337  ERC721A.ownerOf */\n      tag_59\n        /* \"ERC721A/ERC721A.sol\":8322:8346  ERC721A.ownerOf(tokenId) */\n      jump\t// in\n    tag_102:\n        /* \"ERC721A/ERC721A.sol\":8306:8346  address owner = ERC721A.ownerOf(tokenId) */\n      swap1\n      pop\n        /* \"ERC721A/ERC721A.sol\":8367:8372  owner */\n      dup1\n        /* \"ERC721A/ERC721A.sol\":8361:8372  to == owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"ERC721A/ERC721A.sol\":8361:8363  to */\n      dup4\n        /* \"ERC721A/ERC721A.sol\":8361:8372  to == owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"ERC721A/ERC721A.sol\":8357:8405  if (to == owner) revert ApprovalToCurrentOwner() */\n      tag_103\n      jumpi\n        /* \"ERC721A/ERC721A.sol\":8381:8405  ApprovalToCurrentOwner() */\n      mload(0x40)\n      0x943f7b8c00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"ERC721A/ERC721A.sol\":8357:8405  if (to == owner) revert ApprovalToCurrentOwner() */\n    tag_103:\n        /* \"ERC721A/ERC721A.sol\":8438:8443  owner */\n      dup1\n        /* \"ERC721A/ERC721A.sol\":8422:8443  _msgSender() != owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"ERC721A/ERC721A.sol\":8422:8434  _msgSender() */\n      tag_104\n        /* \"ERC721A/ERC721A.sol\":8422:8432  _msgSender */\n      tag_105\n        /* \"ERC721A/ERC721A.sol\":8422:8434  _msgSender() */\n      jump\t// in\n    tag_104:\n        /* \"ERC721A/ERC721A.sol\":8422:8443  _msgSender() != owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"ERC721A/ERC721A.sol\":8418:8557  if (_msgSender() != owner) if(!isApprovedForAll(owner, _msgSender())) {... */\n      tag_106\n      jumpi\n        /* \"ERC721A/ERC721A.sol\":8449:8486  isApprovedForAll(owner, _msgSender()) */\n      tag_107\n        /* \"ERC721A/ERC721A.sol\":8466:8471  owner */\n      dup2\n        /* \"ERC721A/ERC721A.sol\":8473:8485  _msgSender() */\n      tag_108\n        /* \"ERC721A/ERC721A.sol\":8473:8483  _msgSender */\n      tag_105\n        /* \"ERC721A/ERC721A.sol\":8473:8485  _msgSender() */\n      jump\t// in\n    tag_108:\n        /* \"ERC721A/ERC721A.sol\":8449:8465  isApprovedForAll */\n      tag_83\n        /* \"ERC721A/ERC721A.sol\":8449:8486  isApprovedForAll(owner, _msgSender()) */\n      jump\t// in\n    tag_107:\n        /* \"ERC721A/ERC721A.sol\":8445:8557  if(!isApprovedForAll(owner, _msgSender())) {... */\n      tag_109\n      jumpi\n        /* \"ERC721A/ERC721A.sol\":8510:8545  ApprovalCallerNotOwnerNorApproved() */\n      mload(0x40)\n      0xcfb3b94200000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"ERC721A/ERC721A.sol\":8445:8557  if(!isApprovedForAll(owner, _msgSender())) {... */\n    tag_109:\n        /* \"ERC721A/ERC721A.sol\":8418:8557  if (_msgSender() != owner) if(!isApprovedForAll(owner, _msgSender())) {... */\n    tag_106:\n        /* \"ERC721A/ERC721A.sol\":8569:8597  _approve(to, tokenId, owner) */\n      tag_110\n        /* \"ERC721A/ERC721A.sol\":8578:8580  to */\n      dup4\n        /* \"ERC721A/ERC721A.sol\":8582:8589  tokenId */\n      dup4\n        /* \"ERC721A/ERC721A.sol\":8591:8596  owner */\n      dup4\n        /* \"ERC721A/ERC721A.sol\":8569:8577  _approve */\n      tag_111\n        /* \"ERC721A/ERC721A.sol\":8569:8597  _approve(to, tokenId, owner) */\n      jump\t// in\n    tag_110:\n        /* \"ERC721A/ERC721A.sol\":8295:8605  {... */\n      pop\n        /* \"ERC721A/ERC721A.sol\":8233:8605  function approve(address to, uint256 tokenId) public override {... */\n      pop\n      pop\n      jump\t// out\n        /* \"ERC721A/ERC721A.sol\":3211:3523  function totalSupply() public view override returns (uint256) {... */\n    tag_42:\n        /* \"ERC721A/ERC721A.sol\":3264:3271  uint256 */\n      0x00\n        /* \"ERC721A/ERC721A.sol\":3489:3504  _startTokenId() */\n      tag_113\n        /* \"ERC721A/ERC721A.sol\":3489:3502  _startTokenId */\n      tag_114\n        /* \"ERC721A/ERC721A.sol\":3489:3504  _startTokenId() */\n      jump\t// in\n    tag_113:\n        /* \"ERC721A/ERC721A.sol\":3474:3486  _burnCounter */\n      sload(0x01)\n        /* \"ERC721A/ERC721A.sol\":3458:3471  _currentIndex */\n      sload(0x00)\n        /* \"ERC721A/ERC721A.sol\":3458:3486  _currentIndex - _burnCounter */\n      sub\n        /* \"ERC721A/ERC721A.sol\":3458:3504  _currentIndex - _burnCounter - _startTokenId() */\n      sub\n        /* \"ERC721A/ERC721A.sol\":3451:3504  return _currentIndex - _burnCounter - _startTokenId() */\n      swap1\n      pop\n        /* \"ERC721A/ERC721A.sol\":3211:3523  function totalSupply() public view override returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"ERC721A/ERC721A.sol\":9536:9706  function transferFrom(... */\n    tag_48:\n        /* \"ERC721A/ERC721A.sol\":9670:9698  _transfer(from, to, tokenId) */\n      tag_116\n        /* \"ERC721A/ERC721A.sol\":9680:9684  from */\n      dup4\n        /* \"ERC721A/ERC721A.sol\":9686:9688  to */\n      dup4\n        /* \"ERC721A/ERC721A.sol\":9690:9697  tokenId */\n      dup4\n        /* \"ERC721A/ERC721A.sol\":9670:9679  _transfer */\n      tag_117\n        /* \"ERC721A/ERC721A.sol\":9670:9698  _transfer(from, to, tokenId) */\n      jump\t// in\n    tag_116:\n        /* \"ERC721A/ERC721A.sol\":9536:9706  function transferFrom(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"ERC721A/ERC721A.sol\":2359:2655  function BlockScore(address user)public view returns(uint256){... */\n    tag_52:\n        /* \"ERC721A/ERC721A.sol\":2412:2419  uint256 */\n      0x00\n        /* \"ERC721A/ERC721A.sol\":2431:2449  uint256 difference */\n      dup1\n        /* \"ERC721A/ERC721A.sol\":2452:2490  block.number.sub(_BlockScore[user][1]) */\n      tag_119\n        /* \"ERC721A/ERC721A.sol\":2469:2480  _BlockScore */\n      0x08\n        /* \"ERC721A/ERC721A.sol\":2469:2486  _BlockScore[user] */\n      0x00\n        /* \"ERC721A/ERC721A.sol\":2481:2485  user */\n      dup6\n        /* \"ERC721A/ERC721A.sol\":2469:2486  _BlockScore[user] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"ERC721A/ERC721A.sol\":2469:2489  _BlockScore[user][1] */\n      0x00\n        /* \"ERC721A/ERC721A.sol\":2487:2488  1 */\n      0x01\n        /* \"ERC721A/ERC721A.sol\":2469:2489  _BlockScore[user][1] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"ERC721A/ERC721A.sol\":2452:2464  block.number */\n      number\n        /* \"ERC721A/ERC721A.sol\":2452:2468  block.number.sub */\n      tag_120\n      swap1\n        /* \"ERC721A/ERC721A.sol\":2452:2490  block.number.sub(_BlockScore[user][1]) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_119:\n        /* \"ERC721A/ERC721A.sol\":2431:2490  uint256 difference = block.number.sub(_BlockScore[user][1]) */\n      swap1\n      pop\n        /* \"ERC721A/ERC721A.sol\":2501:2516  uint256 Product */\n      0x00\n        /* \"ERC721A/ERC721A.sol\":2519:2550  balanceOf(user).mul(difference) */\n      tag_121\n        /* \"ERC721A/ERC721A.sol\":2539:2549  difference */\n      dup3\n        /* \"ERC721A/ERC721A.sol\":2519:2534  balanceOf(user) */\n      tag_122\n        /* \"ERC721A/ERC721A.sol\":2529:2533  user */\n      dup7\n        /* \"ERC721A/ERC721A.sol\":2519:2528  balanceOf */\n      tag_63\n        /* \"ERC721A/ERC721A.sol\":2519:2534  balanceOf(user) */\n      jump\t// in\n    tag_122:\n        /* \"ERC721A/ERC721A.sol\":2519:2538  balanceOf(user).mul */\n      tag_123\n      swap1\n        /* \"ERC721A/ERC721A.sol\":2519:2550  balanceOf(user).mul(difference) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_121:\n        /* \"ERC721A/ERC721A.sol\":2501:2550  uint256 Product = balanceOf(user).mul(difference) */\n      swap1\n      pop\n        /* \"ERC721A/ERC721A.sol\":2561:2581  uint256 accumulation */\n      0x00\n        /* \"ERC721A/ERC721A.sol\":2584:2617  _BlockScore[user][2].add(Product) */\n      tag_124\n        /* \"ERC721A/ERC721A.sol\":2609:2616  Product */\n      dup3\n        /* \"ERC721A/ERC721A.sol\":2584:2595  _BlockScore */\n      0x08\n        /* \"ERC721A/ERC721A.sol\":2584:2601  _BlockScore[user] */\n      0x00\n        /* \"ERC721A/ERC721A.sol\":2596:2600  user */\n      dup9\n        /* \"ERC721A/ERC721A.sol\":2584:2601  _BlockScore[user] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"ERC721A/ERC721A.sol\":2584:2604  _BlockScore[user][2] */\n      0x00\n        /* \"ERC721A/ERC721A.sol\":2602:2603  2 */\n      0x02\n        /* \"ERC721A/ERC721A.sol\":2584:2604  _BlockScore[user][2] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"ERC721A/ERC721A.sol\":2584:2608  _BlockScore[user][2].add */\n      tag_125\n      swap1\n        /* \"ERC721A/ERC721A.sol\":2584:2617  _BlockScore[user][2].add(Product) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_124:\n        /* \"ERC721A/ERC721A.sol\":2561:2617  uint256 accumulation = _BlockScore[user][2].add(Product) */\n      swap1\n      pop\n        /* \"ERC721A/ERC721A.sol\":2635:2647  accumulation */\n      dup1\n        /* \"ERC721A/ERC721A.sol\":2628:2647  return accumulation */\n      swap4\n      pop\n      pop\n      pop\n      pop\n        /* \"ERC721A/ERC721A.sol\":2359:2655  function BlockScore(address user)public view returns(uint256){... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"ERC721A/ERC721A.sol\":9777:9962  function safeTransferFrom(... */\n    tag_56:\n        /* \"ERC721A/ERC721A.sol\":9915:9954  safeTransferFrom(from, to, tokenId, '') */\n      tag_127\n        /* \"ERC721A/ERC721A.sol\":9932:9936  from */\n      dup4\n        /* \"ERC721A/ERC721A.sol\":9938:9940  to */\n      dup4\n        /* \"ERC721A/ERC721A.sol\":9942:9949  tokenId */\n      dup4\n        /* \"ERC721A/ERC721A.sol\":9915:9954  safeTransferFrom(from, to, tokenId, '') */\n      mload(0x40)\n      dup1\n      0x20\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      pop\n        /* \"ERC721A/ERC721A.sol\":9915:9931  safeTransferFrom */\n      tag_75\n        /* \"ERC721A/ERC721A.sol\":9915:9954  safeTransferFrom(from, to, tokenId, '') */\n      jump\t// in\n    tag_127:\n        /* \"ERC721A/ERC721A.sol\":9777:9962  function safeTransferFrom(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"ERC721A/ERC721A.sol\":6894:7019  function ownerOf(uint256 tokenId) public view override returns (address) {... */\n    tag_59:\n        /* \"ERC721A/ERC721A.sol\":6958:6965  address */\n      0x00\n        /* \"ERC721A/ERC721A.sol\":6985:7006  _ownershipOf(tokenId) */\n      tag_129\n        /* \"ERC721A/ERC721A.sol\":6998:7005  tokenId */\n      dup3\n        /* \"ERC721A/ERC721A.sol\":6985:6997  _ownershipOf */\n      tag_130\n        /* \"ERC721A/ERC721A.sol\":6985:7006  _ownershipOf(tokenId) */\n      jump\t// in\n    tag_129:\n        /* \"ERC721A/ERC721A.sol\":6985:7011  _ownershipOf(tokenId).addr */\n      0x00\n      add\n      mload\n        /* \"ERC721A/ERC721A.sol\":6978:7011  return _ownershipOf(tokenId).addr */\n      swap1\n      pop\n        /* \"ERC721A/ERC721A.sol\":6894:7019  function ownerOf(uint256 tokenId) public view override returns (address) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"ERC721A/ERC721A.sol\":4340:4546  function balanceOf(address owner) public view override returns (uint256) {... */\n    tag_63:\n        /* \"ERC721A/ERC721A.sol\":4404:4411  uint256 */\n      0x00\n        /* \"ERC721A/ERC721A.sol\":4445:4446  0 */\n      dup1\n        /* \"ERC721A/ERC721A.sol\":4428:4447  owner == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"ERC721A/ERC721A.sol\":4428:4433  owner */\n      dup3\n        /* \"ERC721A/ERC721A.sol\":4428:4447  owner == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"ERC721A/ERC721A.sol\":4424:4484  if (owner == address(0)) revert BalanceQueryForZeroAddress() */\n      tag_132\n      jumpi\n        /* \"ERC721A/ERC721A.sol\":4456:4484  BalanceQueryForZeroAddress() */\n      mload(0x40)\n      0x8f4eb60400000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"ERC721A/ERC721A.sol\":4424:4484  if (owner == address(0)) revert BalanceQueryForZeroAddress() */\n    tag_132:\n        /* \"ERC721A/ERC721A.sol\":4510:4522  _addressData */\n      0x05\n        /* \"ERC721A/ERC721A.sol\":4510:4529  _addressData[owner] */\n      0x00\n        /* \"ERC721A/ERC721A.sol\":4523:4528  owner */\n      dup4\n        /* \"ERC721A/ERC721A.sol\":4510:4529  _addressData[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"ERC721A/ERC721A.sol\":4510:4537  _addressData[owner].balance */\n      0x00\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffff\n      and\n        /* \"ERC721A/ERC721A.sol\":4502:4538  uint256(_addressData[owner].balance) */\n      0xffffffffffffffff\n      and\n        /* \"ERC721A/ERC721A.sol\":4495:4538  return uint256(_addressData[owner].balance) */\n      swap1\n      pop\n        /* \"ERC721A/ERC721A.sol\":4340:4546  function balanceOf(address owner) public view override returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"ERC721A/ERC721A.sol\":7255:7359  function symbol() public view virtual override returns (string memory) {... */\n    tag_66:\n        /* \"ERC721A/ERC721A.sol\":7311:7324  string memory */\n      0x60\n        /* \"ERC721A/ERC721A.sol\":7344:7351  _symbol */\n      0x03\n        /* \"ERC721A/ERC721A.sol\":7337:7351  return _symbol */\n      dup1\n      sload\n      tag_134\n      swap1\n      tag_92\n      jump\t// in\n    tag_134:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_135\n      swap1\n      tag_92\n      jump\t// in\n    tag_135:\n      dup1\n      iszero\n      tag_136\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_137\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_136)\n    tag_137:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_138:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_138\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_136:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"ERC721A/ERC721A.sol\":7255:7359  function symbol() public view virtual override returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"ERC721A/ERC721A.sol\":8947:9234  function setApprovalForAll(address operator, bool approved) public virtual override {... */\n    tag_71:\n        /* \"ERC721A/ERC721A.sol\":9058:9070  _msgSender() */\n      tag_140\n        /* \"ERC721A/ERC721A.sol\":9058:9068  _msgSender */\n      tag_105\n        /* \"ERC721A/ERC721A.sol\":9058:9070  _msgSender() */\n      jump\t// in\n    tag_140:\n        /* \"ERC721A/ERC721A.sol\":9046:9070  operator == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"ERC721A/ERC721A.sol\":9046:9054  operator */\n      dup3\n        /* \"ERC721A/ERC721A.sol\":9046:9070  operator == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"ERC721A/ERC721A.sol\":9042:9096  if (operator == _msgSender()) revert ApproveToCaller() */\n      tag_141\n      jumpi\n        /* \"ERC721A/ERC721A.sol\":9079:9096  ApproveToCaller() */\n      mload(0x40)\n      0xb06307db00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"ERC721A/ERC721A.sol\":9042:9096  if (operator == _msgSender()) revert ApproveToCaller() */\n    tag_141:\n        /* \"ERC721A/ERC721A.sol\":9154:9162  approved */\n      dup1\n        /* \"ERC721A/ERC721A.sol\":9109:9127  _operatorApprovals */\n      0x07\n        /* \"ERC721A/ERC721A.sol\":9109:9141  _operatorApprovals[_msgSender()] */\n      0x00\n        /* \"ERC721A/ERC721A.sol\":9128:9140  _msgSender() */\n      tag_142\n        /* \"ERC721A/ERC721A.sol\":9128:9138  _msgSender */\n      tag_105\n        /* \"ERC721A/ERC721A.sol\":9128:9140  _msgSender() */\n      jump\t// in\n    tag_142:\n        /* \"ERC721A/ERC721A.sol\":9109:9141  _operatorApprovals[_msgSender()] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"ERC721A/ERC721A.sol\":9109:9151  _operatorApprovals[_msgSender()][operator] */\n      0x00\n        /* \"ERC721A/ERC721A.sol\":9142:9150  operator */\n      dup5\n        /* \"ERC721A/ERC721A.sol\":9109:9151  _operatorApprovals[_msgSender()][operator] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"ERC721A/ERC721A.sol\":9109:9162  _operatorApprovals[_msgSender()][operator] = approved */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"ERC721A/ERC721A.sol\":9207:9215  operator */\n      dup2\n        /* \"ERC721A/ERC721A.sol\":9178:9226  ApprovalForAll(_msgSender(), operator, approved) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"ERC721A/ERC721A.sol\":9193:9205  _msgSender() */\n      tag_143\n        /* \"ERC721A/ERC721A.sol\":9193:9203  _msgSender */\n      tag_105\n        /* \"ERC721A/ERC721A.sol\":9193:9205  _msgSender() */\n      jump\t// in\n    tag_143:\n        /* \"ERC721A/ERC721A.sol\":9178:9226  ApprovalForAll(_msgSender(), operator, approved) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31\n        /* \"ERC721A/ERC721A.sol\":9217:9225  approved */\n      dup4\n        /* \"ERC721A/ERC721A.sol\":9178:9226  ApprovalForAll(_msgSender(), operator, approved) */\n      mload(0x40)\n      tag_144\n      swap2\n      swap1\n      tag_26\n      jump\t// in\n    tag_144:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"ERC721A/ERC721A.sol\":8947:9234  function setApprovalForAll(address operator, bool approved) public virtual override {... */\n      pop\n      pop\n      jump\t// out\n        /* \"ERC721A/ERC721A.sol\":10033:10403  function safeTransferFrom(... */\n    tag_75:\n        /* \"ERC721A/ERC721A.sol\":10200:10228  _transfer(from, to, tokenId) */\n      tag_146\n        /* \"ERC721A/ERC721A.sol\":10210:10214  from */\n      dup5\n        /* \"ERC721A/ERC721A.sol\":10216:10218  to */\n      dup5\n        /* \"ERC721A/ERC721A.sol\":10220:10227  tokenId */\n      dup5\n        /* \"ERC721A/ERC721A.sol\":10200:10209  _transfer */\n      tag_117\n        /* \"ERC721A/ERC721A.sol\":10200:10228  _transfer(from, to, tokenId) */\n      jump\t// in\n    tag_146:\n        /* \"ERC721A/ERC721A.sol\":10243:10258  to.isContract() */\n      tag_147\n        /* \"ERC721A/ERC721A.sol\":10243:10245  to */\n      dup4\n        /* \"ERC721A/ERC721A.sol\":10243:10256  to.isContract */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_148\n        /* \"ERC721A/ERC721A.sol\":10243:10258  to.isContract() */\n      jump\t// in\n    tag_147:\n        /* \"ERC721A/ERC721A.sol\":10239:10396  if (to.isContract()) if(!_checkContractOnERC721Received(from, to, tokenId, _data)) {... */\n      iszero\n      tag_149\n      jumpi\n        /* \"ERC721A/ERC721A.sol\":10264:10320  _checkContractOnERC721Received(from, to, tokenId, _data) */\n      tag_150\n        /* \"ERC721A/ERC721A.sol\":10295:10299  from */\n      dup5\n        /* \"ERC721A/ERC721A.sol\":10301:10303  to */\n      dup5\n        /* \"ERC721A/ERC721A.sol\":10305:10312  tokenId */\n      dup5\n        /* \"ERC721A/ERC721A.sol\":10314:10319  _data */\n      dup5\n        /* \"ERC721A/ERC721A.sol\":10264:10294  _checkContractOnERC721Received */\n      tag_151\n        /* \"ERC721A/ERC721A.sol\":10264:10320  _checkContractOnERC721Received(from, to, tokenId, _data) */\n      jump\t// in\n    tag_150:\n        /* \"ERC721A/ERC721A.sol\":10260:10396  if(!_checkContractOnERC721Received(from, to, tokenId, _data)) {... */\n      tag_152\n      jumpi\n        /* \"ERC721A/ERC721A.sol\":10344:10384  TransferToNonERC721ReceiverImplementer() */\n      mload(0x40)\n      0xd1a57ed600000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"ERC721A/ERC721A.sol\":10260:10396  if(!_checkContractOnERC721Received(from, to, tokenId, _data)) {... */\n    tag_152:\n        /* \"ERC721A/ERC721A.sol\":10239:10396  if (to.isContract()) if(!_checkContractOnERC721Received(from, to, tokenId, _data)) {... */\n    tag_149:\n        /* \"ERC721A/ERC721A.sol\":10033:10403  function safeTransferFrom(... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"ERC721A/ERC721A.sol\":7430:7748  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {... */\n    tag_78:\n        /* \"ERC721A/ERC721A.sol\":7503:7516  string memory */\n      0x60\n        /* \"ERC721A/ERC721A.sol\":7534:7550  _exists(tokenId) */\n      tag_154\n        /* \"ERC721A/ERC721A.sol\":7542:7549  tokenId */\n      dup3\n        /* \"ERC721A/ERC721A.sol\":7534:7541  _exists */\n      tag_99\n        /* \"ERC721A/ERC721A.sol\":7534:7550  _exists(tokenId) */\n      jump\t// in\n    tag_154:\n        /* \"ERC721A/ERC721A.sol\":7529:7588  if (!_exists(tokenId)) revert URIQueryForNonexistentToken() */\n      tag_155\n      jumpi\n        /* \"ERC721A/ERC721A.sol\":7559:7588  URIQueryForNonexistentToken() */\n      mload(0x40)\n      0xa14c4b5000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"ERC721A/ERC721A.sol\":7529:7588  if (!_exists(tokenId)) revert URIQueryForNonexistentToken() */\n    tag_155:\n        /* \"ERC721A/ERC721A.sol\":7601:7622  string memory baseURI */\n      0x00\n        /* \"ERC721A/ERC721A.sol\":7625:7635  _baseURI() */\n      tag_156\n        /* \"ERC721A/ERC721A.sol\":7625:7633  _baseURI */\n      tag_157\n        /* \"ERC721A/ERC721A.sol\":7625:7635  _baseURI() */\n      jump\t// in\n    tag_156:\n        /* \"ERC721A/ERC721A.sol\":7601:7635  string memory baseURI = _baseURI() */\n      swap1\n      pop\n        /* \"ERC721A/ERC721A.sol\":7678:7679  0 */\n      0x00\n        /* \"ERC721A/ERC721A.sol\":7659:7666  baseURI */\n      dup2\n        /* \"ERC721A/ERC721A.sol\":7653:7674  bytes(baseURI).length */\n      mload\n        /* \"ERC721A/ERC721A.sol\":7653:7679  bytes(baseURI).length != 0 */\n      sub\n        /* \"ERC721A/ERC721A.sol\":7653:7740  bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '' */\n      tag_158\n      jumpi\n      mload(0x40)\n      dup1\n      0x20\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      pop\n      jump(tag_159)\n    tag_158:\n        /* \"ERC721A/ERC721A.sol\":7706:7713  baseURI */\n      dup1\n        /* \"ERC721A/ERC721A.sol\":7715:7733  tokenId.toString() */\n      tag_160\n        /* \"ERC721A/ERC721A.sol\":7715:7722  tokenId */\n      dup5\n        /* \"ERC721A/ERC721A.sol\":7715:7731  tokenId.toString */\n      tag_161\n        /* \"ERC721A/ERC721A.sol\":7715:7733  tokenId.toString() */\n      jump\t// in\n    tag_160:\n        /* \"ERC721A/ERC721A.sol\":7689:7734  abi.encodePacked(baseURI, tokenId.toString()) */\n      add(0x20, mload(0x40))\n      tag_162\n      swap3\n      swap2\n      swap1\n      tag_163\n      jump\t// in\n    tag_162:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"ERC721A/ERC721A.sol\":7653:7740  bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '' */\n    tag_159:\n        /* \"ERC721A/ERC721A.sol\":7646:7740  return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '' */\n      swap2\n      pop\n      pop\n        /* \"ERC721A/ERC721A.sol\":7430:7748  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"ERC721A/ERC721A.sol\":9305:9469  function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {... */\n    tag_83:\n        /* \"ERC721A/ERC721A.sol\":9402:9406  bool */\n      0x00\n        /* \"ERC721A/ERC721A.sol\":9426:9444  _operatorApprovals */\n      0x07\n        /* \"ERC721A/ERC721A.sol\":9426:9451  _operatorApprovals[owner] */\n      0x00\n        /* \"ERC721A/ERC721A.sol\":9445:9450  owner */\n      dup5\n        /* \"ERC721A/ERC721A.sol\":9426:9451  _operatorApprovals[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"ERC721A/ERC721A.sol\":9426:9461  _operatorApprovals[owner][operator] */\n      0x00\n        /* \"ERC721A/ERC721A.sol\":9452:9460  operator */\n      dup4\n        /* \"ERC721A/ERC721A.sol\":9426:9461  _operatorApprovals[owner][operator] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"ERC721A/ERC721A.sol\":9419:9461  return _operatorApprovals[owner][operator] */\n      swap1\n      pop\n        /* \"ERC721A/ERC721A.sol\":9305:9469  function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/introspection/ERC165.sol\":829:984  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {... */\n    tag_89:\n        /* \"@openzeppelin/contracts/utils/introspection/ERC165.sol\":914:918  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/introspection/ERC165.sol\":952:977  type(IERC165).interfaceId */\n      0x01ffc9a700000000000000000000000000000000000000000000000000000000\n        /* \"@openzeppelin/contracts/utils/introspection/ERC165.sol\":937:977  interfaceId == type(IERC165).interfaceId */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n        /* \"@openzeppelin/contracts/utils/introspection/ERC165.sol\":937:948  interfaceId */\n      dup3\n        /* \"@openzeppelin/contracts/utils/introspection/ERC165.sol\":937:977  interfaceId == type(IERC165).interfaceId */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      eq\n        /* \"@openzeppelin/contracts/utils/introspection/ERC165.sol\":930:977  return interfaceId == type(IERC165).interfaceId */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/introspection/ERC165.sol\":829:984  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"ERC721A/ERC721A.sol\":10658:10832  function _exists(uint256 tokenId) internal view returns (bool) {... */\n    tag_99:\n        /* \"ERC721A/ERC721A.sol\":10715:10719  bool */\n      0x00\n        /* \"ERC721A/ERC721A.sol\":10758:10765  tokenId */\n      dup2\n        /* \"ERC721A/ERC721A.sol\":10739:10754  _startTokenId() */\n      tag_167\n        /* \"ERC721A/ERC721A.sol\":10739:10752  _startTokenId */\n      tag_114\n        /* \"ERC721A/ERC721A.sol\":10739:10754  _startTokenId() */\n      jump\t// in\n    tag_167:\n        /* \"ERC721A/ERC721A.sol\":10739:10765  _startTokenId() <= tokenId */\n      gt\n      iszero\n        /* \"ERC721A/ERC721A.sol\":10739:10792  _startTokenId() <= tokenId && tokenId < _currentIndex */\n      dup1\n      iszero\n      tag_168\n      jumpi\n      pop\n        /* \"ERC721A/ERC721A.sol\":10779:10792  _currentIndex */\n      sload(0x00)\n        /* \"ERC721A/ERC721A.sol\":10769:10776  tokenId */\n      dup3\n        /* \"ERC721A/ERC721A.sol\":10769:10792  tokenId < _currentIndex */\n      lt\n        /* \"ERC721A/ERC721A.sol\":10739:10792  _startTokenId() <= tokenId && tokenId < _currentIndex */\n    tag_168:\n        /* \"ERC721A/ERC721A.sol\":10739:10824  _startTokenId() <= tokenId && tokenId < _currentIndex && !_ownerships[tokenId].burned */\n      dup1\n      iszero\n      tag_169\n      jumpi\n      pop\n        /* \"ERC721A/ERC721A.sol\":10797:10808  _ownerships */\n      0x04\n        /* \"ERC721A/ERC721A.sol\":10797:10817  _ownerships[tokenId] */\n      0x00\n        /* \"ERC721A/ERC721A.sol\":10809:10816  tokenId */\n      dup4\n        /* \"ERC721A/ERC721A.sol\":10797:10817  _ownerships[tokenId] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"ERC721A/ERC721A.sol\":10797:10824  _ownerships[tokenId].burned */\n      0x00\n      add\n      0x1c\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"ERC721A/ERC721A.sol\":10796:10824  !_ownerships[tokenId].burned */\n      iszero\n        /* \"ERC721A/ERC721A.sol\":10739:10824  _startTokenId() <= tokenId && tokenId < _currentIndex && !_ownerships[tokenId].burned */\n    tag_169:\n        /* \"ERC721A/ERC721A.sol\":10732:10824  return _startTokenId() <= tokenId && tokenId < _currentIndex && !_ownerships[tokenId].burned */\n      swap1\n      pop\n        /* \"ERC721A/ERC721A.sol\":10658:10832  function _exists(uint256 tokenId) internal view returns (bool) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\n    tag_105:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":693:700  address */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/utils/Context.sol\":712:729  return msg.sender */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"ERC721A/ERC721A.sol\":19891:20087  function _approve(... */\n    tag_111:\n        /* \"ERC721A/ERC721A.sol\":20033:20035  to */\n      dup3\n        /* \"ERC721A/ERC721A.sol\":20006:20021  _tokenApprovals */\n      0x06\n        /* \"ERC721A/ERC721A.sol\":20006:20030  _tokenApprovals[tokenId] */\n      0x00\n        /* \"ERC721A/ERC721A.sol\":20022:20029  tokenId */\n      dup5\n        /* \"ERC721A/ERC721A.sol\":20006:20030  _tokenApprovals[tokenId] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"ERC721A/ERC721A.sol\":20006:20035  _tokenApprovals[tokenId] = to */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"ERC721A/ERC721A.sol\":20071:20078  tokenId */\n      dup2\n        /* \"ERC721A/ERC721A.sol\":20067:20069  to */\n      dup4\n        /* \"ERC721A/ERC721A.sol\":20051:20079  Approval(owner, to, tokenId) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"ERC721A/ERC721A.sol\":20060:20065  owner */\n      dup3\n        /* \"ERC721A/ERC721A.sol\":20051:20079  Approval(owner, to, tokenId) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log4\n        /* \"ERC721A/ERC721A.sol\":19891:20087  function _approve(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"ERC721A/ERC721A.sol\":2985:3077  function _startTokenId() internal view virtual returns (uint256) {... */\n    tag_114:\n        /* \"ERC721A/ERC721A.sol\":3041:3048  uint256 */\n      0x00\n        /* \"ERC721A/ERC721A.sol\":3068:3069  1 */\n      0x01\n        /* \"ERC721A/ERC721A.sol\":3061:3069  return 1 */\n      swap1\n      pop\n        /* \"ERC721A/ERC721A.sol\":2985:3077  function _startTokenId() internal view virtual returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"ERC721A/ERC721A.sol\":14839:16969  function _transfer(... */\n    tag_117:\n        /* \"ERC721A/ERC721A.sol\":14954:14989  TokenOwnership memory prevOwnership */\n      0x00\n        /* \"ERC721A/ERC721A.sol\":14992:15013  _ownershipOf(tokenId) */\n      tag_174\n        /* \"ERC721A/ERC721A.sol\":15005:15012  tokenId */\n      dup3\n        /* \"ERC721A/ERC721A.sol\":14992:15004  _ownershipOf */\n      tag_130\n        /* \"ERC721A/ERC721A.sol\":14992:15013  _ownershipOf(tokenId) */\n      jump\t// in\n    tag_174:\n        /* \"ERC721A/ERC721A.sol\":14954:15013  TokenOwnership memory prevOwnership = _ownershipOf(tokenId) */\n      swap1\n      pop\n        /* \"ERC721A/ERC721A.sol\":15052:15056  from */\n      dup4\n        /* \"ERC721A/ERC721A.sol\":15030:15056  prevOwnership.addr != from */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"ERC721A/ERC721A.sol\":15030:15043  prevOwnership */\n      dup2\n        /* \"ERC721A/ERC721A.sol\":15030:15048  prevOwnership.addr */\n      0x00\n      add\n      mload\n        /* \"ERC721A/ERC721A.sol\":15030:15056  prevOwnership.addr != from */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"ERC721A/ERC721A.sol\":15026:15093  if (prevOwnership.addr != from) revert TransferFromIncorrectOwner() */\n      tag_175\n      jumpi\n        /* \"ERC721A/ERC721A.sol\":15065:15093  TransferFromIncorrectOwner() */\n      mload(0x40)\n      0xa114810000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"ERC721A/ERC721A.sol\":15026:15093  if (prevOwnership.addr != from) revert TransferFromIncorrectOwner() */\n    tag_175:\n        /* \"ERC721A/ERC721A.sol\":15106:15128  bool isApprovedOrOwner */\n      0x00\n        /* \"ERC721A/ERC721A.sol\":15148:15152  from */\n      dup5\n        /* \"ERC721A/ERC721A.sol\":15132:15152  _msgSender() == from */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"ERC721A/ERC721A.sol\":15132:15144  _msgSender() */\n      tag_176\n        /* \"ERC721A/ERC721A.sol\":15132:15142  _msgSender */\n      tag_105\n        /* \"ERC721A/ERC721A.sol\":15132:15144  _msgSender() */\n      jump\t// in\n    tag_176:\n        /* \"ERC721A/ERC721A.sol\":15132:15152  _msgSender() == from */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"ERC721A/ERC721A.sol\":15132:15205  _msgSender() == from ||... */\n      dup1\n      tag_177\n      jumpi\n      pop\n        /* \"ERC721A/ERC721A.sol\":15169:15205  isApprovedForAll(from, _msgSender()) */\n      tag_178\n        /* \"ERC721A/ERC721A.sol\":15186:15190  from */\n      dup6\n        /* \"ERC721A/ERC721A.sol\":15192:15204  _msgSender() */\n      tag_179\n        /* \"ERC721A/ERC721A.sol\":15192:15202  _msgSender */\n      tag_105\n        /* \"ERC721A/ERC721A.sol\":15192:15204  _msgSender() */\n      jump\t// in\n    tag_179:\n        /* \"ERC721A/ERC721A.sol\":15169:15185  isApprovedForAll */\n      tag_83\n        /* \"ERC721A/ERC721A.sol\":15169:15205  isApprovedForAll(from, _msgSender()) */\n      jump\t// in\n    tag_178:\n        /* \"ERC721A/ERC721A.sol\":15132:15205  _msgSender() == from ||... */\n    tag_177:\n        /* \"ERC721A/ERC721A.sol\":15132:15258  _msgSender() == from ||... */\n      dup1\n      tag_180\n      jumpi\n      pop\n        /* \"ERC721A/ERC721A.sol\":15246:15258  _msgSender() */\n      tag_181\n        /* \"ERC721A/ERC721A.sol\":15246:15256  _msgSender */\n      tag_105\n        /* \"ERC721A/ERC721A.sol\":15246:15258  _msgSender() */\n      jump\t// in\n    tag_181:\n        /* \"ERC721A/ERC721A.sol\":15222:15258  getApproved(tokenId) == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"ERC721A/ERC721A.sol\":15222:15242  getApproved(tokenId) */\n      tag_182\n        /* \"ERC721A/ERC721A.sol\":15234:15241  tokenId */\n      dup5\n        /* \"ERC721A/ERC721A.sol\":15222:15233  getApproved */\n      tag_34\n        /* \"ERC721A/ERC721A.sol\":15222:15242  getApproved(tokenId) */\n      jump\t// in\n    tag_182:\n        /* \"ERC721A/ERC721A.sol\":15222:15258  getApproved(tokenId) == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"ERC721A/ERC721A.sol\":15132:15258  _msgSender() == from ||... */\n    tag_180:\n        /* \"ERC721A/ERC721A.sol\":15106:15259  bool isApprovedOrOwner = (_msgSender() == from ||... */\n      swap1\n      pop\n        /* \"ERC721A/ERC721A.sol\":15277:15294  isApprovedOrOwner */\n      dup1\n        /* \"ERC721A/ERC721A.sol\":15272:15338  if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved() */\n      tag_183\n      jumpi\n        /* \"ERC721A/ERC721A.sol\":15303:15338  TransferCallerNotOwnerNorApproved() */\n      mload(0x40)\n      0x59c896be00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"ERC721A/ERC721A.sol\":15272:15338  if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved() */\n    tag_183:\n        /* \"ERC721A/ERC721A.sol\":15367:15368  0 */\n      0x00\n        /* \"ERC721A/ERC721A.sol\":15353:15369  to == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"ERC721A/ERC721A.sol\":15353:15355  to */\n      dup5\n        /* \"ERC721A/ERC721A.sol\":15353:15369  to == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"ERC721A/ERC721A.sol\":15349:15401  if (to == address(0)) revert TransferToZeroAddress() */\n      tag_184\n      jumpi\n        /* \"ERC721A/ERC721A.sol\":15378:15401  TransferToZeroAddress() */\n      mload(0x40)\n      0xea553b3400000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"ERC721A/ERC721A.sol\":15349:15401  if (to == address(0)) revert TransferToZeroAddress() */\n    tag_184:\n        /* \"ERC721A/ERC721A.sol\":15414:15457  _beforeTokenTransfers(from, to, tokenId, 1) */\n      tag_185\n        /* \"ERC721A/ERC721A.sol\":15436:15440  from */\n      dup6\n        /* \"ERC721A/ERC721A.sol\":15442:15444  to */\n      dup6\n        /* \"ERC721A/ERC721A.sol\":15446:15453  tokenId */\n      dup6\n        /* \"ERC721A/ERC721A.sol\":15455:15456  1 */\n      0x01\n        /* \"ERC721A/ERC721A.sol\":15414:15435  _beforeTokenTransfers */\n      tag_186\n        /* \"ERC721A/ERC721A.sol\":15414:15457  _beforeTokenTransfers(from, to, tokenId, 1) */\n      jump\t// in\n    tag_185:\n        /* \"ERC721A/ERC721A.sol\":15522:15557  _approve(address(0), tokenId, from) */\n      tag_187\n        /* \"ERC721A/ERC721A.sol\":15539:15540  0 */\n      0x00\n        /* \"ERC721A/ERC721A.sol\":15543:15550  tokenId */\n      dup5\n        /* \"ERC721A/ERC721A.sol\":15552:15556  from */\n      dup8\n        /* \"ERC721A/ERC721A.sol\":15522:15530  _approve */\n      tag_111\n        /* \"ERC721A/ERC721A.sol\":15522:15557  _approve(address(0), tokenId, from) */\n      jump\t// in\n    tag_187:\n        /* \"ERC721A/ERC721A.sol\":15883:15884  1 */\n      0x01\n        /* \"ERC721A/ERC721A.sol\":15853:15865  _addressData */\n      0x05\n        /* \"ERC721A/ERC721A.sol\":15853:15871  _addressData[from] */\n      0x00\n        /* \"ERC721A/ERC721A.sol\":15866:15870  from */\n      dup8\n        /* \"ERC721A/ERC721A.sol\":15853:15871  _addressData[from] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"ERC721A/ERC721A.sol\":15853:15879  _addressData[from].balance */\n      0x00\n      add\n      0x00\n        /* \"ERC721A/ERC721A.sol\":15853:15884  _addressData[from].balance -= 1 */\n      dup3\n      dup3\n      dup3\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffff\n      and\n      sub\n      swap3\n      pop\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"ERC721A/ERC721A.sol\":15927:15928  1 */\n      0x01\n        /* \"ERC721A/ERC721A.sol\":15899:15911  _addressData */\n      0x05\n        /* \"ERC721A/ERC721A.sol\":15899:15915  _addressData[to] */\n      0x00\n        /* \"ERC721A/ERC721A.sol\":15912:15914  to */\n      dup7\n        /* \"ERC721A/ERC721A.sol\":15899:15915  _addressData[to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"ERC721A/ERC721A.sol\":15899:15923  _addressData[to].balance */\n      0x00\n      add\n      0x00\n        /* \"ERC721A/ERC721A.sol\":15899:15928  _addressData[to].balance += 1 */\n      dup3\n      dup3\n      dup3\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffff\n      and\n      add\n      swap3\n      pop\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"ERC721A/ERC721A.sol\":15945:15976  TokenOwnership storage currSlot */\n      0x00\n        /* \"ERC721A/ERC721A.sol\":15979:15990  _ownerships */\n      0x04\n        /* \"ERC721A/ERC721A.sol\":15979:15999  _ownerships[tokenId] */\n      0x00\n        /* \"ERC721A/ERC721A.sol\":15991:15998  tokenId */\n      dup6\n        /* \"ERC721A/ERC721A.sol\":15979:15999  _ownerships[tokenId] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"ERC721A/ERC721A.sol\":15945:15999  TokenOwnership storage currSlot = _ownerships[tokenId] */\n      swap1\n      pop\n        /* \"ERC721A/ERC721A.sol\":16030:16032  to */\n      dup5\n        /* \"ERC721A/ERC721A.sol\":16014:16022  currSlot */\n      dup2\n        /* \"ERC721A/ERC721A.sol\":16014:16027  currSlot.addr */\n      0x00\n      add\n      0x00\n        /* \"ERC721A/ERC721A.sol\":16014:16032  currSlot.addr = to */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"ERC721A/ERC721A.sol\":16080:16095  block.timestamp */\n      timestamp\n        /* \"ERC721A/ERC721A.sol\":16047:16055  currSlot */\n      dup2\n        /* \"ERC721A/ERC721A.sol\":16047:16070  currSlot.startTimestamp */\n      0x00\n      add\n      0x14\n        /* \"ERC721A/ERC721A.sol\":16047:16096  currSlot.startTimestamp = uint64(block.timestamp) */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"ERC721A/ERC721A.sol\":16348:16367  uint256 nextTokenId */\n      0x00\n        /* \"ERC721A/ERC721A.sol\":16380:16381  1 */\n      0x01\n        /* \"ERC721A/ERC721A.sol\":16370:16377  tokenId */\n      dup6\n        /* \"ERC721A/ERC721A.sol\":16370:16381  tokenId + 1 */\n      add\n        /* \"ERC721A/ERC721A.sol\":16348:16381  uint256 nextTokenId = tokenId + 1 */\n      swap1\n      pop\n        /* \"ERC721A/ERC721A.sol\":16396:16427  TokenOwnership storage nextSlot */\n      0x00\n        /* \"ERC721A/ERC721A.sol\":16430:16441  _ownerships */\n      0x04\n        /* \"ERC721A/ERC721A.sol\":16430:16454  _ownerships[nextTokenId] */\n      0x00\n        /* \"ERC721A/ERC721A.sol\":16442:16453  nextTokenId */\n      dup4\n        /* \"ERC721A/ERC721A.sol\":16430:16454  _ownerships[nextTokenId] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"ERC721A/ERC721A.sol\":16396:16454  TokenOwnership storage nextSlot = _ownerships[nextTokenId] */\n      swap1\n      pop\n        /* \"ERC721A/ERC721A.sol\":16498:16499  0 */\n      0x00\n        /* \"ERC721A/ERC721A.sol\":16473:16500  nextSlot.addr == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"ERC721A/ERC721A.sol\":16473:16481  nextSlot */\n      dup2\n        /* \"ERC721A/ERC721A.sol\":16473:16486  nextSlot.addr */\n      0x00\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"ERC721A/ERC721A.sol\":16473:16500  nextSlot.addr == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"ERC721A/ERC721A.sol\":16469:16853  if (nextSlot.addr == address(0)) {... */\n      tag_188\n      jumpi\n        /* \"ERC721A/ERC721A.sol\":16683:16696  _currentIndex */\n      sload(0x00)\n        /* \"ERC721A/ERC721A.sol\":16668:16679  nextTokenId */\n      dup3\n        /* \"ERC721A/ERC721A.sol\":16668:16696  nextTokenId != _currentIndex */\n      eq\n        /* \"ERC721A/ERC721A.sol\":16664:16838  if (nextTokenId != _currentIndex) {... */\n      tag_189\n      jumpi\n        /* \"ERC721A/ERC721A.sol\":16737:16741  from */\n      dup8\n        /* \"ERC721A/ERC721A.sol\":16721:16729  nextSlot */\n      dup2\n        /* \"ERC721A/ERC721A.sol\":16721:16734  nextSlot.addr */\n      0x00\n      add\n      0x00\n        /* \"ERC721A/ERC721A.sol\":16721:16741  nextSlot.addr = from */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"ERC721A/ERC721A.sol\":16790:16803  prevOwnership */\n      dup5\n        /* \"ERC721A/ERC721A.sol\":16790:16818  prevOwnership.startTimestamp */\n      0x20\n      add\n      mload\n        /* \"ERC721A/ERC721A.sol\":16764:16772  nextSlot */\n      dup2\n        /* \"ERC721A/ERC721A.sol\":16764:16787  nextSlot.startTimestamp */\n      0x00\n      add\n      0x14\n        /* \"ERC721A/ERC721A.sol\":16764:16818  nextSlot.startTimestamp = prevOwnership.startTimestamp */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"ERC721A/ERC721A.sol\":16664:16838  if (nextTokenId != _currentIndex) {... */\n    tag_189:\n        /* \"ERC721A/ERC721A.sol\":16469:16853  if (nextSlot.addr == address(0)) {... */\n    tag_188:\n        /* \"ERC721A/ERC721A.sol\":15828:16864  unchecked {... */\n      pop\n      pop\n      pop\n        /* \"ERC721A/ERC721A.sol\":16900:16907  tokenId */\n      dup3\n        /* \"ERC721A/ERC721A.sol\":16896:16898  to */\n      dup5\n        /* \"ERC721A/ERC721A.sol\":16881:16908  Transfer(from, to, tokenId) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"ERC721A/ERC721A.sol\":16890:16894  from */\n      dup7\n        /* \"ERC721A/ERC721A.sol\":16881:16908  Transfer(from, to, tokenId) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log4\n        /* \"ERC721A/ERC721A.sol\":16919:16961  _afterTokenTransfers(from, to, tokenId, 1) */\n      tag_190\n        /* \"ERC721A/ERC721A.sol\":16940:16944  from */\n      dup6\n        /* \"ERC721A/ERC721A.sol\":16946:16948  to */\n      dup6\n        /* \"ERC721A/ERC721A.sol\":16950:16957  tokenId */\n      dup6\n        /* \"ERC721A/ERC721A.sol\":16959:16960  1 */\n      0x01\n        /* \"ERC721A/ERC721A.sol\":16919:16939  _afterTokenTransfers */\n      tag_191\n        /* \"ERC721A/ERC721A.sol\":16919:16961  _afterTokenTransfers(from, to, tokenId, 1) */\n      jump\t// in\n    tag_190:\n        /* \"ERC721A/ERC721A.sol\":14943:16969  {... */\n      pop\n      pop\n        /* \"ERC721A/ERC721A.sol\":14839:16969  function _transfer(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3122:3218  function sub(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_120:\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3180:3187  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3210:3211  b */\n      dup2\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3206:3207  a */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3206:3211  a - b */\n      tag_193\n      swap2\n      swap1\n      tag_194\n      jump\t// in\n    tag_193:\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3199:3211  return a - b */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3122:3218  function sub(uint256 a, uint256 b) internal pure returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3465:3561  function mul(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_123:\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3523:3530  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3553:3554  b */\n      dup2\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3549:3550  a */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3549:3554  a * b */\n      tag_196\n      swap2\n      swap1\n      tag_197\n      jump\t// in\n    tag_196:\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3542:3554  return a * b */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3465:3561  function mul(uint256 a, uint256 b) internal pure returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":2755:2851  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_125:\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":2813:2820  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":2843:2844  b */\n      dup2\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":2839:2840  a */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":2839:2844  a + b */\n      tag_199\n      swap2\n      swap1\n      tag_200\n      jump\t// in\n    tag_199:\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":2832:2844  return a + b */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":2755:2851  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"ERC721A/ERC721A.sol\":5721:6832  function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {... */\n    tag_130:\n        /* \"ERC721A/ERC721A.sol\":5783:5804  TokenOwnership memory */\n      tag_201\n      tag_202\n      jump\t// in\n    tag_201:\n        /* \"ERC721A/ERC721A.sol\":5817:5829  uint256 curr */\n      0x00\n        /* \"ERC721A/ERC721A.sol\":5832:5839  tokenId */\n      dup3\n        /* \"ERC721A/ERC721A.sol\":5817:5839  uint256 curr = tokenId */\n      swap1\n      pop\n        /* \"ERC721A/ERC721A.sol\":5900:5904  curr */\n      dup1\n        /* \"ERC721A/ERC721A.sol\":5881:5896  _startTokenId() */\n      tag_204\n        /* \"ERC721A/ERC721A.sol\":5881:5894  _startTokenId */\n      tag_114\n        /* \"ERC721A/ERC721A.sol\":5881:5896  _startTokenId() */\n      jump\t// in\n    tag_204:\n        /* \"ERC721A/ERC721A.sol\":5881:5904  _startTokenId() <= curr */\n      gt\n        /* \"ERC721A/ERC721A.sol\":5877:6765  if (_startTokenId() <= curr) if (curr < _currentIndex) {... */\n      tag_205\n      jumpi\n        /* \"ERC721A/ERC721A.sol\":5917:5930  _currentIndex */\n      sload(0x00)\n        /* \"ERC721A/ERC721A.sol\":5910:5914  curr */\n      dup2\n        /* \"ERC721A/ERC721A.sol\":5910:5930  curr < _currentIndex */\n      lt\n        /* \"ERC721A/ERC721A.sol\":5906:6765  if (curr < _currentIndex) {... */\n      iszero\n      tag_206\n      jumpi\n        /* \"ERC721A/ERC721A.sol\":5951:5982  TokenOwnership memory ownership */\n      0x00\n        /* \"ERC721A/ERC721A.sol\":5985:5996  _ownerships */\n      0x04\n        /* \"ERC721A/ERC721A.sol\":5985:6002  _ownerships[curr] */\n      0x00\n        /* \"ERC721A/ERC721A.sol\":5997:6001  curr */\n      dup4\n        /* \"ERC721A/ERC721A.sol\":5985:6002  _ownerships[curr] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"ERC721A/ERC721A.sol\":5951:6002  TokenOwnership memory ownership = _ownerships[curr] */\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      swap1\n      dup2\n      0x00\n      dup3\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup3\n      add\n      0x14\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup3\n      add\n      0x1c\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n      iszero\n      iszero\n      iszero\n      iszero\n      dup2\n      mstore\n      pop\n      pop\n      swap1\n      pop\n        /* \"ERC721A/ERC721A.sol\":6026:6035  ownership */\n      dup1\n        /* \"ERC721A/ERC721A.sol\":6026:6042  ownership.burned */\n      0x40\n      add\n      mload\n        /* \"ERC721A/ERC721A.sol\":6021:6750  if (!ownership.burned) {... */\n      tag_207\n      jumpi\n        /* \"ERC721A/ERC721A.sol\":6097:6098  0 */\n      0x00\n        /* \"ERC721A/ERC721A.sol\":6071:6099  ownership.addr != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"ERC721A/ERC721A.sol\":6071:6080  ownership */\n      dup2\n        /* \"ERC721A/ERC721A.sol\":6071:6085  ownership.addr */\n      0x00\n      add\n      mload\n        /* \"ERC721A/ERC721A.sol\":6071:6099  ownership.addr != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"ERC721A/ERC721A.sol\":6067:6168  if (ownership.addr != address(0)) {... */\n      tag_208\n      jumpi\n        /* \"ERC721A/ERC721A.sol\":6135:6144  ownership */\n      dup1\n        /* \"ERC721A/ERC721A.sol\":6128:6144  return ownership */\n      swap3\n      pop\n      pop\n      pop\n      jump(tag_203)\n        /* \"ERC721A/ERC721A.sol\":6067:6168  if (ownership.addr != address(0)) {... */\n    tag_208:\n        /* \"ERC721A/ERC721A.sol\":6470:6731  while (true) {... */\n    tag_209:\n        /* \"ERC721A/ERC721A.sol\":6477:6481  true */\n      0x01\n        /* \"ERC721A/ERC721A.sol\":6470:6731  while (true) {... */\n      iszero\n      tag_210\n      jumpi\n        /* \"ERC721A/ERC721A.sol\":6510:6516  curr-- */\n      dup2\n      dup1\n      0x01\n      swap1\n      sub\n      swap3\n      pop\n      pop\n        /* \"ERC721A/ERC721A.sol\":6555:6566  _ownerships */\n      0x04\n        /* \"ERC721A/ERC721A.sol\":6555:6572  _ownerships[curr] */\n      0x00\n        /* \"ERC721A/ERC721A.sol\":6567:6571  curr */\n      dup4\n        /* \"ERC721A/ERC721A.sol\":6555:6572  _ownerships[curr] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"ERC721A/ERC721A.sol\":6543:6572  ownership = _ownerships[curr] */\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      swap1\n      dup2\n      0x00\n      dup3\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup3\n      add\n      0x14\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup3\n      add\n      0x1c\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n      iszero\n      iszero\n      iszero\n      iszero\n      dup2\n      mstore\n      pop\n      pop\n      swap1\n      pop\n        /* \"ERC721A/ERC721A.sol\":6629:6630  0 */\n      0x00\n        /* \"ERC721A/ERC721A.sol\":6603:6631  ownership.addr != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"ERC721A/ERC721A.sol\":6603:6612  ownership */\n      dup2\n        /* \"ERC721A/ERC721A.sol\":6603:6617  ownership.addr */\n      0x00\n      add\n      mload\n        /* \"ERC721A/ERC721A.sol\":6603:6631  ownership.addr != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"ERC721A/ERC721A.sol\":6599:6708  if (ownership.addr != address(0)) {... */\n      tag_211\n      jumpi\n        /* \"ERC721A/ERC721A.sol\":6671:6680  ownership */\n      dup1\n        /* \"ERC721A/ERC721A.sol\":6664:6680  return ownership */\n      swap3\n      pop\n      pop\n      pop\n      jump(tag_203)\n        /* \"ERC721A/ERC721A.sol\":6599:6708  if (ownership.addr != address(0)) {... */\n    tag_211:\n        /* \"ERC721A/ERC721A.sol\":6470:6731  while (true) {... */\n      jump(tag_209)\n    tag_210:\n        /* \"ERC721A/ERC721A.sol\":6021:6750  if (!ownership.burned) {... */\n    tag_207:\n        /* \"ERC721A/ERC721A.sol\":5932:6765  {... */\n      pop\n        /* \"ERC721A/ERC721A.sol\":5906:6765  if (curr < _currentIndex) {... */\n    tag_206:\n        /* \"ERC721A/ERC721A.sol\":5877:6765  if (_startTokenId() <= curr) if (curr < _currentIndex) {... */\n    tag_205:\n        /* \"ERC721A/ERC721A.sol\":6793:6824  OwnerQueryForNonexistentToken() */\n      mload(0x40)\n      0xdf2d9b4200000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"ERC721A/ERC721A.sol\":5721:6832  function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {... */\n    tag_203:\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1175:1495  function isContract(address account) internal view returns (bool) {... */\n    tag_148:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1235:1239  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1487:1488  0 */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1465:1472  account */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1465:1484  account.code.length */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      extcodesize\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1465:1488  account.code.length > 0 */\n      gt\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1458:1488  return account.code.length > 0 */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1175:1495  function isContract(address account) internal view returns (bool) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"ERC721A/ERC721A.sol\":20579:21246  function _checkContractOnERC721Received(... */\n    tag_151:\n        /* \"ERC721A/ERC721A.sol\":20742:20746  bool */\n      0x00\n        /* \"ERC721A/ERC721A.sol\":20779:20781  to */\n      dup4\n        /* \"ERC721A/ERC721A.sol\":20763:20799  IERC721Receiver(to).onERC721Received */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x150b7a02\n        /* \"ERC721A/ERC721A.sol\":20800:20812  _msgSender() */\n      tag_214\n        /* \"ERC721A/ERC721A.sol\":20800:20810  _msgSender */\n      tag_105\n        /* \"ERC721A/ERC721A.sol\":20800:20812  _msgSender() */\n      jump\t// in\n    tag_214:\n        /* \"ERC721A/ERC721A.sol\":20814:20818  from */\n      dup8\n        /* \"ERC721A/ERC721A.sol\":20820:20827  tokenId */\n      dup7\n        /* \"ERC721A/ERC721A.sol\":20829:20834  _data */\n      dup7\n        /* \"ERC721A/ERC721A.sol\":20763:20835  IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) */\n      mload(0x40)\n      dup6\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_215\n      swap5\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_216\n      jump\t// in\n    tag_215:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      dup1\n      iszero\n      tag_217\n      jumpi\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_218\n      swap2\n      swap1\n      tag_219\n      jump\t// in\n    tag_218:\n      0x01\n    tag_217:\n        /* \"ERC721A/ERC721A.sol\":20759:21239  try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {... */\n      tag_220\n      jumpi\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_225\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_224)\n    tag_225:\n      0x60\n      swap2\n      pop\n    tag_224:\n      pop\n        /* \"ERC721A/ERC721A.sol\":21014:21015  0 */\n      0x00\n        /* \"ERC721A/ERC721A.sol\":20997:21003  reason */\n      dup2\n        /* \"ERC721A/ERC721A.sol\":20997:21010  reason.length */\n      mload\n        /* \"ERC721A/ERC721A.sol\":20997:21015  reason.length == 0 */\n      sub\n        /* \"ERC721A/ERC721A.sol\":20993:21228  if (reason.length == 0) {... */\n      tag_226\n      jumpi\n        /* \"ERC721A/ERC721A.sol\":21043:21083  TransferToNonERC721ReceiverImplementer() */\n      mload(0x40)\n      0xd1a57ed600000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"ERC721A/ERC721A.sol\":20993:21228  if (reason.length == 0) {... */\n    tag_226:\n        /* \"ERC721A/ERC721A.sol\":21186:21192  reason */\n      dup1\n        /* \"ERC721A/ERC721A.sol\":21180:21193  mload(reason) */\n      mload\n        /* \"ERC721A/ERC721A.sol\":21171:21177  reason */\n      dup2\n        /* \"ERC721A/ERC721A.sol\":21167:21169  32 */\n      0x20\n        /* \"ERC721A/ERC721A.sol\":21163:21178  add(32, reason) */\n      add\n        /* \"ERC721A/ERC721A.sol\":21156:21194  revert(add(32, reason), mload(reason)) */\n      revert\n        /* \"ERC721A/ERC721A.sol\":20759:21239  try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {... */\n    tag_220:\n        /* \"ERC721A/ERC721A.sol\":20892:20937  IERC721Receiver(to).onERC721Received.selector */\n      shl(0xe0, 0x150b7a02)\n        /* \"ERC721A/ERC721A.sol\":20882:20937  retval == IERC721Receiver(to).onERC721Received.selector */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n        /* \"ERC721A/ERC721A.sol\":20882:20888  retval */\n      dup2\n        /* \"ERC721A/ERC721A.sol\":20882:20937  retval == IERC721Receiver(to).onERC721Received.selector */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      eq\n        /* \"ERC721A/ERC721A.sol\":20875:20937  return retval == IERC721Receiver(to).onERC721Received.selector */\n      swap2\n      pop\n      pop\n        /* \"ERC721A/ERC721A.sol\":20579:21246  function _checkContractOnERC721Received(... */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"ERC721A/ERC721A.sol\":7996:8171  function _baseURI() internal view virtual returns (string memory) {... */\n    tag_157:\n        /* \"ERC721A/ERC721A.sol\":8047:8060  string memory */\n      0x60\n        /* \"ERC721A/ERC721A.sol\":8073:8163  return 'https://gateway.pinata.cloud/ipfs/QmfHWktTbSTBNLww8ZDh2qc5DKqiZciknoq76ZfXrsoR1v/' */\n      mload(0x40)\n      dup1\n      0x80\n      add\n      0x40\n      mstore\n      dup1\n      0x51\n      dup2\n      mstore\n      0x20\n      add\n      data_d8bb5093925f17312ccd69c1ad4eefb61d29f5f451bdf501cef244662be1efab\n      0x51\n      swap2\n      codecopy\n      swap1\n      pop\n        /* \"ERC721A/ERC721A.sol\":7996:8171  function _baseURI() internal view virtual returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":328:1031  function toString(uint256 value) internal pure returns (string memory) {... */\n    tag_161:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":384:397  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":610:611  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":601:606  value */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":601:611  value == 0 */\n      sub\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":597:648  if (value == 0) {... */\n      tag_231\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":627:637  return \"0\" */\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x01\n      dup2\n      mstore\n      0x20\n      add\n      0x3000000000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      pop\n      swap1\n      pop\n      jump(tag_230)\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":597:648  if (value == 0) {... */\n    tag_231:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":657:669  uint256 temp */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":672:677  value */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":657:677  uint256 temp = value */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":687:701  uint256 digits */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":711:786  while (temp != 0) {... */\n    tag_232:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":726:727  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":718:722  temp */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":718:727  temp != 0 */\n      eq\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":711:786  while (temp != 0) {... */\n      tag_233\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":743:751  digits++ */\n      dup1\n      dup1\n      tag_234\n      swap1\n      tag_235\n      jump\t// in\n    tag_234:\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":773:775  10 */\n      0x0a\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":765:775  temp /= 10 */\n      dup3\n      tag_236\n      swap2\n      swap1\n      tag_237\n      jump\t// in\n    tag_236:\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":711:786  while (temp != 0) {... */\n      jump(tag_232)\n    tag_233:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":795:814  bytes memory buffer */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":827:833  digits */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":817:834  new bytes(digits) */\n      0xffffffffffffffff\n      dup2\n      gt\n      iszero\n      tag_238\n      jumpi\n      tag_239\n      tag_240\n      jump\t// in\n    tag_239:\n    tag_238:\n      mload(0x40)\n      swap1\n      dup1\n      dup3\n      mstore\n      dup1\n      0x1f\n      add\n      not(0x1f)\n      and\n      0x20\n      add\n      dup3\n      add\n      0x40\n      mstore\n      dup1\n      iszero\n      tag_241\n      jumpi\n      dup2\n      0x20\n      add\n      0x01\n      dup3\n      mul\n      dup1\n      calldatasize\n      dup4\n      calldatacopy\n      dup1\n      dup3\n      add\n      swap2\n      pop\n      pop\n      swap1\n      pop\n    tag_241:\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":795:834  bytes memory buffer = new bytes(digits) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":844:994  while (value != 0) {... */\n    tag_242:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":860:861  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":851:856  value */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":851:861  value != 0 */\n      eq\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":844:994  while (value != 0) {... */\n      tag_243\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":887:888  1 */\n      0x01\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":877:888  digits -= 1 */\n      dup3\n      tag_244\n      swap2\n      swap1\n      tag_194\n      jump\t// in\n    tag_244:\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":953:955  10 */\n      0x0a\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":945:950  value */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":945:955  value % 10 */\n      tag_245\n      swap2\n      swap1\n      tag_246\n      jump\t// in\n    tag_245:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":932:934  48 */\n      0x30\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":932:956  48 + uint256(value % 10) */\n      tag_247\n      swap2\n      swap1\n      tag_200\n      jump\t// in\n    tag_247:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":919:958  bytes1(uint8(48 + uint256(value % 10))) */\n      0xf8\n      shl\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":902:908  buffer */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":909:915  digits */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":902:916  buffer[digits] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_248\n      jumpi\n      tag_249\n      tag_250\n      jump\t// in\n    tag_249:\n    tag_248:\n      0x20\n      add\n      add\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":902:958  buffer[digits] = bytes1(uint8(48 + uint256(value % 10))) */\n      swap1\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      swap1\n      dup2\n      0x00\n      byte\n      swap1\n      mstore8\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":981:983  10 */\n      0x0a\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":972:983  value /= 10 */\n      dup6\n      tag_251\n      swap2\n      swap1\n      tag_237\n      jump\t// in\n    tag_251:\n      swap5\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":844:994  while (value != 0) {... */\n      jump(tag_242)\n    tag_243:\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1017:1023  buffer */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":1003:1024  return string(buffer) */\n      swap4\n      pop\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":328:1031  function toString(uint256 value) internal pure returns (string memory) {... */\n    tag_230:\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"ERC721A/ERC721A.sol\":21894:22053  function _beforeTokenTransfers(... */\n    tag_186:\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"ERC721A/ERC721A.sol\":22712:22870  function _afterTokenTransfers(... */\n    tag_191:\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n    tag_202:\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n      and(0xffffffffffffffffffffffffffffffffffffffff, 0x00)\n      dup2\n      mstore\n      0x20\n      add\n      and(0xffffffffffffffff, 0x00)\n      dup2\n      mstore\n      0x20\n      add\n      iszero(iszero(0x00))\n      dup2\n      mstore\n      pop\n      swap1\n      jump\t// out\n        /* \"#utility.yul\":7:82   */\n    tag_254:\n        /* \"#utility.yul\":40:46   */\n      0x00\n        /* \"#utility.yul\":73:75   */\n      0x40\n        /* \"#utility.yul\":67:76   */\n      mload\n        /* \"#utility.yul\":57:76   */\n      swap1\n      pop\n        /* \"#utility.yul\":7:82   */\n      swap1\n      jump\t// out\n        /* \"#utility.yul\":88:205   */\n    tag_255:\n        /* \"#utility.yul\":197:198   */\n      0x00\n        /* \"#utility.yul\":194:195   */\n      dup1\n        /* \"#utility.yul\":187:199   */\n      revert\n        /* \"#utility.yul\":211:328   */\n    tag_256:\n        /* \"#utility.yul\":320:321   */\n      0x00\n        /* \"#utility.yul\":317:318   */\n      dup1\n        /* \"#utility.yul\":310:322   */\n      revert\n        /* \"#utility.yul\":334:483   */\n    tag_257:\n        /* \"#utility.yul\":370:377   */\n      0x00\n        /* \"#utility.yul\":410:476   */\n      0xffffffff00000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":403:408   */\n      dup3\n        /* \"#utility.yul\":399:477   */\n      and\n        /* \"#utility.yul\":388:477   */\n      swap1\n      pop\n        /* \"#utility.yul\":334:483   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":489:609   */\n    tag_258:\n        /* \"#utility.yul\":561:584   */\n      tag_301\n        /* \"#utility.yul\":578:583   */\n      dup2\n        /* \"#utility.yul\":561:584   */\n      tag_257\n      jump\t// in\n    tag_301:\n        /* \"#utility.yul\":554:559   */\n      dup2\n        /* \"#utility.yul\":551:585   */\n      eq\n        /* \"#utility.yul\":541:603   */\n      tag_302\n      jumpi\n        /* \"#utility.yul\":599:600   */\n      0x00\n        /* \"#utility.yul\":596:597   */\n      dup1\n        /* \"#utility.yul\":589:601   */\n      revert\n        /* \"#utility.yul\":541:603   */\n    tag_302:\n        /* \"#utility.yul\":489:609   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":615:752   */\n    tag_259:\n        /* \"#utility.yul\":660:665   */\n      0x00\n        /* \"#utility.yul\":698:704   */\n      dup2\n        /* \"#utility.yul\":685:705   */\n      calldataload\n        /* \"#utility.yul\":676:705   */\n      swap1\n      pop\n        /* \"#utility.yul\":714:746   */\n      tag_304\n        /* \"#utility.yul\":740:745   */\n      dup2\n        /* \"#utility.yul\":714:746   */\n      tag_258\n      jump\t// in\n    tag_304:\n        /* \"#utility.yul\":615:752   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":758:1085   */\n    tag_23:\n        /* \"#utility.yul\":816:822   */\n      0x00\n        /* \"#utility.yul\":865:867   */\n      0x20\n        /* \"#utility.yul\":853:862   */\n      dup3\n        /* \"#utility.yul\":844:851   */\n      dup5\n        /* \"#utility.yul\":840:863   */\n      sub\n        /* \"#utility.yul\":836:868   */\n      slt\n        /* \"#utility.yul\":833:952   */\n      iszero\n      tag_306\n      jumpi\n        /* \"#utility.yul\":871:950   */\n      tag_307\n      tag_255\n      jump\t// in\n    tag_307:\n        /* \"#utility.yul\":833:952   */\n    tag_306:\n        /* \"#utility.yul\":991:992   */\n      0x00\n        /* \"#utility.yul\":1016:1068   */\n      tag_308\n        /* \"#utility.yul\":1060:1067   */\n      dup5\n        /* \"#utility.yul\":1051:1057   */\n      dup3\n        /* \"#utility.yul\":1040:1049   */\n      dup6\n        /* \"#utility.yul\":1036:1058   */\n      add\n        /* \"#utility.yul\":1016:1068   */\n      tag_259\n      jump\t// in\n    tag_308:\n        /* \"#utility.yul\":1006:1068   */\n      swap2\n      pop\n        /* \"#utility.yul\":962:1078   */\n      pop\n        /* \"#utility.yul\":758:1085   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1091:1181   */\n    tag_260:\n        /* \"#utility.yul\":1125:1132   */\n      0x00\n        /* \"#utility.yul\":1168:1173   */\n      dup2\n        /* \"#utility.yul\":1161:1174   */\n      iszero\n        /* \"#utility.yul\":1154:1175   */\n      iszero\n        /* \"#utility.yul\":1143:1175   */\n      swap1\n      pop\n        /* \"#utility.yul\":1091:1181   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1187:1296   */\n    tag_261:\n        /* \"#utility.yul\":1268:1289   */\n      tag_311\n        /* \"#utility.yul\":1283:1288   */\n      dup2\n        /* \"#utility.yul\":1268:1289   */\n      tag_260\n      jump\t// in\n    tag_311:\n        /* \"#utility.yul\":1263:1266   */\n      dup3\n        /* \"#utility.yul\":1256:1290   */\n      mstore\n        /* \"#utility.yul\":1187:1296   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1302:1512   */\n    tag_26:\n        /* \"#utility.yul\":1389:1393   */\n      0x00\n        /* \"#utility.yul\":1427:1429   */\n      0x20\n        /* \"#utility.yul\":1416:1425   */\n      dup3\n        /* \"#utility.yul\":1412:1430   */\n      add\n        /* \"#utility.yul\":1404:1430   */\n      swap1\n      pop\n        /* \"#utility.yul\":1440:1505   */\n      tag_313\n        /* \"#utility.yul\":1502:1503   */\n      0x00\n        /* \"#utility.yul\":1491:1500   */\n      dup4\n        /* \"#utility.yul\":1487:1504   */\n      add\n        /* \"#utility.yul\":1478:1484   */\n      dup5\n        /* \"#utility.yul\":1440:1505   */\n      tag_261\n      jump\t// in\n    tag_313:\n        /* \"#utility.yul\":1302:1512   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1518:1617   */\n    tag_262:\n        /* \"#utility.yul\":1570:1576   */\n      0x00\n        /* \"#utility.yul\":1604:1609   */\n      dup2\n        /* \"#utility.yul\":1598:1610   */\n      mload\n        /* \"#utility.yul\":1588:1610   */\n      swap1\n      pop\n        /* \"#utility.yul\":1518:1617   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1623:1792   */\n    tag_263:\n        /* \"#utility.yul\":1707:1718   */\n      0x00\n        /* \"#utility.yul\":1741:1747   */\n      dup3\n        /* \"#utility.yul\":1736:1739   */\n      dup3\n        /* \"#utility.yul\":1729:1748   */\n      mstore\n        /* \"#utility.yul\":1781:1785   */\n      0x20\n        /* \"#utility.yul\":1776:1779   */\n      dup3\n        /* \"#utility.yul\":1772:1786   */\n      add\n        /* \"#utility.yul\":1757:1786   */\n      swap1\n      pop\n        /* \"#utility.yul\":1623:1792   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1798:2105   */\n    tag_264:\n        /* \"#utility.yul\":1866:1867   */\n      0x00\n        /* \"#utility.yul\":1876:1989   */\n    tag_317:\n        /* \"#utility.yul\":1890:1896   */\n      dup4\n        /* \"#utility.yul\":1887:1888   */\n      dup2\n        /* \"#utility.yul\":1884:1897   */\n      lt\n        /* \"#utility.yul\":1876:1989   */\n      iszero\n      tag_319\n      jumpi\n        /* \"#utility.yul\":1975:1976   */\n      dup1\n        /* \"#utility.yul\":1970:1973   */\n      dup3\n        /* \"#utility.yul\":1966:1977   */\n      add\n        /* \"#utility.yul\":1960:1978   */\n      mload\n        /* \"#utility.yul\":1956:1957   */\n      dup2\n        /* \"#utility.yul\":1951:1954   */\n      dup5\n        /* \"#utility.yul\":1947:1958   */\n      add\n        /* \"#utility.yul\":1940:1979   */\n      mstore\n        /* \"#utility.yul\":1912:1914   */\n      0x20\n        /* \"#utility.yul\":1909:1910   */\n      dup2\n        /* \"#utility.yul\":1905:1915   */\n      add\n        /* \"#utility.yul\":1900:1915   */\n      swap1\n      pop\n        /* \"#utility.yul\":1876:1989   */\n      jump(tag_317)\n    tag_319:\n        /* \"#utility.yul\":2007:2013   */\n      dup4\n        /* \"#utility.yul\":2004:2005   */\n      dup2\n        /* \"#utility.yul\":2001:2014   */\n      gt\n        /* \"#utility.yul\":1998:2099   */\n      iszero\n      tag_320\n      jumpi\n        /* \"#utility.yul\":2087:2088   */\n      0x00\n        /* \"#utility.yul\":2078:2084   */\n      dup5\n        /* \"#utility.yul\":2073:2076   */\n      dup5\n        /* \"#utility.yul\":2069:2085   */\n      add\n        /* \"#utility.yul\":2062:2089   */\n      mstore\n        /* \"#utility.yul\":1998:2099   */\n    tag_320:\n        /* \"#utility.yul\":1847:2105   */\n      pop\n        /* \"#utility.yul\":1798:2105   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2111:2213   */\n    tag_265:\n        /* \"#utility.yul\":2152:2158   */\n      0x00\n        /* \"#utility.yul\":2203:2205   */\n      0x1f\n        /* \"#utility.yul\":2199:2206   */\n      not\n        /* \"#utility.yul\":2194:2196   */\n      0x1f\n        /* \"#utility.yul\":2187:2192   */\n      dup4\n        /* \"#utility.yul\":2183:2197   */\n      add\n        /* \"#utility.yul\":2179:2207   */\n      and\n        /* \"#utility.yul\":2169:2207   */\n      swap1\n      pop\n        /* \"#utility.yul\":2111:2213   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2219:2583   */\n    tag_266:\n        /* \"#utility.yul\":2307:2310   */\n      0x00\n        /* \"#utility.yul\":2335:2374   */\n      tag_323\n        /* \"#utility.yul\":2368:2373   */\n      dup3\n        /* \"#utility.yul\":2335:2374   */\n      tag_262\n      jump\t// in\n    tag_323:\n        /* \"#utility.yul\":2390:2461   */\n      tag_324\n        /* \"#utility.yul\":2454:2460   */\n      dup2\n        /* \"#utility.yul\":2449:2452   */\n      dup6\n        /* \"#utility.yul\":2390:2461   */\n      tag_263\n      jump\t// in\n    tag_324:\n        /* \"#utility.yul\":2383:2461   */\n      swap4\n      pop\n        /* \"#utility.yul\":2470:2522   */\n      tag_325\n        /* \"#utility.yul\":2515:2521   */\n      dup2\n        /* \"#utility.yul\":2510:2513   */\n      dup6\n        /* \"#utility.yul\":2503:2507   */\n      0x20\n        /* \"#utility.yul\":2496:2501   */\n      dup7\n        /* \"#utility.yul\":2492:2508   */\n      add\n        /* \"#utility.yul\":2470:2522   */\n      tag_264\n      jump\t// in\n    tag_325:\n        /* \"#utility.yul\":2547:2576   */\n      tag_326\n        /* \"#utility.yul\":2569:2575   */\n      dup2\n        /* \"#utility.yul\":2547:2576   */\n      tag_265\n      jump\t// in\n    tag_326:\n        /* \"#utility.yul\":2542:2545   */\n      dup5\n        /* \"#utility.yul\":2538:2577   */\n      add\n        /* \"#utility.yul\":2531:2577   */\n      swap2\n      pop\n        /* \"#utility.yul\":2311:2583   */\n      pop\n        /* \"#utility.yul\":2219:2583   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2589:2902   */\n    tag_30:\n        /* \"#utility.yul\":2702:2706   */\n      0x00\n        /* \"#utility.yul\":2740:2742   */\n      0x20\n        /* \"#utility.yul\":2729:2738   */\n      dup3\n        /* \"#utility.yul\":2725:2743   */\n      add\n        /* \"#utility.yul\":2717:2743   */\n      swap1\n      pop\n        /* \"#utility.yul\":2789:2798   */\n      dup2\n        /* \"#utility.yul\":2783:2787   */\n      dup2\n        /* \"#utility.yul\":2779:2799   */\n      sub\n        /* \"#utility.yul\":2775:2776   */\n      0x00\n        /* \"#utility.yul\":2764:2773   */\n      dup4\n        /* \"#utility.yul\":2760:2777   */\n      add\n        /* \"#utility.yul\":2753:2800   */\n      mstore\n        /* \"#utility.yul\":2817:2895   */\n      tag_328\n        /* \"#utility.yul\":2890:2894   */\n      dup2\n        /* \"#utility.yul\":2881:2887   */\n      dup5\n        /* \"#utility.yul\":2817:2895   */\n      tag_266\n      jump\t// in\n    tag_328:\n        /* \"#utility.yul\":2809:2895   */\n      swap1\n      pop\n        /* \"#utility.yul\":2589:2902   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2908:2985   */\n    tag_267:\n        /* \"#utility.yul\":2945:2952   */\n      0x00\n        /* \"#utility.yul\":2974:2979   */\n      dup2\n        /* \"#utility.yul\":2963:2979   */\n      swap1\n      pop\n        /* \"#utility.yul\":2908:2985   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2991:3113   */\n    tag_268:\n        /* \"#utility.yul\":3064:3088   */\n      tag_331\n        /* \"#utility.yul\":3082:3087   */\n      dup2\n        /* \"#utility.yul\":3064:3088   */\n      tag_267\n      jump\t// in\n    tag_331:\n        /* \"#utility.yul\":3057:3062   */\n      dup2\n        /* \"#utility.yul\":3054:3089   */\n      eq\n        /* \"#utility.yul\":3044:3107   */\n      tag_332\n      jumpi\n        /* \"#utility.yul\":3103:3104   */\n      0x00\n        /* \"#utility.yul\":3100:3101   */\n      dup1\n        /* \"#utility.yul\":3093:3105   */\n      revert\n        /* \"#utility.yul\":3044:3107   */\n    tag_332:\n        /* \"#utility.yul\":2991:3113   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3119:3258   */\n    tag_269:\n        /* \"#utility.yul\":3165:3170   */\n      0x00\n        /* \"#utility.yul\":3203:3209   */\n      dup2\n        /* \"#utility.yul\":3190:3210   */\n      calldataload\n        /* \"#utility.yul\":3181:3210   */\n      swap1\n      pop\n        /* \"#utility.yul\":3219:3252   */\n      tag_334\n        /* \"#utility.yul\":3246:3251   */\n      dup2\n        /* \"#utility.yul\":3219:3252   */\n      tag_268\n      jump\t// in\n    tag_334:\n        /* \"#utility.yul\":3119:3258   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3264:3593   */\n    tag_33:\n        /* \"#utility.yul\":3323:3329   */\n      0x00\n        /* \"#utility.yul\":3372:3374   */\n      0x20\n        /* \"#utility.yul\":3360:3369   */\n      dup3\n        /* \"#utility.yul\":3351:3358   */\n      dup5\n        /* \"#utility.yul\":3347:3370   */\n      sub\n        /* \"#utility.yul\":3343:3375   */\n      slt\n        /* \"#utility.yul\":3340:3459   */\n      iszero\n      tag_336\n      jumpi\n        /* \"#utility.yul\":3378:3457   */\n      tag_337\n      tag_255\n      jump\t// in\n    tag_337:\n        /* \"#utility.yul\":3340:3459   */\n    tag_336:\n        /* \"#utility.yul\":3498:3499   */\n      0x00\n        /* \"#utility.yul\":3523:3576   */\n      tag_338\n        /* \"#utility.yul\":3568:3575   */\n      dup5\n        /* \"#utility.yul\":3559:3565   */\n      dup3\n        /* \"#utility.yul\":3548:3557   */\n      dup6\n        /* \"#utility.yul\":3544:3566   */\n      add\n        /* \"#utility.yul\":3523:3576   */\n      tag_269\n      jump\t// in\n    tag_338:\n        /* \"#utility.yul\":3513:3576   */\n      swap2\n      pop\n        /* \"#utility.yul\":3469:3586   */\n      pop\n        /* \"#utility.yul\":3264:3593   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3599:3725   */\n    tag_270:\n        /* \"#utility.yul\":3636:3643   */\n      0x00\n        /* \"#utility.yul\":3676:3718   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":3669:3674   */\n      dup3\n        /* \"#utility.yul\":3665:3719   */\n      and\n        /* \"#utility.yul\":3654:3719   */\n      swap1\n      pop\n        /* \"#utility.yul\":3599:3725   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3731:3827   */\n    tag_271:\n        /* \"#utility.yul\":3768:3775   */\n      0x00\n        /* \"#utility.yul\":3797:3821   */\n      tag_341\n        /* \"#utility.yul\":3815:3820   */\n      dup3\n        /* \"#utility.yul\":3797:3821   */\n      tag_270\n      jump\t// in\n    tag_341:\n        /* \"#utility.yul\":3786:3821   */\n      swap1\n      pop\n        /* \"#utility.yul\":3731:3827   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3833:3951   */\n    tag_272:\n        /* \"#utility.yul\":3920:3944   */\n      tag_343\n        /* \"#utility.yul\":3938:3943   */\n      dup2\n        /* \"#utility.yul\":3920:3944   */\n      tag_271\n      jump\t// in\n    tag_343:\n        /* \"#utility.yul\":3915:3918   */\n      dup3\n        /* \"#utility.yul\":3908:3945   */\n      mstore\n        /* \"#utility.yul\":3833:3951   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3957:4179   */\n    tag_36:\n        /* \"#utility.yul\":4050:4054   */\n      0x00\n        /* \"#utility.yul\":4088:4090   */\n      0x20\n        /* \"#utility.yul\":4077:4086   */\n      dup3\n        /* \"#utility.yul\":4073:4091   */\n      add\n        /* \"#utility.yul\":4065:4091   */\n      swap1\n      pop\n        /* \"#utility.yul\":4101:4172   */\n      tag_345\n        /* \"#utility.yul\":4169:4170   */\n      0x00\n        /* \"#utility.yul\":4158:4167   */\n      dup4\n        /* \"#utility.yul\":4154:4171   */\n      add\n        /* \"#utility.yul\":4145:4151   */\n      dup5\n        /* \"#utility.yul\":4101:4172   */\n      tag_272\n      jump\t// in\n    tag_345:\n        /* \"#utility.yul\":3957:4179   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4185:4307   */\n    tag_273:\n        /* \"#utility.yul\":4258:4282   */\n      tag_347\n        /* \"#utility.yul\":4276:4281   */\n      dup2\n        /* \"#utility.yul\":4258:4282   */\n      tag_271\n      jump\t// in\n    tag_347:\n        /* \"#utility.yul\":4251:4256   */\n      dup2\n        /* \"#utility.yul\":4248:4283   */\n      eq\n        /* \"#utility.yul\":4238:4301   */\n      tag_348\n      jumpi\n        /* \"#utility.yul\":4297:4298   */\n      0x00\n        /* \"#utility.yul\":4294:4295   */\n      dup1\n        /* \"#utility.yul\":4287:4299   */\n      revert\n        /* \"#utility.yul\":4238:4301   */\n    tag_348:\n        /* \"#utility.yul\":4185:4307   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4313:4452   */\n    tag_274:\n        /* \"#utility.yul\":4359:4364   */\n      0x00\n        /* \"#utility.yul\":4397:4403   */\n      dup2\n        /* \"#utility.yul\":4384:4404   */\n      calldataload\n        /* \"#utility.yul\":4375:4404   */\n      swap1\n      pop\n        /* \"#utility.yul\":4413:4446   */\n      tag_350\n        /* \"#utility.yul\":4440:4445   */\n      dup2\n        /* \"#utility.yul\":4413:4446   */\n      tag_273\n      jump\t// in\n    tag_350:\n        /* \"#utility.yul\":4313:4452   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4458:4932   */\n    tag_39:\n        /* \"#utility.yul\":4526:4532   */\n      0x00\n        /* \"#utility.yul\":4534:4540   */\n      dup1\n        /* \"#utility.yul\":4583:4585   */\n      0x40\n        /* \"#utility.yul\":4571:4580   */\n      dup4\n        /* \"#utility.yul\":4562:4569   */\n      dup6\n        /* \"#utility.yul\":4558:4581   */\n      sub\n        /* \"#utility.yul\":4554:4586   */\n      slt\n        /* \"#utility.yul\":4551:4670   */\n      iszero\n      tag_352\n      jumpi\n        /* \"#utility.yul\":4589:4668   */\n      tag_353\n      tag_255\n      jump\t// in\n    tag_353:\n        /* \"#utility.yul\":4551:4670   */\n    tag_352:\n        /* \"#utility.yul\":4709:4710   */\n      0x00\n        /* \"#utility.yul\":4734:4787   */\n      tag_354\n        /* \"#utility.yul\":4779:4786   */\n      dup6\n        /* \"#utility.yul\":4770:4776   */\n      dup3\n        /* \"#utility.yul\":4759:4768   */\n      dup7\n        /* \"#utility.yul\":4755:4777   */\n      add\n        /* \"#utility.yul\":4734:4787   */\n      tag_274\n      jump\t// in\n    tag_354:\n        /* \"#utility.yul\":4724:4787   */\n      swap3\n      pop\n        /* \"#utility.yul\":4680:4797   */\n      pop\n        /* \"#utility.yul\":4836:4838   */\n      0x20\n        /* \"#utility.yul\":4862:4915   */\n      tag_355\n        /* \"#utility.yul\":4907:4914   */\n      dup6\n        /* \"#utility.yul\":4898:4904   */\n      dup3\n        /* \"#utility.yul\":4887:4896   */\n      dup7\n        /* \"#utility.yul\":4883:4905   */\n      add\n        /* \"#utility.yul\":4862:4915   */\n      tag_269\n      jump\t// in\n    tag_355:\n        /* \"#utility.yul\":4852:4915   */\n      swap2\n      pop\n        /* \"#utility.yul\":4807:4925   */\n      pop\n        /* \"#utility.yul\":4458:4932   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4938:5056   */\n    tag_275:\n        /* \"#utility.yul\":5025:5049   */\n      tag_357\n        /* \"#utility.yul\":5043:5048   */\n      dup2\n        /* \"#utility.yul\":5025:5049   */\n      tag_267\n      jump\t// in\n    tag_357:\n        /* \"#utility.yul\":5020:5023   */\n      dup3\n        /* \"#utility.yul\":5013:5050   */\n      mstore\n        /* \"#utility.yul\":4938:5056   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5062:5284   */\n    tag_44:\n        /* \"#utility.yul\":5155:5159   */\n      0x00\n        /* \"#utility.yul\":5193:5195   */\n      0x20\n        /* \"#utility.yul\":5182:5191   */\n      dup3\n        /* \"#utility.yul\":5178:5196   */\n      add\n        /* \"#utility.yul\":5170:5196   */\n      swap1\n      pop\n        /* \"#utility.yul\":5206:5277   */\n      tag_359\n        /* \"#utility.yul\":5274:5275   */\n      0x00\n        /* \"#utility.yul\":5263:5272   */\n      dup4\n        /* \"#utility.yul\":5259:5276   */\n      add\n        /* \"#utility.yul\":5250:5256   */\n      dup5\n        /* \"#utility.yul\":5206:5277   */\n      tag_275\n      jump\t// in\n    tag_359:\n        /* \"#utility.yul\":5062:5284   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5290:5909   */\n    tag_47:\n        /* \"#utility.yul\":5367:5373   */\n      0x00\n        /* \"#utility.yul\":5375:5381   */\n      dup1\n        /* \"#utility.yul\":5383:5389   */\n      0x00\n        /* \"#utility.yul\":5432:5434   */\n      0x60\n        /* \"#utility.yul\":5420:5429   */\n      dup5\n        /* \"#utility.yul\":5411:5418   */\n      dup7\n        /* \"#utility.yul\":5407:5430   */\n      sub\n        /* \"#utility.yul\":5403:5435   */\n      slt\n        /* \"#utility.yul\":5400:5519   */\n      iszero\n      tag_361\n      jumpi\n        /* \"#utility.yul\":5438:5517   */\n      tag_362\n      tag_255\n      jump\t// in\n    tag_362:\n        /* \"#utility.yul\":5400:5519   */\n    tag_361:\n        /* \"#utility.yul\":5558:5559   */\n      0x00\n        /* \"#utility.yul\":5583:5636   */\n      tag_363\n        /* \"#utility.yul\":5628:5635   */\n      dup7\n        /* \"#utility.yul\":5619:5625   */\n      dup3\n        /* \"#utility.yul\":5608:5617   */\n      dup8\n        /* \"#utility.yul\":5604:5626   */\n      add\n        /* \"#utility.yul\":5583:5636   */\n      tag_274\n      jump\t// in\n    tag_363:\n        /* \"#utility.yul\":5573:5636   */\n      swap4\n      pop\n        /* \"#utility.yul\":5529:5646   */\n      pop\n        /* \"#utility.yul\":5685:5687   */\n      0x20\n        /* \"#utility.yul\":5711:5764   */\n      tag_364\n        /* \"#utility.yul\":5756:5763   */\n      dup7\n        /* \"#utility.yul\":5747:5753   */\n      dup3\n        /* \"#utility.yul\":5736:5745   */\n      dup8\n        /* \"#utility.yul\":5732:5754   */\n      add\n        /* \"#utility.yul\":5711:5764   */\n      tag_274\n      jump\t// in\n    tag_364:\n        /* \"#utility.yul\":5701:5764   */\n      swap3\n      pop\n        /* \"#utility.yul\":5656:5774   */\n      pop\n        /* \"#utility.yul\":5813:5815   */\n      0x40\n        /* \"#utility.yul\":5839:5892   */\n      tag_365\n        /* \"#utility.yul\":5884:5891   */\n      dup7\n        /* \"#utility.yul\":5875:5881   */\n      dup3\n        /* \"#utility.yul\":5864:5873   */\n      dup8\n        /* \"#utility.yul\":5860:5882   */\n      add\n        /* \"#utility.yul\":5839:5892   */\n      tag_269\n      jump\t// in\n    tag_365:\n        /* \"#utility.yul\":5829:5892   */\n      swap2\n      pop\n        /* \"#utility.yul\":5784:5902   */\n      pop\n        /* \"#utility.yul\":5290:5909   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":5915:6244   */\n    tag_51:\n        /* \"#utility.yul\":5974:5980   */\n      0x00\n        /* \"#utility.yul\":6023:6025   */\n      0x20\n        /* \"#utility.yul\":6011:6020   */\n      dup3\n        /* \"#utility.yul\":6002:6009   */\n      dup5\n        /* \"#utility.yul\":5998:6021   */\n      sub\n        /* \"#utility.yul\":5994:6026   */\n      slt\n        /* \"#utility.yul\":5991:6110   */\n      iszero\n      tag_367\n      jumpi\n        /* \"#utility.yul\":6029:6108   */\n      tag_368\n      tag_255\n      jump\t// in\n    tag_368:\n        /* \"#utility.yul\":5991:6110   */\n    tag_367:\n        /* \"#utility.yul\":6149:6150   */\n      0x00\n        /* \"#utility.yul\":6174:6227   */\n      tag_369\n        /* \"#utility.yul\":6219:6226   */\n      dup5\n        /* \"#utility.yul\":6210:6216   */\n      dup3\n        /* \"#utility.yul\":6199:6208   */\n      dup6\n        /* \"#utility.yul\":6195:6217   */\n      add\n        /* \"#utility.yul\":6174:6227   */\n      tag_274\n      jump\t// in\n    tag_369:\n        /* \"#utility.yul\":6164:6227   */\n      swap2\n      pop\n        /* \"#utility.yul\":6120:6237   */\n      pop\n        /* \"#utility.yul\":5915:6244   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6250:6366   */\n    tag_276:\n        /* \"#utility.yul\":6320:6341   */\n      tag_371\n        /* \"#utility.yul\":6335:6340   */\n      dup2\n        /* \"#utility.yul\":6320:6341   */\n      tag_260\n      jump\t// in\n    tag_371:\n        /* \"#utility.yul\":6313:6318   */\n      dup2\n        /* \"#utility.yul\":6310:6342   */\n      eq\n        /* \"#utility.yul\":6300:6360   */\n      tag_372\n      jumpi\n        /* \"#utility.yul\":6356:6357   */\n      0x00\n        /* \"#utility.yul\":6353:6354   */\n      dup1\n        /* \"#utility.yul\":6346:6358   */\n      revert\n        /* \"#utility.yul\":6300:6360   */\n    tag_372:\n        /* \"#utility.yul\":6250:6366   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6372:6505   */\n    tag_277:\n        /* \"#utility.yul\":6415:6420   */\n      0x00\n        /* \"#utility.yul\":6453:6459   */\n      dup2\n        /* \"#utility.yul\":6440:6460   */\n      calldataload\n        /* \"#utility.yul\":6431:6460   */\n      swap1\n      pop\n        /* \"#utility.yul\":6469:6499   */\n      tag_374\n        /* \"#utility.yul\":6493:6498   */\n      dup2\n        /* \"#utility.yul\":6469:6499   */\n      tag_276\n      jump\t// in\n    tag_374:\n        /* \"#utility.yul\":6372:6505   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6511:6979   */\n    tag_70:\n        /* \"#utility.yul\":6576:6582   */\n      0x00\n        /* \"#utility.yul\":6584:6590   */\n      dup1\n        /* \"#utility.yul\":6633:6635   */\n      0x40\n        /* \"#utility.yul\":6621:6630   */\n      dup4\n        /* \"#utility.yul\":6612:6619   */\n      dup6\n        /* \"#utility.yul\":6608:6631   */\n      sub\n        /* \"#utility.yul\":6604:6636   */\n      slt\n        /* \"#utility.yul\":6601:6720   */\n      iszero\n      tag_376\n      jumpi\n        /* \"#utility.yul\":6639:6718   */\n      tag_377\n      tag_255\n      jump\t// in\n    tag_377:\n        /* \"#utility.yul\":6601:6720   */\n    tag_376:\n        /* \"#utility.yul\":6759:6760   */\n      0x00\n        /* \"#utility.yul\":6784:6837   */\n      tag_378\n        /* \"#utility.yul\":6829:6836   */\n      dup6\n        /* \"#utility.yul\":6820:6826   */\n      dup3\n        /* \"#utility.yul\":6809:6818   */\n      dup7\n        /* \"#utility.yul\":6805:6827   */\n      add\n        /* \"#utility.yul\":6784:6837   */\n      tag_274\n      jump\t// in\n    tag_378:\n        /* \"#utility.yul\":6774:6837   */\n      swap3\n      pop\n        /* \"#utility.yul\":6730:6847   */\n      pop\n        /* \"#utility.yul\":6886:6888   */\n      0x20\n        /* \"#utility.yul\":6912:6962   */\n      tag_379\n        /* \"#utility.yul\":6954:6961   */\n      dup6\n        /* \"#utility.yul\":6945:6951   */\n      dup3\n        /* \"#utility.yul\":6934:6943   */\n      dup7\n        /* \"#utility.yul\":6930:6952   */\n      add\n        /* \"#utility.yul\":6912:6962   */\n      tag_277\n      jump\t// in\n    tag_379:\n        /* \"#utility.yul\":6902:6962   */\n      swap2\n      pop\n        /* \"#utility.yul\":6857:6972   */\n      pop\n        /* \"#utility.yul\":6511:6979   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6985:7102   */\n    tag_278:\n        /* \"#utility.yul\":7094:7095   */\n      0x00\n        /* \"#utility.yul\":7091:7092   */\n      dup1\n        /* \"#utility.yul\":7084:7096   */\n      revert\n        /* \"#utility.yul\":7108:7225   */\n    tag_279:\n        /* \"#utility.yul\":7217:7218   */\n      0x00\n        /* \"#utility.yul\":7214:7215   */\n      dup1\n        /* \"#utility.yul\":7207:7219   */\n      revert\n        /* \"#utility.yul\":7231:7411   */\n    tag_240:\n        /* \"#utility.yul\":7279:7356   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":7276:7277   */\n      0x00\n        /* \"#utility.yul\":7269:7357   */\n      mstore\n        /* \"#utility.yul\":7376:7380   */\n      0x41\n        /* \"#utility.yul\":7373:7374   */\n      0x04\n        /* \"#utility.yul\":7366:7381   */\n      mstore\n        /* \"#utility.yul\":7400:7404   */\n      0x24\n        /* \"#utility.yul\":7397:7398   */\n      0x00\n        /* \"#utility.yul\":7390:7405   */\n      revert\n        /* \"#utility.yul\":7417:7698   */\n    tag_280:\n        /* \"#utility.yul\":7500:7527   */\n      tag_384\n        /* \"#utility.yul\":7522:7526   */\n      dup3\n        /* \"#utility.yul\":7500:7527   */\n      tag_265\n      jump\t// in\n    tag_384:\n        /* \"#utility.yul\":7492:7498   */\n      dup2\n        /* \"#utility.yul\":7488:7528   */\n      add\n        /* \"#utility.yul\":7630:7636   */\n      dup2\n        /* \"#utility.yul\":7618:7628   */\n      dup2\n        /* \"#utility.yul\":7615:7637   */\n      lt\n        /* \"#utility.yul\":7594:7612   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":7582:7592   */\n      dup3\n        /* \"#utility.yul\":7579:7613   */\n      gt\n        /* \"#utility.yul\":7576:7638   */\n      or\n        /* \"#utility.yul\":7573:7661   */\n      iszero\n      tag_385\n      jumpi\n        /* \"#utility.yul\":7641:7659   */\n      tag_386\n      tag_240\n      jump\t// in\n    tag_386:\n        /* \"#utility.yul\":7573:7661   */\n    tag_385:\n        /* \"#utility.yul\":7681:7691   */\n      dup1\n        /* \"#utility.yul\":7677:7679   */\n      0x40\n        /* \"#utility.yul\":7670:7692   */\n      mstore\n        /* \"#utility.yul\":7460:7698   */\n      pop\n        /* \"#utility.yul\":7417:7698   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7704:7833   */\n    tag_281:\n        /* \"#utility.yul\":7738:7744   */\n      0x00\n        /* \"#utility.yul\":7765:7785   */\n      tag_388\n      tag_254\n      jump\t// in\n    tag_388:\n        /* \"#utility.yul\":7755:7785   */\n      swap1\n      pop\n        /* \"#utility.yul\":7794:7827   */\n      tag_389\n        /* \"#utility.yul\":7822:7826   */\n      dup3\n        /* \"#utility.yul\":7814:7820   */\n      dup3\n        /* \"#utility.yul\":7794:7827   */\n      tag_280\n      jump\t// in\n    tag_389:\n        /* \"#utility.yul\":7704:7833   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7839:8146   */\n    tag_282:\n        /* \"#utility.yul\":7900:7904   */\n      0x00\n        /* \"#utility.yul\":7990:8008   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":7982:7988   */\n      dup3\n        /* \"#utility.yul\":7979:8009   */\n      gt\n        /* \"#utility.yul\":7976:8032   */\n      iszero\n      tag_391\n      jumpi\n        /* \"#utility.yul\":8012:8030   */\n      tag_392\n      tag_240\n      jump\t// in\n    tag_392:\n        /* \"#utility.yul\":7976:8032   */\n    tag_391:\n        /* \"#utility.yul\":8050:8079   */\n      tag_393\n        /* \"#utility.yul\":8072:8078   */\n      dup3\n        /* \"#utility.yul\":8050:8079   */\n      tag_265\n      jump\t// in\n    tag_393:\n        /* \"#utility.yul\":8042:8079   */\n      swap1\n      pop\n        /* \"#utility.yul\":8134:8138   */\n      0x20\n        /* \"#utility.yul\":8128:8132   */\n      dup2\n        /* \"#utility.yul\":8124:8139   */\n      add\n        /* \"#utility.yul\":8116:8139   */\n      swap1\n      pop\n        /* \"#utility.yul\":7839:8146   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8152:8306   */\n    tag_283:\n        /* \"#utility.yul\":8236:8242   */\n      dup3\n        /* \"#utility.yul\":8231:8234   */\n      dup2\n        /* \"#utility.yul\":8226:8229   */\n      dup4\n        /* \"#utility.yul\":8213:8243   */\n      calldatacopy\n        /* \"#utility.yul\":8298:8299   */\n      0x00\n        /* \"#utility.yul\":8289:8295   */\n      dup4\n        /* \"#utility.yul\":8284:8287   */\n      dup4\n        /* \"#utility.yul\":8280:8296   */\n      add\n        /* \"#utility.yul\":8273:8300   */\n      mstore\n        /* \"#utility.yul\":8152:8306   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8312:8722   */\n    tag_284:\n        /* \"#utility.yul\":8389:8394   */\n      0x00\n        /* \"#utility.yul\":8414:8479   */\n      tag_396\n        /* \"#utility.yul\":8430:8478   */\n      tag_397\n        /* \"#utility.yul\":8471:8477   */\n      dup5\n        /* \"#utility.yul\":8430:8478   */\n      tag_282\n      jump\t// in\n    tag_397:\n        /* \"#utility.yul\":8414:8479   */\n      tag_281\n      jump\t// in\n    tag_396:\n        /* \"#utility.yul\":8405:8479   */\n      swap1\n      pop\n        /* \"#utility.yul\":8502:8508   */\n      dup3\n        /* \"#utility.yul\":8495:8500   */\n      dup2\n        /* \"#utility.yul\":8488:8509   */\n      mstore\n        /* \"#utility.yul\":8540:8544   */\n      0x20\n        /* \"#utility.yul\":8533:8538   */\n      dup2\n        /* \"#utility.yul\":8529:8545   */\n      add\n        /* \"#utility.yul\":8578:8581   */\n      dup5\n        /* \"#utility.yul\":8569:8575   */\n      dup5\n        /* \"#utility.yul\":8564:8567   */\n      dup5\n        /* \"#utility.yul\":8560:8576   */\n      add\n        /* \"#utility.yul\":8557:8582   */\n      gt\n        /* \"#utility.yul\":8554:8666   */\n      iszero\n      tag_398\n      jumpi\n        /* \"#utility.yul\":8585:8664   */\n      tag_399\n      tag_279\n      jump\t// in\n    tag_399:\n        /* \"#utility.yul\":8554:8666   */\n    tag_398:\n        /* \"#utility.yul\":8675:8716   */\n      tag_400\n        /* \"#utility.yul\":8709:8715   */\n      dup5\n        /* \"#utility.yul\":8704:8707   */\n      dup3\n        /* \"#utility.yul\":8699:8702   */\n      dup6\n        /* \"#utility.yul\":8675:8716   */\n      tag_283\n      jump\t// in\n    tag_400:\n        /* \"#utility.yul\":8395:8722   */\n      pop\n        /* \"#utility.yul\":8312:8722   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8741:9079   */\n    tag_285:\n        /* \"#utility.yul\":8796:8801   */\n      0x00\n        /* \"#utility.yul\":8845:8848   */\n      dup3\n        /* \"#utility.yul\":8838:8842   */\n      0x1f\n        /* \"#utility.yul\":8830:8836   */\n      dup4\n        /* \"#utility.yul\":8826:8843   */\n      add\n        /* \"#utility.yul\":8822:8849   */\n      slt\n        /* \"#utility.yul\":8812:8934   */\n      tag_402\n      jumpi\n        /* \"#utility.yul\":8853:8932   */\n      tag_403\n      tag_278\n      jump\t// in\n    tag_403:\n        /* \"#utility.yul\":8812:8934   */\n    tag_402:\n        /* \"#utility.yul\":8970:8976   */\n      dup2\n        /* \"#utility.yul\":8957:8977   */\n      calldataload\n        /* \"#utility.yul\":8995:9073   */\n      tag_404\n        /* \"#utility.yul\":9069:9072   */\n      dup5\n        /* \"#utility.yul\":9061:9067   */\n      dup3\n        /* \"#utility.yul\":9054:9058   */\n      0x20\n        /* \"#utility.yul\":9046:9052   */\n      dup7\n        /* \"#utility.yul\":9042:9059   */\n      add\n        /* \"#utility.yul\":8995:9073   */\n      tag_284\n      jump\t// in\n    tag_404:\n        /* \"#utility.yul\":8986:9073   */\n      swap2\n      pop\n        /* \"#utility.yul\":8802:9079   */\n      pop\n        /* \"#utility.yul\":8741:9079   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9085:10028   */\n    tag_74:\n        /* \"#utility.yul\":9180:9186   */\n      0x00\n        /* \"#utility.yul\":9188:9194   */\n      dup1\n        /* \"#utility.yul\":9196:9202   */\n      0x00\n        /* \"#utility.yul\":9204:9210   */\n      dup1\n        /* \"#utility.yul\":9253:9256   */\n      0x80\n        /* \"#utility.yul\":9241:9250   */\n      dup6\n        /* \"#utility.yul\":9232:9239   */\n      dup8\n        /* \"#utility.yul\":9228:9251   */\n      sub\n        /* \"#utility.yul\":9224:9257   */\n      slt\n        /* \"#utility.yul\":9221:9341   */\n      iszero\n      tag_406\n      jumpi\n        /* \"#utility.yul\":9260:9339   */\n      tag_407\n      tag_255\n      jump\t// in\n    tag_407:\n        /* \"#utility.yul\":9221:9341   */\n    tag_406:\n        /* \"#utility.yul\":9380:9381   */\n      0x00\n        /* \"#utility.yul\":9405:9458   */\n      tag_408\n        /* \"#utility.yul\":9450:9457   */\n      dup8\n        /* \"#utility.yul\":9441:9447   */\n      dup3\n        /* \"#utility.yul\":9430:9439   */\n      dup9\n        /* \"#utility.yul\":9426:9448   */\n      add\n        /* \"#utility.yul\":9405:9458   */\n      tag_274\n      jump\t// in\n    tag_408:\n        /* \"#utility.yul\":9395:9458   */\n      swap5\n      pop\n        /* \"#utility.yul\":9351:9468   */\n      pop\n        /* \"#utility.yul\":9507:9509   */\n      0x20\n        /* \"#utility.yul\":9533:9586   */\n      tag_409\n        /* \"#utility.yul\":9578:9585   */\n      dup8\n        /* \"#utility.yul\":9569:9575   */\n      dup3\n        /* \"#utility.yul\":9558:9567   */\n      dup9\n        /* \"#utility.yul\":9554:9576   */\n      add\n        /* \"#utility.yul\":9533:9586   */\n      tag_274\n      jump\t// in\n    tag_409:\n        /* \"#utility.yul\":9523:9586   */\n      swap4\n      pop\n        /* \"#utility.yul\":9478:9596   */\n      pop\n        /* \"#utility.yul\":9635:9637   */\n      0x40\n        /* \"#utility.yul\":9661:9714   */\n      tag_410\n        /* \"#utility.yul\":9706:9713   */\n      dup8\n        /* \"#utility.yul\":9697:9703   */\n      dup3\n        /* \"#utility.yul\":9686:9695   */\n      dup9\n        /* \"#utility.yul\":9682:9704   */\n      add\n        /* \"#utility.yul\":9661:9714   */\n      tag_269\n      jump\t// in\n    tag_410:\n        /* \"#utility.yul\":9651:9714   */\n      swap3\n      pop\n        /* \"#utility.yul\":9606:9724   */\n      pop\n        /* \"#utility.yul\":9791:9793   */\n      0x60\n        /* \"#utility.yul\":9780:9789   */\n      dup6\n        /* \"#utility.yul\":9776:9794   */\n      add\n        /* \"#utility.yul\":9763:9795   */\n      calldataload\n        /* \"#utility.yul\":9822:9840   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":9814:9820   */\n      dup2\n        /* \"#utility.yul\":9811:9841   */\n      gt\n        /* \"#utility.yul\":9808:9925   */\n      iszero\n      tag_411\n      jumpi\n        /* \"#utility.yul\":9844:9923   */\n      tag_412\n      tag_256\n      jump\t// in\n    tag_412:\n        /* \"#utility.yul\":9808:9925   */\n    tag_411:\n        /* \"#utility.yul\":9949:10011   */\n      tag_413\n        /* \"#utility.yul\":10003:10010   */\n      dup8\n        /* \"#utility.yul\":9994:10000   */\n      dup3\n        /* \"#utility.yul\":9983:9992   */\n      dup9\n        /* \"#utility.yul\":9979:10001   */\n      add\n        /* \"#utility.yul\":9949:10011   */\n      tag_285\n      jump\t// in\n    tag_413:\n        /* \"#utility.yul\":9939:10011   */\n      swap2\n      pop\n        /* \"#utility.yul\":9734:10021   */\n      pop\n        /* \"#utility.yul\":9085:10028   */\n      swap3\n      swap6\n      swap2\n      swap5\n      pop\n      swap3\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10034:10508   */\n    tag_82:\n        /* \"#utility.yul\":10102:10108   */\n      0x00\n        /* \"#utility.yul\":10110:10116   */\n      dup1\n        /* \"#utility.yul\":10159:10161   */\n      0x40\n        /* \"#utility.yul\":10147:10156   */\n      dup4\n        /* \"#utility.yul\":10138:10145   */\n      dup6\n        /* \"#utility.yul\":10134:10157   */\n      sub\n        /* \"#utility.yul\":10130:10162   */\n      slt\n        /* \"#utility.yul\":10127:10246   */\n      iszero\n      tag_415\n      jumpi\n        /* \"#utility.yul\":10165:10244   */\n      tag_416\n      tag_255\n      jump\t// in\n    tag_416:\n        /* \"#utility.yul\":10127:10246   */\n    tag_415:\n        /* \"#utility.yul\":10285:10286   */\n      0x00\n        /* \"#utility.yul\":10310:10363   */\n      tag_417\n        /* \"#utility.yul\":10355:10362   */\n      dup6\n        /* \"#utility.yul\":10346:10352   */\n      dup3\n        /* \"#utility.yul\":10335:10344   */\n      dup7\n        /* \"#utility.yul\":10331:10353   */\n      add\n        /* \"#utility.yul\":10310:10363   */\n      tag_274\n      jump\t// in\n    tag_417:\n        /* \"#utility.yul\":10300:10363   */\n      swap3\n      pop\n        /* \"#utility.yul\":10256:10373   */\n      pop\n        /* \"#utility.yul\":10412:10414   */\n      0x20\n        /* \"#utility.yul\":10438:10491   */\n      tag_418\n        /* \"#utility.yul\":10483:10490   */\n      dup6\n        /* \"#utility.yul\":10474:10480   */\n      dup3\n        /* \"#utility.yul\":10463:10472   */\n      dup7\n        /* \"#utility.yul\":10459:10481   */\n      add\n        /* \"#utility.yul\":10438:10491   */\n      tag_274\n      jump\t// in\n    tag_418:\n        /* \"#utility.yul\":10428:10491   */\n      swap2\n      pop\n        /* \"#utility.yul\":10383:10501   */\n      pop\n        /* \"#utility.yul\":10034:10508   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10514:10694   */\n    tag_286:\n        /* \"#utility.yul\":10562:10639   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":10559:10560   */\n      0x00\n        /* \"#utility.yul\":10552:10640   */\n      mstore\n        /* \"#utility.yul\":10659:10663   */\n      0x22\n        /* \"#utility.yul\":10656:10657   */\n      0x04\n        /* \"#utility.yul\":10649:10664   */\n      mstore\n        /* \"#utility.yul\":10683:10687   */\n      0x24\n        /* \"#utility.yul\":10680:10681   */\n      0x00\n        /* \"#utility.yul\":10673:10688   */\n      revert\n        /* \"#utility.yul\":10700:11020   */\n    tag_92:\n        /* \"#utility.yul\":10744:10750   */\n      0x00\n        /* \"#utility.yul\":10781:10782   */\n      0x02\n        /* \"#utility.yul\":10775:10779   */\n      dup3\n        /* \"#utility.yul\":10771:10783   */\n      div\n        /* \"#utility.yul\":10761:10783   */\n      swap1\n      pop\n        /* \"#utility.yul\":10828:10829   */\n      0x01\n        /* \"#utility.yul\":10822:10826   */\n      dup3\n        /* \"#utility.yul\":10818:10830   */\n      and\n        /* \"#utility.yul\":10849:10867   */\n      dup1\n        /* \"#utility.yul\":10839:10920   */\n      tag_421\n      jumpi\n        /* \"#utility.yul\":10905:10909   */\n      0x7f\n        /* \"#utility.yul\":10897:10903   */\n      dup3\n        /* \"#utility.yul\":10893:10910   */\n      and\n        /* \"#utility.yul\":10883:10910   */\n      swap2\n      pop\n        /* \"#utility.yul\":10839:10920   */\n    tag_421:\n        /* \"#utility.yul\":10967:10969   */\n      0x20\n        /* \"#utility.yul\":10959:10965   */\n      dup3\n        /* \"#utility.yul\":10956:10970   */\n      lt\n        /* \"#utility.yul\":10936:10954   */\n      dup2\n        /* \"#utility.yul\":10933:10971   */\n      sub\n        /* \"#utility.yul\":10930:11014   */\n      tag_422\n      jumpi\n        /* \"#utility.yul\":10986:11004   */\n      tag_423\n      tag_286\n      jump\t// in\n    tag_423:\n        /* \"#utility.yul\":10930:11014   */\n    tag_422:\n        /* \"#utility.yul\":10751:11020   */\n      pop\n        /* \"#utility.yul\":10700:11020   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11026:11174   */\n    tag_287:\n        /* \"#utility.yul\":11128:11139   */\n      0x00\n        /* \"#utility.yul\":11165:11168   */\n      dup2\n        /* \"#utility.yul\":11150:11168   */\n      swap1\n      pop\n        /* \"#utility.yul\":11026:11174   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11180:11557   */\n    tag_288:\n        /* \"#utility.yul\":11286:11289   */\n      0x00\n        /* \"#utility.yul\":11314:11353   */\n      tag_426\n        /* \"#utility.yul\":11347:11352   */\n      dup3\n        /* \"#utility.yul\":11314:11353   */\n      tag_262\n      jump\t// in\n    tag_426:\n        /* \"#utility.yul\":11369:11458   */\n      tag_427\n        /* \"#utility.yul\":11451:11457   */\n      dup2\n        /* \"#utility.yul\":11446:11449   */\n      dup6\n        /* \"#utility.yul\":11369:11458   */\n      tag_287\n      jump\t// in\n    tag_427:\n        /* \"#utility.yul\":11362:11458   */\n      swap4\n      pop\n        /* \"#utility.yul\":11467:11519   */\n      tag_428\n        /* \"#utility.yul\":11512:11518   */\n      dup2\n        /* \"#utility.yul\":11507:11510   */\n      dup6\n        /* \"#utility.yul\":11500:11504   */\n      0x20\n        /* \"#utility.yul\":11493:11498   */\n      dup7\n        /* \"#utility.yul\":11489:11505   */\n      add\n        /* \"#utility.yul\":11467:11519   */\n      tag_264\n      jump\t// in\n    tag_428:\n        /* \"#utility.yul\":11544:11550   */\n      dup1\n        /* \"#utility.yul\":11539:11542   */\n      dup5\n        /* \"#utility.yul\":11535:11551   */\n      add\n        /* \"#utility.yul\":11528:11551   */\n      swap2\n      pop\n        /* \"#utility.yul\":11290:11557   */\n      pop\n        /* \"#utility.yul\":11180:11557   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11563:11998   */\n    tag_163:\n        /* \"#utility.yul\":11743:11746   */\n      0x00\n        /* \"#utility.yul\":11765:11860   */\n      tag_430\n        /* \"#utility.yul\":11856:11859   */\n      dup3\n        /* \"#utility.yul\":11847:11853   */\n      dup6\n        /* \"#utility.yul\":11765:11860   */\n      tag_288\n      jump\t// in\n    tag_430:\n        /* \"#utility.yul\":11758:11860   */\n      swap2\n      pop\n        /* \"#utility.yul\":11877:11972   */\n      tag_431\n        /* \"#utility.yul\":11968:11971   */\n      dup3\n        /* \"#utility.yul\":11959:11965   */\n      dup5\n        /* \"#utility.yul\":11877:11972   */\n      tag_288\n      jump\t// in\n    tag_431:\n        /* \"#utility.yul\":11870:11972   */\n      swap2\n      pop\n        /* \"#utility.yul\":11989:11992   */\n      dup2\n        /* \"#utility.yul\":11982:11992   */\n      swap1\n      pop\n        /* \"#utility.yul\":11563:11998   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12004:12184   */\n    tag_289:\n        /* \"#utility.yul\":12052:12129   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":12049:12050   */\n      0x00\n        /* \"#utility.yul\":12042:12130   */\n      mstore\n        /* \"#utility.yul\":12149:12153   */\n      0x11\n        /* \"#utility.yul\":12146:12147   */\n      0x04\n        /* \"#utility.yul\":12139:12154   */\n      mstore\n        /* \"#utility.yul\":12173:12177   */\n      0x24\n        /* \"#utility.yul\":12170:12171   */\n      0x00\n        /* \"#utility.yul\":12163:12178   */\n      revert\n        /* \"#utility.yul\":12190:12381   */\n    tag_194:\n        /* \"#utility.yul\":12230:12234   */\n      0x00\n        /* \"#utility.yul\":12250:12270   */\n      tag_434\n        /* \"#utility.yul\":12268:12269   */\n      dup3\n        /* \"#utility.yul\":12250:12270   */\n      tag_267\n      jump\t// in\n    tag_434:\n        /* \"#utility.yul\":12245:12270   */\n      swap2\n      pop\n        /* \"#utility.yul\":12284:12304   */\n      tag_435\n        /* \"#utility.yul\":12302:12303   */\n      dup4\n        /* \"#utility.yul\":12284:12304   */\n      tag_267\n      jump\t// in\n    tag_435:\n        /* \"#utility.yul\":12279:12304   */\n      swap3\n      pop\n        /* \"#utility.yul\":12323:12324   */\n      dup3\n        /* \"#utility.yul\":12320:12321   */\n      dup3\n        /* \"#utility.yul\":12317:12325   */\n      lt\n        /* \"#utility.yul\":12314:12348   */\n      iszero\n      tag_436\n      jumpi\n        /* \"#utility.yul\":12328:12346   */\n      tag_437\n      tag_289\n      jump\t// in\n    tag_437:\n        /* \"#utility.yul\":12314:12348   */\n    tag_436:\n        /* \"#utility.yul\":12373:12374   */\n      dup3\n        /* \"#utility.yul\":12370:12371   */\n      dup3\n        /* \"#utility.yul\":12366:12375   */\n      sub\n        /* \"#utility.yul\":12358:12375   */\n      swap1\n      pop\n        /* \"#utility.yul\":12190:12381   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12387:12735   */\n    tag_197:\n        /* \"#utility.yul\":12427:12434   */\n      0x00\n        /* \"#utility.yul\":12450:12470   */\n      tag_439\n        /* \"#utility.yul\":12468:12469   */\n      dup3\n        /* \"#utility.yul\":12450:12470   */\n      tag_267\n      jump\t// in\n    tag_439:\n        /* \"#utility.yul\":12445:12470   */\n      swap2\n      pop\n        /* \"#utility.yul\":12484:12504   */\n      tag_440\n        /* \"#utility.yul\":12502:12503   */\n      dup4\n        /* \"#utility.yul\":12484:12504   */\n      tag_267\n      jump\t// in\n    tag_440:\n        /* \"#utility.yul\":12479:12504   */\n      swap3\n      pop\n        /* \"#utility.yul\":12672:12673   */\n      dup2\n        /* \"#utility.yul\":12604:12670   */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":12600:12674   */\n      div\n        /* \"#utility.yul\":12597:12598   */\n      dup4\n        /* \"#utility.yul\":12594:12675   */\n      gt\n        /* \"#utility.yul\":12589:12590   */\n      dup3\n        /* \"#utility.yul\":12582:12591   */\n      iszero\n        /* \"#utility.yul\":12575:12592   */\n      iszero\n        /* \"#utility.yul\":12571:12676   */\n      and\n        /* \"#utility.yul\":12568:12699   */\n      iszero\n      tag_441\n      jumpi\n        /* \"#utility.yul\":12679:12697   */\n      tag_442\n      tag_289\n      jump\t// in\n    tag_442:\n        /* \"#utility.yul\":12568:12699   */\n    tag_441:\n        /* \"#utility.yul\":12727:12728   */\n      dup3\n        /* \"#utility.yul\":12724:12725   */\n      dup3\n        /* \"#utility.yul\":12720:12729   */\n      mul\n        /* \"#utility.yul\":12709:12729   */\n      swap1\n      pop\n        /* \"#utility.yul\":12387:12735   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12741:13046   */\n    tag_200:\n        /* \"#utility.yul\":12781:12784   */\n      0x00\n        /* \"#utility.yul\":12800:12820   */\n      tag_444\n        /* \"#utility.yul\":12818:12819   */\n      dup3\n        /* \"#utility.yul\":12800:12820   */\n      tag_267\n      jump\t// in\n    tag_444:\n        /* \"#utility.yul\":12795:12820   */\n      swap2\n      pop\n        /* \"#utility.yul\":12834:12854   */\n      tag_445\n        /* \"#utility.yul\":12852:12853   */\n      dup4\n        /* \"#utility.yul\":12834:12854   */\n      tag_267\n      jump\t// in\n    tag_445:\n        /* \"#utility.yul\":12829:12854   */\n      swap3\n      pop\n        /* \"#utility.yul\":12988:12989   */\n      dup3\n        /* \"#utility.yul\":12920:12986   */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":12916:12990   */\n      sub\n        /* \"#utility.yul\":12913:12914   */\n      dup3\n        /* \"#utility.yul\":12910:12991   */\n      gt\n        /* \"#utility.yul\":12907:13014   */\n      iszero\n      tag_446\n      jumpi\n        /* \"#utility.yul\":12994:13012   */\n      tag_447\n      tag_289\n      jump\t// in\n    tag_447:\n        /* \"#utility.yul\":12907:13014   */\n    tag_446:\n        /* \"#utility.yul\":13038:13039   */\n      dup3\n        /* \"#utility.yul\":13035:13036   */\n      dup3\n        /* \"#utility.yul\":13031:13040   */\n      add\n        /* \"#utility.yul\":13024:13040   */\n      swap1\n      pop\n        /* \"#utility.yul\":12741:13046   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13052:13150   */\n    tag_290:\n        /* \"#utility.yul\":13103:13109   */\n      0x00\n        /* \"#utility.yul\":13137:13142   */\n      dup2\n        /* \"#utility.yul\":13131:13143   */\n      mload\n        /* \"#utility.yul\":13121:13143   */\n      swap1\n      pop\n        /* \"#utility.yul\":13052:13150   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13156:13324   */\n    tag_291:\n        /* \"#utility.yul\":13239:13250   */\n      0x00\n        /* \"#utility.yul\":13273:13279   */\n      dup3\n        /* \"#utility.yul\":13268:13271   */\n      dup3\n        /* \"#utility.yul\":13261:13280   */\n      mstore\n        /* \"#utility.yul\":13313:13317   */\n      0x20\n        /* \"#utility.yul\":13308:13311   */\n      dup3\n        /* \"#utility.yul\":13304:13318   */\n      add\n        /* \"#utility.yul\":13289:13318   */\n      swap1\n      pop\n        /* \"#utility.yul\":13156:13324   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13330:13690   */\n    tag_292:\n        /* \"#utility.yul\":13416:13419   */\n      0x00\n        /* \"#utility.yul\":13444:13482   */\n      tag_451\n        /* \"#utility.yul\":13476:13481   */\n      dup3\n        /* \"#utility.yul\":13444:13482   */\n      tag_290\n      jump\t// in\n    tag_451:\n        /* \"#utility.yul\":13498:13568   */\n      tag_452\n        /* \"#utility.yul\":13561:13567   */\n      dup2\n        /* \"#utility.yul\":13556:13559   */\n      dup6\n        /* \"#utility.yul\":13498:13568   */\n      tag_291\n      jump\t// in\n    tag_452:\n        /* \"#utility.yul\":13491:13568   */\n      swap4\n      pop\n        /* \"#utility.yul\":13577:13629   */\n      tag_453\n        /* \"#utility.yul\":13622:13628   */\n      dup2\n        /* \"#utility.yul\":13617:13620   */\n      dup6\n        /* \"#utility.yul\":13610:13614   */\n      0x20\n        /* \"#utility.yul\":13603:13608   */\n      dup7\n        /* \"#utility.yul\":13599:13615   */\n      add\n        /* \"#utility.yul\":13577:13629   */\n      tag_264\n      jump\t// in\n    tag_453:\n        /* \"#utility.yul\":13654:13683   */\n      tag_454\n        /* \"#utility.yul\":13676:13682   */\n      dup2\n        /* \"#utility.yul\":13654:13683   */\n      tag_265\n      jump\t// in\n    tag_454:\n        /* \"#utility.yul\":13649:13652   */\n      dup5\n        /* \"#utility.yul\":13645:13684   */\n      add\n        /* \"#utility.yul\":13638:13684   */\n      swap2\n      pop\n        /* \"#utility.yul\":13420:13690   */\n      pop\n        /* \"#utility.yul\":13330:13690   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13696:14336   */\n    tag_216:\n        /* \"#utility.yul\":13891:13895   */\n      0x00\n        /* \"#utility.yul\":13929:13932   */\n      0x80\n        /* \"#utility.yul\":13918:13927   */\n      dup3\n        /* \"#utility.yul\":13914:13933   */\n      add\n        /* \"#utility.yul\":13906:13933   */\n      swap1\n      pop\n        /* \"#utility.yul\":13943:14014   */\n      tag_456\n        /* \"#utility.yul\":14011:14012   */\n      0x00\n        /* \"#utility.yul\":14000:14009   */\n      dup4\n        /* \"#utility.yul\":13996:14013   */\n      add\n        /* \"#utility.yul\":13987:13993   */\n      dup8\n        /* \"#utility.yul\":13943:14014   */\n      tag_272\n      jump\t// in\n    tag_456:\n        /* \"#utility.yul\":14024:14096   */\n      tag_457\n        /* \"#utility.yul\":14092:14094   */\n      0x20\n        /* \"#utility.yul\":14081:14090   */\n      dup4\n        /* \"#utility.yul\":14077:14095   */\n      add\n        /* \"#utility.yul\":14068:14074   */\n      dup7\n        /* \"#utility.yul\":14024:14096   */\n      tag_272\n      jump\t// in\n    tag_457:\n        /* \"#utility.yul\":14106:14178   */\n      tag_458\n        /* \"#utility.yul\":14174:14176   */\n      0x40\n        /* \"#utility.yul\":14163:14172   */\n      dup4\n        /* \"#utility.yul\":14159:14177   */\n      add\n        /* \"#utility.yul\":14150:14156   */\n      dup6\n        /* \"#utility.yul\":14106:14178   */\n      tag_275\n      jump\t// in\n    tag_458:\n        /* \"#utility.yul\":14225:14234   */\n      dup2\n        /* \"#utility.yul\":14219:14223   */\n      dup2\n        /* \"#utility.yul\":14215:14235   */\n      sub\n        /* \"#utility.yul\":14210:14212   */\n      0x60\n        /* \"#utility.yul\":14199:14208   */\n      dup4\n        /* \"#utility.yul\":14195:14213   */\n      add\n        /* \"#utility.yul\":14188:14236   */\n      mstore\n        /* \"#utility.yul\":14253:14329   */\n      tag_459\n        /* \"#utility.yul\":14324:14328   */\n      dup2\n        /* \"#utility.yul\":14315:14321   */\n      dup5\n        /* \"#utility.yul\":14253:14329   */\n      tag_292\n      jump\t// in\n    tag_459:\n        /* \"#utility.yul\":14245:14329   */\n      swap1\n      pop\n        /* \"#utility.yul\":13696:14336   */\n      swap6\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14342:14483   */\n    tag_293:\n        /* \"#utility.yul\":14398:14403   */\n      0x00\n        /* \"#utility.yul\":14429:14435   */\n      dup2\n        /* \"#utility.yul\":14423:14436   */\n      mload\n        /* \"#utility.yul\":14414:14436   */\n      swap1\n      pop\n        /* \"#utility.yul\":14445:14477   */\n      tag_461\n        /* \"#utility.yul\":14471:14476   */\n      dup2\n        /* \"#utility.yul\":14445:14477   */\n      tag_258\n      jump\t// in\n    tag_461:\n        /* \"#utility.yul\":14342:14483   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14489:14838   */\n    tag_219:\n        /* \"#utility.yul\":14558:14564   */\n      0x00\n        /* \"#utility.yul\":14607:14609   */\n      0x20\n        /* \"#utility.yul\":14595:14604   */\n      dup3\n        /* \"#utility.yul\":14586:14593   */\n      dup5\n        /* \"#utility.yul\":14582:14605   */\n      sub\n        /* \"#utility.yul\":14578:14610   */\n      slt\n        /* \"#utility.yul\":14575:14694   */\n      iszero\n      tag_463\n      jumpi\n        /* \"#utility.yul\":14613:14692   */\n      tag_464\n      tag_255\n      jump\t// in\n    tag_464:\n        /* \"#utility.yul\":14575:14694   */\n    tag_463:\n        /* \"#utility.yul\":14733:14734   */\n      0x00\n        /* \"#utility.yul\":14758:14821   */\n      tag_465\n        /* \"#utility.yul\":14813:14820   */\n      dup5\n        /* \"#utility.yul\":14804:14810   */\n      dup3\n        /* \"#utility.yul\":14793:14802   */\n      dup6\n        /* \"#utility.yul\":14789:14811   */\n      add\n        /* \"#utility.yul\":14758:14821   */\n      tag_293\n      jump\t// in\n    tag_465:\n        /* \"#utility.yul\":14748:14821   */\n      swap2\n      pop\n        /* \"#utility.yul\":14704:14831   */\n      pop\n        /* \"#utility.yul\":14489:14838   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14844:15077   */\n    tag_235:\n        /* \"#utility.yul\":14883:14886   */\n      0x00\n        /* \"#utility.yul\":14906:14930   */\n      tag_467\n        /* \"#utility.yul\":14924:14929   */\n      dup3\n        /* \"#utility.yul\":14906:14930   */\n      tag_267\n      jump\t// in\n    tag_467:\n        /* \"#utility.yul\":14897:14930   */\n      swap2\n      pop\n        /* \"#utility.yul\":14952:15018   */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":14945:14950   */\n      dup3\n        /* \"#utility.yul\":14942:15019   */\n      sub\n        /* \"#utility.yul\":14939:15042   */\n      tag_468\n      jumpi\n        /* \"#utility.yul\":15022:15040   */\n      tag_469\n      tag_289\n      jump\t// in\n    tag_469:\n        /* \"#utility.yul\":14939:15042   */\n    tag_468:\n        /* \"#utility.yul\":15069:15070   */\n      0x01\n        /* \"#utility.yul\":15062:15067   */\n      dup3\n        /* \"#utility.yul\":15058:15071   */\n      add\n        /* \"#utility.yul\":15051:15071   */\n      swap1\n      pop\n        /* \"#utility.yul\":14844:15077   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15083:15263   */\n    tag_294:\n        /* \"#utility.yul\":15131:15208   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":15128:15129   */\n      0x00\n        /* \"#utility.yul\":15121:15209   */\n      mstore\n        /* \"#utility.yul\":15228:15232   */\n      0x12\n        /* \"#utility.yul\":15225:15226   */\n      0x04\n        /* \"#utility.yul\":15218:15233   */\n      mstore\n        /* \"#utility.yul\":15252:15256   */\n      0x24\n        /* \"#utility.yul\":15249:15250   */\n      0x00\n        /* \"#utility.yul\":15242:15257   */\n      revert\n        /* \"#utility.yul\":15269:15454   */\n    tag_237:\n        /* \"#utility.yul\":15309:15310   */\n      0x00\n        /* \"#utility.yul\":15326:15346   */\n      tag_472\n        /* \"#utility.yul\":15344:15345   */\n      dup3\n        /* \"#utility.yul\":15326:15346   */\n      tag_267\n      jump\t// in\n    tag_472:\n        /* \"#utility.yul\":15321:15346   */\n      swap2\n      pop\n        /* \"#utility.yul\":15360:15380   */\n      tag_473\n        /* \"#utility.yul\":15378:15379   */\n      dup4\n        /* \"#utility.yul\":15360:15380   */\n      tag_267\n      jump\t// in\n    tag_473:\n        /* \"#utility.yul\":15355:15380   */\n      swap3\n      pop\n        /* \"#utility.yul\":15399:15400   */\n      dup3\n        /* \"#utility.yul\":15389:15424   */\n      tag_474\n      jumpi\n        /* \"#utility.yul\":15404:15422   */\n      tag_475\n      tag_294\n      jump\t// in\n    tag_475:\n        /* \"#utility.yul\":15389:15424   */\n    tag_474:\n        /* \"#utility.yul\":15446:15447   */\n      dup3\n        /* \"#utility.yul\":15443:15444   */\n      dup3\n        /* \"#utility.yul\":15439:15448   */\n      div\n        /* \"#utility.yul\":15434:15448   */\n      swap1\n      pop\n        /* \"#utility.yul\":15269:15454   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15460:15636   */\n    tag_246:\n        /* \"#utility.yul\":15492:15493   */\n      0x00\n        /* \"#utility.yul\":15509:15529   */\n      tag_477\n        /* \"#utility.yul\":15527:15528   */\n      dup3\n        /* \"#utility.yul\":15509:15529   */\n      tag_267\n      jump\t// in\n    tag_477:\n        /* \"#utility.yul\":15504:15529   */\n      swap2\n      pop\n        /* \"#utility.yul\":15543:15563   */\n      tag_478\n        /* \"#utility.yul\":15561:15562   */\n      dup4\n        /* \"#utility.yul\":15543:15563   */\n      tag_267\n      jump\t// in\n    tag_478:\n        /* \"#utility.yul\":15538:15563   */\n      swap3\n      pop\n        /* \"#utility.yul\":15582:15583   */\n      dup3\n        /* \"#utility.yul\":15572:15607   */\n      tag_479\n      jumpi\n        /* \"#utility.yul\":15587:15605   */\n      tag_480\n      tag_294\n      jump\t// in\n    tag_480:\n        /* \"#utility.yul\":15572:15607   */\n    tag_479:\n        /* \"#utility.yul\":15628:15629   */\n      dup3\n        /* \"#utility.yul\":15625:15626   */\n      dup3\n        /* \"#utility.yul\":15621:15630   */\n      mod\n        /* \"#utility.yul\":15616:15630   */\n      swap1\n      pop\n        /* \"#utility.yul\":15460:15636   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15642:15822   */\n    tag_250:\n        /* \"#utility.yul\":15690:15767   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":15687:15688   */\n      0x00\n        /* \"#utility.yul\":15680:15768   */\n      mstore\n        /* \"#utility.yul\":15787:15791   */\n      0x32\n        /* \"#utility.yul\":15784:15785   */\n      0x04\n        /* \"#utility.yul\":15777:15792   */\n      mstore\n        /* \"#utility.yul\":15811:15815   */\n      0x24\n        /* \"#utility.yul\":15808:15809   */\n      0x00\n        /* \"#utility.yul\":15801:15816   */\n      revert\n    stop\n    data_d8bb5093925f17312ccd69c1ad4eefb61d29f5f451bdf501cef244662be1efab 68747470733a2f2f676174657761792e70696e6174612e636c6f75642f697066732f516d6648576b7454625354424e4c7777385a446832716335444b71695a63696b6e6f7137365a665872736f5231762f\n\n    auxdata: 0xa26469706673582212200aa029e4dc520328a062fe60d2875c4d9b682beb4d6bf94f2a5bfb1d1219fe6064736f6c634300080d0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_1112": {
									"entryPoint": null,
									"id": 1112,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_startTokenId_1201": {
									"entryPoint": 135,
									"id": 1201,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"abi_decode_available_length_t_string_memory_ptr_fromMemory": {
									"entryPoint": 607,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_decode_t_string_memory_ptr_fromMemory": {
									"entryPoint": 682,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory": {
									"entryPoint": 733,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"allocate_memory": {
									"entryPoint": 468,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": 320,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"array_allocation_size_t_string_memory_ptr": {
									"entryPoint": 499,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"copy_memory_to_memory": {
									"entryPoint": 553,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"extract_byte_array_length": {
									"entryPoint": 913,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"finalize_allocation": {
									"entryPoint": 414,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"panic_error_0x22": {
									"entryPoint": 866,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 367,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d": {
									"entryPoint": 340,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae": {
									"entryPoint": 345,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": 335,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 330,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"round_up_to_mul_of_32": {
									"entryPoint": 350,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:4093:12",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "47:35:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "57:19:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "73:2:12",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "67:5:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "67:9:12"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "57:6:12"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "40:6:12",
														"type": ""
													}
												],
												"src": "7:75:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "177:28:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "194:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "197:1:12",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "187:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "187:12:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "187:12:12"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nodeType": "YulFunctionDefinition",
												"src": "88:117:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "300:28:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "317:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "320:1:12",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "310:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "310:12:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "310:12:12"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nodeType": "YulFunctionDefinition",
												"src": "211:117:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "423:28:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "440:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "443:1:12",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "433:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "433:12:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "433:12:12"
														}
													]
												},
												"name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
												"nodeType": "YulFunctionDefinition",
												"src": "334:117:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "546:28:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "563:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "566:1:12",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "556:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "556:12:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "556:12:12"
														}
													]
												},
												"name": "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
												"nodeType": "YulFunctionDefinition",
												"src": "457:117:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "628:54:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "638:38:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "656:5:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "663:2:12",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "652:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "652:14:12"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "672:2:12",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "668:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "668:7:12"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "648:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "648:28:12"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "638:6:12"
																}
															]
														}
													]
												},
												"name": "round_up_to_mul_of_32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "611:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nodeType": "YulTypedName",
														"src": "621:6:12",
														"type": ""
													}
												],
												"src": "580:102:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "716:152:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "733:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "736:77:12",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "726:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "726:88:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "726:88:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "830:1:12",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "833:4:12",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "823:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "823:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "823:15:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "854:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "857:4:12",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "847:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "847:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "847:15:12"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "688:180:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "917:238:12",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "927:58:12",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "949:6:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "size",
																				"nodeType": "YulIdentifier",
																				"src": "979:4:12"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nodeType": "YulIdentifier",
																			"src": "957:21:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "957:27:12"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "945:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "945:40:12"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "931:10:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1096:22:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "1098:16:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1098:18:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1098:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "1039:10:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1051:18:12",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "1036:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1036:34:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "1075:10:12"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "1087:6:12"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "1072:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1072:22:12"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "1033:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1033:62:12"
															},
															"nodeType": "YulIf",
															"src": "1030:88:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1134:2:12",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "1138:10:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1127:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1127:22:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1127:22:12"
														}
													]
												},
												"name": "finalize_allocation",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "903:6:12",
														"type": ""
													},
													{
														"name": "size",
														"nodeType": "YulTypedName",
														"src": "911:4:12",
														"type": ""
													}
												],
												"src": "874:281:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1202:88:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1212:30:12",
															"value": {
																"arguments": [],
																"functionName": {
																	"name": "allocate_unbounded",
																	"nodeType": "YulIdentifier",
																	"src": "1222:18:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1222:20:12"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "1212:6:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "1271:6:12"
																	},
																	{
																		"name": "size",
																		"nodeType": "YulIdentifier",
																		"src": "1279:4:12"
																	}
																],
																"functionName": {
																	"name": "finalize_allocation",
																	"nodeType": "YulIdentifier",
																	"src": "1251:19:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1251:33:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1251:33:12"
														}
													]
												},
												"name": "allocate_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "size",
														"nodeType": "YulTypedName",
														"src": "1186:4:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "1195:6:12",
														"type": ""
													}
												],
												"src": "1161:129:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1363:241:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1468:22:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "1470:16:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1470:18:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1470:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1440:6:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1448:18:12",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1437:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1437:30:12"
															},
															"nodeType": "YulIf",
															"src": "1434:56:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1500:37:12",
															"value": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1530:6:12"
																	}
																],
																"functionName": {
																	"name": "round_up_to_mul_of_32",
																	"nodeType": "YulIdentifier",
																	"src": "1508:21:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1508:29:12"
															},
															"variableNames": [
																{
																	"name": "size",
																	"nodeType": "YulIdentifier",
																	"src": "1500:4:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1574:23:12",
															"value": {
																"arguments": [
																	{
																		"name": "size",
																		"nodeType": "YulIdentifier",
																		"src": "1586:4:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1592:4:12",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1582:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1582:15:12"
															},
															"variableNames": [
																{
																	"name": "size",
																	"nodeType": "YulIdentifier",
																	"src": "1574:4:12"
																}
															]
														}
													]
												},
												"name": "array_allocation_size_t_string_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "1347:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "size",
														"nodeType": "YulTypedName",
														"src": "1358:4:12",
														"type": ""
													}
												],
												"src": "1296:308:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1659:258:12",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1669:10:12",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1678:1:12",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "1673:1:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1738:63:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "1763:3:12"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "1768:1:12"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "1759:3:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1759:11:12"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "1782:3:12"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "1787:1:12"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "1778:3:12"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1778:11:12"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "1772:5:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1772:18:12"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1752:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1752:39:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1752:39:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "1699:1:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1702:6:12"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "1696:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1696:13:12"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "1710:19:12",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "1712:15:12",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "1721:1:12"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1724:2:12",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "1717:3:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1717:10:12"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "1712:1:12"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "1692:3:12",
																"statements": []
															},
															"src": "1688:113:12"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1835:76:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "1885:3:12"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "1890:6:12"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "1881:3:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1881:16:12"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1899:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1874:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1874:27:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1874:27:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "1816:1:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1819:6:12"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1813:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1813:13:12"
															},
															"nodeType": "YulIf",
															"src": "1810:101:12"
														}
													]
												},
												"name": "copy_memory_to_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "1641:3:12",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "1646:3:12",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "1651:6:12",
														"type": ""
													}
												],
												"src": "1610:307:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2018:326:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2028:75:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "2095:6:12"
																			}
																		],
																		"functionName": {
																			"name": "array_allocation_size_t_string_memory_ptr",
																			"nodeType": "YulIdentifier",
																			"src": "2053:41:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2053:49:12"
																	}
																],
																"functionName": {
																	"name": "allocate_memory",
																	"nodeType": "YulIdentifier",
																	"src": "2037:15:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2037:66:12"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "2028:5:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "array",
																		"nodeType": "YulIdentifier",
																		"src": "2119:5:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2126:6:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2112:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2112:21:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2112:21:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2142:27:12",
															"value": {
																"arguments": [
																	{
																		"name": "array",
																		"nodeType": "YulIdentifier",
																		"src": "2157:5:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2164:4:12",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2153:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2153:16:12"
															},
															"variables": [
																{
																	"name": "dst",
																	"nodeType": "YulTypedName",
																	"src": "2146:3:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2207:83:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
																				"nodeType": "YulIdentifier",
																				"src": "2209:77:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2209:79:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2209:79:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "src",
																				"nodeType": "YulIdentifier",
																				"src": "2188:3:12"
																			},
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "2193:6:12"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2184:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2184:16:12"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "2202:3:12"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2181:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2181:25:12"
															},
															"nodeType": "YulIf",
															"src": "2178:112:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "src",
																		"nodeType": "YulIdentifier",
																		"src": "2321:3:12"
																	},
																	{
																		"name": "dst",
																		"nodeType": "YulIdentifier",
																		"src": "2326:3:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2331:6:12"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "2299:21:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2299:39:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2299:39:12"
														}
													]
												},
												"name": "abi_decode_available_length_t_string_memory_ptr_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "1991:3:12",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "1996:6:12",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "2004:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "2012:5:12",
														"type": ""
													}
												],
												"src": "1923:421:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2437:282:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2486:83:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
																				"nodeType": "YulIdentifier",
																				"src": "2488:77:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2488:79:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2488:79:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2465:6:12"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2473:4:12",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2461:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2461:17:12"
																			},
																			{
																				"name": "end",
																				"nodeType": "YulIdentifier",
																				"src": "2480:3:12"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "2457:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2457:27:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2450:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2450:35:12"
															},
															"nodeType": "YulIf",
															"src": "2447:122:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2578:27:12",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "2598:6:12"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "2592:5:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2592:13:12"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "2582:6:12",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2614:99:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "2686:6:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2694:4:12",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2682:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2682:17:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2701:6:12"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "2709:3:12"
																	}
																],
																"functionName": {
																	"name": "abi_decode_available_length_t_string_memory_ptr_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "2623:58:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2623:90:12"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "2614:5:12"
																}
															]
														}
													]
												},
												"name": "abi_decode_t_string_memory_ptr_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "2415:6:12",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "2423:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "2431:5:12",
														"type": ""
													}
												],
												"src": "2364:355:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2839:739:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2885:83:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "2887:77:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2887:79:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2887:79:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2860:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2869:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2856:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2856:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2881:2:12",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2852:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2852:32:12"
															},
															"nodeType": "YulIf",
															"src": "2849:119:12"
														},
														{
															"nodeType": "YulBlock",
															"src": "2978:291:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2993:38:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "3017:9:12"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3028:1:12",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3013:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3013:17:12"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "3007:5:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3007:24:12"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "2997:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "3078:83:12",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [],
																					"functionName": {
																						"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
																						"nodeType": "YulIdentifier",
																						"src": "3080:77:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "3080:79:12"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "3080:79:12"
																			}
																		]
																	},
																	"condition": {
																		"arguments": [
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "3050:6:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3058:18:12",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "3047:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3047:30:12"
																	},
																	"nodeType": "YulIf",
																	"src": "3044:117:12"
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3175:84:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "3231:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "3242:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3227:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3227:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3251:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_string_memory_ptr_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "3185:41:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3185:74:12"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "3175:6:12"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "3279:292:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "3294:39:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "3318:9:12"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3329:2:12",
																						"type": "",
																						"value": "32"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3314:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3314:18:12"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "3308:5:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3308:25:12"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "3298:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "3380:83:12",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [],
																					"functionName": {
																						"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
																						"nodeType": "YulIdentifier",
																						"src": "3382:77:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "3382:79:12"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "3382:79:12"
																			}
																		]
																	},
																	"condition": {
																		"arguments": [
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "3352:6:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3360:18:12",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "3349:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3349:30:12"
																	},
																	"nodeType": "YulIf",
																	"src": "3346:117:12"
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3477:84:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "3533:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "3544:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3529:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3529:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3553:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_string_memory_ptr_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "3487:41:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3487:74:12"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "3477:6:12"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2801:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2812:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2824:6:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2832:6:12",
														"type": ""
													}
												],
												"src": "2725:853:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3612:152:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3629:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3632:77:12",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3622:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3622:88:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3622:88:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3726:1:12",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3729:4:12",
																		"type": "",
																		"value": "0x22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3719:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3719:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3719:15:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3750:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3753:4:12",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "3743:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3743:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3743:15:12"
														}
													]
												},
												"name": "panic_error_0x22",
												"nodeType": "YulFunctionDefinition",
												"src": "3584:180:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3821:269:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3831:22:12",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "3845:4:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3851:1:12",
																		"type": "",
																		"value": "2"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "3841:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3841:12:12"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "3831:6:12"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3862:38:12",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "3892:4:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3898:1:12",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "3888:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3888:12:12"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "3866:18:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3939:51:12",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "3953:27:12",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "3967:6:12"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3975:4:12",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "3963:3:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3963:17:12"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "3953:6:12"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "3919:18:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3912:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3912:26:12"
															},
															"nodeType": "YulIf",
															"src": "3909:81:12"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4042:42:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x22",
																				"nodeType": "YulIdentifier",
																				"src": "4056:16:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4056:18:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4056:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "4006:18:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "4029:6:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4037:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "4026:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4026:14:12"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "4003:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4003:38:12"
															},
															"nodeType": "YulIf",
															"src": "4000:84:12"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "3805:4:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "3814:6:12",
														"type": ""
													}
												],
												"src": "3770:320:12"
											}
										]
									},
									"contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function abi_decode_available_length_t_string_memory_ptr_fromMemory(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_memory_to_memory(src, dst, length)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr_fromMemory(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := mload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr_fromMemory(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := mload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := mload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n}\n",
									"id": 12,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60806040523480156200001157600080fd5b506040516200261a3803806200261a8339818101604052810190620000379190620002dd565b81600290805190602001906200004f92919062000090565b5080600390805190602001906200006892919062000090565b50620000796200008760201b60201c565b6000819055505050620003c6565b60006001905090565b8280546200009e9062000391565b90600052602060002090601f016020900481019282620000c257600085556200010e565b82601f10620000dd57805160ff19168380011785556200010e565b828001600101855582156200010e579182015b828111156200010d578251825591602001919060010190620000f0565b5b5090506200011d919062000121565b5090565b5b808211156200013c57600081600090555060010162000122565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001a9826200015e565b810181811067ffffffffffffffff82111715620001cb57620001ca6200016f565b5b80604052505050565b6000620001e062000140565b9050620001ee82826200019e565b919050565b600067ffffffffffffffff8211156200021157620002106200016f565b5b6200021c826200015e565b9050602081019050919050565b60005b83811015620002495780820151818401526020810190506200022c565b8381111562000259576000848401525b50505050565b6000620002766200027084620001f3565b620001d4565b90508281526020810184848401111562000295576200029462000159565b5b620002a284828562000229565b509392505050565b600082601f830112620002c257620002c162000154565b5b8151620002d48482602086016200025f565b91505092915050565b60008060408385031215620002f757620002f66200014a565b5b600083015167ffffffffffffffff8111156200031857620003176200014f565b5b6200032685828601620002aa565b925050602083015167ffffffffffffffff8111156200034a57620003496200014f565b5b6200035885828601620002aa565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620003aa57607f821691505b602082108103620003c057620003bf62000362565b5b50919050565b61224480620003d66000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806342842e0e11610097578063a22cb46511610066578063a22cb46514610298578063b88d4fde146102b4578063c87b56dd146102d0578063e985e9c514610300576100f5565b806342842e0e146101fe5780636352211e1461021a57806370a082311461024a57806395d89b411461027a576100f5565b8063095ea7b3116100d3578063095ea7b31461017857806318160ddd1461019457806323b872dd146101b2578063325b272a146101ce576100f5565b806301ffc9a7146100fa57806306fdde031461012a578063081812fc14610148575b600080fd5b610114600480360381019061010f91906118a8565b610330565b60405161012191906118f0565b60405180910390f35b610132610412565b60405161013f91906119a4565b60405180910390f35b610162600480360381019061015d91906119fc565b6104a4565b60405161016f9190611a6a565b60405180910390f35b610192600480360381019061018d9190611ab1565b610520565b005b61019c610624565b6040516101a99190611b00565b60405180910390f35b6101cc60048036038101906101c79190611b1b565b61063b565b005b6101e860048036038101906101e39190611b6e565b61064b565b6040516101f59190611b00565b60405180910390f35b61021860048036038101906102139190611b1b565b610746565b005b610234600480360381019061022f91906119fc565b610766565b6040516102419190611a6a565b60405180910390f35b610264600480360381019061025f9190611b6e565b61077c565b6040516102719190611b00565b60405180910390f35b61028261084b565b60405161028f91906119a4565b60405180910390f35b6102b260048036038101906102ad9190611bc7565b6108dd565b005b6102ce60048036038101906102c99190611d3c565b610a54565b005b6102ea60048036038101906102e591906119fc565b610acc565b6040516102f791906119a4565b60405180910390f35b61031a60048036038101906103159190611dbf565b610b6a565b60405161032791906118f0565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806103fb57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061040b575061040a82610bfe565b5b9050919050565b60606002805461042190611e2e565b80601f016020809104026020016040519081016040528092919081815260200182805461044d90611e2e565b801561049a5780601f1061046f5761010080835404028352916020019161049a565b820191906000526020600020905b81548152906001019060200180831161047d57829003601f168201915b5050505050905090565b60006104af82610c68565b6104e5576040517fcf4700e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6006600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061052b82610766565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610592576040517f943f7b8c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166105b1610cb6565b73ffffffffffffffffffffffffffffffffffffffff1614610614576105dd816105d8610cb6565b610b6a565b610613576040517fcfb3b94200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b61061f838383610cbe565b505050565b600061062e610d70565b6001546000540303905090565b610646838383610d79565b505050565b6000806106b2600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060018152602001908152602001600020544361122d90919063ffffffff16565b905060006106d1826106c38661077c565b61124390919063ffffffff16565b9050600061073982600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600281526020019081526020016000205461125990919063ffffffff16565b9050809350505050919050565b61076183838360405180602001604052806000815250610a54565b505050565b60006107718261126f565b600001519050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036107e3576040517f8f4eb60400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900467ffffffffffffffff1667ffffffffffffffff169050919050565b60606003805461085a90611e2e565b80601f016020809104026020016040519081016040528092919081815260200182805461088690611e2e565b80156108d35780601f106108a8576101008083540402835291602001916108d3565b820191906000526020600020905b8154815290600101906020018083116108b657829003601f168201915b5050505050905090565b6108e5610cb6565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610949576040517fb06307db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060076000610956610cb6565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16610a03610cb6565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610a4891906118f0565b60405180910390a35050565b610a5f848484610d79565b610a7e8373ffffffffffffffffffffffffffffffffffffffff166114fa565b15610ac657610a8f8484848461151d565b610ac5576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b50505050565b6060610ad782610c68565b610b0d576040517fa14c4b5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610b1761166d565b90506000815103610b375760405180602001604052806000815250610b62565b80610b418461168d565b604051602001610b52929190611e9b565b6040516020818303038152906040525b915050919050565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600081610c73610d70565b11158015610c82575060005482105b8015610caf575060046000838152602001908152602001600020600001601c9054906101000a900460ff16155b9050919050565b600033905090565b826006600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b60006001905090565b6000610d848261126f565b90508373ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff1614610def576040517fa114810000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008473ffffffffffffffffffffffffffffffffffffffff16610e10610cb6565b73ffffffffffffffffffffffffffffffffffffffff161480610e3f5750610e3e85610e39610cb6565b610b6a565b5b80610e845750610e4d610cb6565b73ffffffffffffffffffffffffffffffffffffffff16610e6c846104a4565b73ffffffffffffffffffffffffffffffffffffffff16145b905080610ebd576040517f59c896be00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610f23576040517fea553b3400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610f3085858560016117ed565b610f3c60008487610cbe565b6001600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282829054906101000a900467ffffffffffffffff160392506101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506001600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282829054906101000a900467ffffffffffffffff160192506101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506000600460008581526020019081526020016000209050848160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550428160000160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060006001850190506000600460008381526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036111bb5760005482146111ba57878160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084602001518160000160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b5b505050828473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461122685858560016117f3565b5050505050565b6000818361123b9190611eee565b905092915050565b600081836112519190611f22565b905092915050565b600081836112679190611f7c565b905092915050565b6112776117f9565b600082905080611285610d70565b116114c3576000548110156114c2576000600460008381526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160008201601c9054906101000a900460ff161515151581525050905080604001516114c057600073ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff16146113a45780925050506114f5565b5b6001156114bf57818060019003925050600460008381526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160008201601c9054906101000a900460ff1615151515815250509050600073ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff16146114ba5780925050506114f5565b6113a5565b5b505b5b6040517fdf2d9b4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60008373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611543610cb6565b8786866040518563ffffffff1660e01b81526004016115659493929190612027565b6020604051808303816000875af19250505080156115a157506040513d601f19601f8201168201806040525081019061159e9190612088565b60015b61161a573d80600081146115d1576040519150601f19603f3d011682016040523d82523d6000602084013e6115d6565b606091505b506000815103611612576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050949350505050565b60606040518060800160405280605181526020016121be60519139905090565b6060600082036116d4576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506117e8565b600082905060005b600082146117065780806116ef906120b5565b915050600a826116ff919061212c565b91506116dc565b60008167ffffffffffffffff81111561172257611721611c11565b5b6040519080825280601f01601f1916602001820160405280156117545781602001600182028036833780820191505090505b5090505b600085146117e15760018261176d9190611eee565b9150600a8561177c919061215d565b60306117889190611f7c565b60f81b81838151811061179e5761179d61218e565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856117da919061212c565b9450611758565b8093505050505b919050565b50505050565b50505050565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600067ffffffffffffffff1681526020016000151581525090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61188581611850565b811461189057600080fd5b50565b6000813590506118a28161187c565b92915050565b6000602082840312156118be576118bd611846565b5b60006118cc84828501611893565b91505092915050565b60008115159050919050565b6118ea816118d5565b82525050565b600060208201905061190560008301846118e1565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561194557808201518184015260208101905061192a565b83811115611954576000848401525b50505050565b6000601f19601f8301169050919050565b60006119768261190b565b6119808185611916565b9350611990818560208601611927565b6119998161195a565b840191505092915050565b600060208201905081810360008301526119be818461196b565b905092915050565b6000819050919050565b6119d9816119c6565b81146119e457600080fd5b50565b6000813590506119f6816119d0565b92915050565b600060208284031215611a1257611a11611846565b5b6000611a20848285016119e7565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611a5482611a29565b9050919050565b611a6481611a49565b82525050565b6000602082019050611a7f6000830184611a5b565b92915050565b611a8e81611a49565b8114611a9957600080fd5b50565b600081359050611aab81611a85565b92915050565b60008060408385031215611ac857611ac7611846565b5b6000611ad685828601611a9c565b9250506020611ae7858286016119e7565b9150509250929050565b611afa816119c6565b82525050565b6000602082019050611b156000830184611af1565b92915050565b600080600060608486031215611b3457611b33611846565b5b6000611b4286828701611a9c565b9350506020611b5386828701611a9c565b9250506040611b64868287016119e7565b9150509250925092565b600060208284031215611b8457611b83611846565b5b6000611b9284828501611a9c565b91505092915050565b611ba4816118d5565b8114611baf57600080fd5b50565b600081359050611bc181611b9b565b92915050565b60008060408385031215611bde57611bdd611846565b5b6000611bec85828601611a9c565b9250506020611bfd85828601611bb2565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611c498261195a565b810181811067ffffffffffffffff82111715611c6857611c67611c11565b5b80604052505050565b6000611c7b61183c565b9050611c878282611c40565b919050565b600067ffffffffffffffff821115611ca757611ca6611c11565b5b611cb08261195a565b9050602081019050919050565b82818337600083830152505050565b6000611cdf611cda84611c8c565b611c71565b905082815260208101848484011115611cfb57611cfa611c0c565b5b611d06848285611cbd565b509392505050565b600082601f830112611d2357611d22611c07565b5b8135611d33848260208601611ccc565b91505092915050565b60008060008060808587031215611d5657611d55611846565b5b6000611d6487828801611a9c565b9450506020611d7587828801611a9c565b9350506040611d86878288016119e7565b925050606085013567ffffffffffffffff811115611da757611da661184b565b5b611db387828801611d0e565b91505092959194509250565b60008060408385031215611dd657611dd5611846565b5b6000611de485828601611a9c565b9250506020611df585828601611a9c565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611e4657607f821691505b602082108103611e5957611e58611dff565b5b50919050565b600081905092915050565b6000611e758261190b565b611e7f8185611e5f565b9350611e8f818560208601611927565b80840191505092915050565b6000611ea78285611e6a565b9150611eb38284611e6a565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611ef9826119c6565b9150611f04836119c6565b925082821015611f1757611f16611ebf565b5b828203905092915050565b6000611f2d826119c6565b9150611f38836119c6565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611f7157611f70611ebf565b5b828202905092915050565b6000611f87826119c6565b9150611f92836119c6565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611fc757611fc6611ebf565b5b828201905092915050565b600081519050919050565b600082825260208201905092915050565b6000611ff982611fd2565b6120038185611fdd565b9350612013818560208601611927565b61201c8161195a565b840191505092915050565b600060808201905061203c6000830187611a5b565b6120496020830186611a5b565b6120566040830185611af1565b81810360608301526120688184611fee565b905095945050505050565b6000815190506120828161187c565b92915050565b60006020828403121561209e5761209d611846565b5b60006120ac84828501612073565b91505092915050565b60006120c0826119c6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036120f2576120f1611ebf565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612137826119c6565b9150612142836119c6565b925082612152576121516120fd565b5b828204905092915050565b6000612168826119c6565b9150612173836119c6565b925082612183576121826120fd565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfe68747470733a2f2f676174657761792e70696e6174612e636c6f75642f697066732f516d6648576b7454625354424e4c7777385a446832716335444b71695a63696b6e6f7137365a665872736f5231762fa26469706673582212200aa029e4dc520328a062fe60d2875c4d9b682beb4d6bf94f2a5bfb1d1219fe6064736f6c634300080d0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x261A CODESIZE SUB DUP1 PUSH3 0x261A DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x37 SWAP2 SWAP1 PUSH3 0x2DD JUMP JUMPDEST DUP2 PUSH1 0x2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x4F SWAP3 SWAP2 SWAP1 PUSH3 0x90 JUMP JUMPDEST POP DUP1 PUSH1 0x3 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x68 SWAP3 SWAP2 SWAP1 PUSH3 0x90 JUMP JUMPDEST POP PUSH3 0x79 PUSH3 0x87 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 SSTORE POP POP POP PUSH3 0x3C6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 POP SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x9E SWAP1 PUSH3 0x391 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0xC2 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0x10E JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0xDD JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x10E JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x10E JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x10D JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0xF0 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH3 0x11D SWAP2 SWAP1 PUSH3 0x121 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x13C JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH3 0x122 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH3 0x1A9 DUP3 PUSH3 0x15E JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH3 0x1CB JUMPI PUSH3 0x1CA PUSH3 0x16F JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1E0 PUSH3 0x140 JUMP JUMPDEST SWAP1 POP PUSH3 0x1EE DUP3 DUP3 PUSH3 0x19E JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x211 JUMPI PUSH3 0x210 PUSH3 0x16F JUMP JUMPDEST JUMPDEST PUSH3 0x21C DUP3 PUSH3 0x15E JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x249 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x22C JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH3 0x259 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x276 PUSH3 0x270 DUP5 PUSH3 0x1F3 JUMP JUMPDEST PUSH3 0x1D4 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH3 0x295 JUMPI PUSH3 0x294 PUSH3 0x159 JUMP JUMPDEST JUMPDEST PUSH3 0x2A2 DUP5 DUP3 DUP6 PUSH3 0x229 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x2C2 JUMPI PUSH3 0x2C1 PUSH3 0x154 JUMP JUMPDEST JUMPDEST DUP2 MLOAD PUSH3 0x2D4 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH3 0x25F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x2F7 JUMPI PUSH3 0x2F6 PUSH3 0x14A JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x318 JUMPI PUSH3 0x317 PUSH3 0x14F JUMP JUMPDEST JUMPDEST PUSH3 0x326 DUP6 DUP3 DUP7 ADD PUSH3 0x2AA JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x34A JUMPI PUSH3 0x349 PUSH3 0x14F JUMP JUMPDEST JUMPDEST PUSH3 0x358 DUP6 DUP3 DUP7 ADD PUSH3 0x2AA JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x3AA JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x3C0 JUMPI PUSH3 0x3BF PUSH3 0x362 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2244 DUP1 PUSH3 0x3D6 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xF5 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x42842E0E GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x298 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x2B4 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x2D0 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x300 JUMPI PUSH2 0xF5 JUMP JUMPDEST DUP1 PUSH4 0x42842E0E EQ PUSH2 0x1FE JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x21A JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x24A JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x27A JUMPI PUSH2 0xF5 JUMP JUMPDEST DUP1 PUSH4 0x95EA7B3 GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x178 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x194 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1B2 JUMPI DUP1 PUSH4 0x325B272A EQ PUSH2 0x1CE JUMPI PUSH2 0xF5 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xFA JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x12A JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x148 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x114 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x10F SWAP2 SWAP1 PUSH2 0x18A8 JUMP JUMPDEST PUSH2 0x330 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x121 SWAP2 SWAP1 PUSH2 0x18F0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x132 PUSH2 0x412 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x13F SWAP2 SWAP1 PUSH2 0x19A4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x162 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x15D SWAP2 SWAP1 PUSH2 0x19FC JUMP JUMPDEST PUSH2 0x4A4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x16F SWAP2 SWAP1 PUSH2 0x1A6A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x192 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x18D SWAP2 SWAP1 PUSH2 0x1AB1 JUMP JUMPDEST PUSH2 0x520 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x19C PUSH2 0x624 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A9 SWAP2 SWAP1 PUSH2 0x1B00 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1CC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1C7 SWAP2 SWAP1 PUSH2 0x1B1B JUMP JUMPDEST PUSH2 0x63B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1E8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1E3 SWAP2 SWAP1 PUSH2 0x1B6E JUMP JUMPDEST PUSH2 0x64B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F5 SWAP2 SWAP1 PUSH2 0x1B00 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x218 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x213 SWAP2 SWAP1 PUSH2 0x1B1B JUMP JUMPDEST PUSH2 0x746 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x234 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x22F SWAP2 SWAP1 PUSH2 0x19FC JUMP JUMPDEST PUSH2 0x766 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x241 SWAP2 SWAP1 PUSH2 0x1A6A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x264 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x25F SWAP2 SWAP1 PUSH2 0x1B6E JUMP JUMPDEST PUSH2 0x77C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x271 SWAP2 SWAP1 PUSH2 0x1B00 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x282 PUSH2 0x84B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x28F SWAP2 SWAP1 PUSH2 0x19A4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2B2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2AD SWAP2 SWAP1 PUSH2 0x1BC7 JUMP JUMPDEST PUSH2 0x8DD JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2CE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2C9 SWAP2 SWAP1 PUSH2 0x1D3C JUMP JUMPDEST PUSH2 0xA54 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2EA PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2E5 SWAP2 SWAP1 PUSH2 0x19FC JUMP JUMPDEST PUSH2 0xACC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2F7 SWAP2 SWAP1 PUSH2 0x19A4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x31A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x315 SWAP2 SWAP1 PUSH2 0x1DBF JUMP JUMPDEST PUSH2 0xB6A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x327 SWAP2 SWAP1 PUSH2 0x18F0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x3FB JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x40B JUMPI POP PUSH2 0x40A DUP3 PUSH2 0xBFE JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD PUSH2 0x421 SWAP1 PUSH2 0x1E2E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x44D SWAP1 PUSH2 0x1E2E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x49A JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x46F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x49A JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x47D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4AF DUP3 PUSH2 0xC68 JUMP JUMPDEST PUSH2 0x4E5 JUMPI PUSH1 0x40 MLOAD PUSH32 0xCF4700E400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x6 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x52B DUP3 PUSH2 0x766 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x592 JUMPI PUSH1 0x40 MLOAD PUSH32 0x943F7B8C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x5B1 PUSH2 0xCB6 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x614 JUMPI PUSH2 0x5DD DUP2 PUSH2 0x5D8 PUSH2 0xCB6 JUMP JUMPDEST PUSH2 0xB6A JUMP JUMPDEST PUSH2 0x613 JUMPI PUSH1 0x40 MLOAD PUSH32 0xCFB3B94200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST PUSH2 0x61F DUP4 DUP4 DUP4 PUSH2 0xCBE JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x62E PUSH2 0xD70 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 SLOAD SUB SUB SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x646 DUP4 DUP4 DUP4 PUSH2 0xD79 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x6B2 PUSH1 0x8 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD NUMBER PUSH2 0x122D SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x6D1 DUP3 PUSH2 0x6C3 DUP7 PUSH2 0x77C JUMP JUMPDEST PUSH2 0x1243 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x739 DUP3 PUSH1 0x8 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH1 0x2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1259 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x761 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xA54 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x771 DUP3 PUSH2 0x126F JUMP JUMPDEST PUSH1 0x0 ADD MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x7E3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8F4EB60400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x5 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x85A SWAP1 PUSH2 0x1E2E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x886 SWAP1 PUSH2 0x1E2E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x8D3 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x8A8 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x8D3 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x8B6 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x8E5 PUSH2 0xCB6 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x949 JUMPI PUSH1 0x40 MLOAD PUSH32 0xB06307DB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x7 PUSH1 0x0 PUSH2 0x956 PUSH2 0xCB6 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xA03 PUSH2 0xCB6 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0xA48 SWAP2 SWAP1 PUSH2 0x18F0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0xA5F DUP5 DUP5 DUP5 PUSH2 0xD79 JUMP JUMPDEST PUSH2 0xA7E DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x14FA JUMP JUMPDEST ISZERO PUSH2 0xAC6 JUMPI PUSH2 0xA8F DUP5 DUP5 DUP5 DUP5 PUSH2 0x151D JUMP JUMPDEST PUSH2 0xAC5 JUMPI PUSH1 0x40 MLOAD PUSH32 0xD1A57ED600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xAD7 DUP3 PUSH2 0xC68 JUMP JUMPDEST PUSH2 0xB0D JUMPI PUSH1 0x40 MLOAD PUSH32 0xA14C4B5000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xB17 PUSH2 0x166D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0xB37 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xB62 JUMP JUMPDEST DUP1 PUSH2 0xB41 DUP5 PUSH2 0x168D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xB52 SWAP3 SWAP2 SWAP1 PUSH2 0x1E9B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0xC73 PUSH2 0xD70 JUMP JUMPDEST GT ISZERO DUP1 ISZERO PUSH2 0xC82 JUMPI POP PUSH1 0x0 SLOAD DUP3 LT JUMPDEST DUP1 ISZERO PUSH2 0xCAF JUMPI POP PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x1C SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP3 PUSH1 0x6 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD84 DUP3 PUSH2 0x126F JUMP JUMPDEST SWAP1 POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xDEF JUMPI PUSH1 0x40 MLOAD PUSH32 0xA114810000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xE10 PUSH2 0xCB6 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xE3F JUMPI POP PUSH2 0xE3E DUP6 PUSH2 0xE39 PUSH2 0xCB6 JUMP JUMPDEST PUSH2 0xB6A JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0xE84 JUMPI POP PUSH2 0xE4D PUSH2 0xCB6 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xE6C DUP5 PUSH2 0x4A4 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP1 POP DUP1 PUSH2 0xEBD JUMPI PUSH1 0x40 MLOAD PUSH32 0x59C896BE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xF23 JUMPI PUSH1 0x40 MLOAD PUSH32 0xEA553B3400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xF30 DUP6 DUP6 DUP6 PUSH1 0x1 PUSH2 0x17ED JUMP JUMPDEST PUSH2 0xF3C PUSH1 0x0 DUP5 DUP8 PUSH2 0xCBE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x5 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND SUB SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x5 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND ADD SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP DUP5 DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP TIMESTAMP DUP2 PUSH1 0x0 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x1 DUP6 ADD SWAP1 POP PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x11BB JUMPI PUSH1 0x0 SLOAD DUP3 EQ PUSH2 0x11BA JUMPI DUP8 DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP5 PUSH1 0x20 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST JUMPDEST POP POP POP DUP3 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x1226 DUP6 DUP6 DUP6 PUSH1 0x1 PUSH2 0x17F3 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 PUSH2 0x123B SWAP2 SWAP1 PUSH2 0x1EEE JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 PUSH2 0x1251 SWAP2 SWAP1 PUSH2 0x1F22 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 PUSH2 0x1267 SWAP2 SWAP1 PUSH2 0x1F7C JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1277 PUSH2 0x17F9 JUMP JUMPDEST PUSH1 0x0 DUP3 SWAP1 POP DUP1 PUSH2 0x1285 PUSH2 0xD70 JUMP JUMPDEST GT PUSH2 0x14C3 JUMPI PUSH1 0x0 SLOAD DUP2 LT ISZERO PUSH2 0x14C2 JUMPI PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x1C SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE POP POP SWAP1 POP DUP1 PUSH1 0x40 ADD MLOAD PUSH2 0x14C0 JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x13A4 JUMPI DUP1 SWAP3 POP POP POP PUSH2 0x14F5 JUMP JUMPDEST JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x14BF JUMPI DUP2 DUP1 PUSH1 0x1 SWAP1 SUB SWAP3 POP POP PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x1C SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x14BA JUMPI DUP1 SWAP3 POP POP POP PUSH2 0x14F5 JUMP JUMPDEST PUSH2 0x13A5 JUMP JUMPDEST JUMPDEST POP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xDF2D9B4200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x1543 PUSH2 0xCB6 JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1565 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2027 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x15A1 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x159E SWAP2 SWAP1 PUSH2 0x2088 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x161A JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x15D1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x15D6 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x1612 JUMPI PUSH1 0x40 MLOAD PUSH32 0xD1A57ED600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x51 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x21BE PUSH1 0x51 SWAP2 CODECOPY SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 SUB PUSH2 0x16D4 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 POP PUSH2 0x17E8 JUMP JUMPDEST PUSH1 0x0 DUP3 SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x0 DUP3 EQ PUSH2 0x1706 JUMPI DUP1 DUP1 PUSH2 0x16EF SWAP1 PUSH2 0x20B5 JUMP JUMPDEST SWAP2 POP POP PUSH1 0xA DUP3 PUSH2 0x16FF SWAP2 SWAP1 PUSH2 0x212C JUMP JUMPDEST SWAP2 POP PUSH2 0x16DC JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1722 JUMPI PUSH2 0x1721 PUSH2 0x1C11 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1754 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP JUMPDEST PUSH1 0x0 DUP6 EQ PUSH2 0x17E1 JUMPI PUSH1 0x1 DUP3 PUSH2 0x176D SWAP2 SWAP1 PUSH2 0x1EEE JUMP JUMPDEST SWAP2 POP PUSH1 0xA DUP6 PUSH2 0x177C SWAP2 SWAP1 PUSH2 0x215D JUMP JUMPDEST PUSH1 0x30 PUSH2 0x1788 SWAP2 SWAP1 PUSH2 0x1F7C JUMP JUMPDEST PUSH1 0xF8 SHL DUP2 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x179E JUMPI PUSH2 0x179D PUSH2 0x218E JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xA DUP6 PUSH2 0x17DA SWAP2 SWAP1 PUSH2 0x212C JUMP JUMPDEST SWAP5 POP PUSH2 0x1758 JUMP JUMPDEST DUP1 SWAP4 POP POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1885 DUP2 PUSH2 0x1850 JUMP JUMPDEST DUP2 EQ PUSH2 0x1890 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x18A2 DUP2 PUSH2 0x187C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x18BE JUMPI PUSH2 0x18BD PUSH2 0x1846 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x18CC DUP5 DUP3 DUP6 ADD PUSH2 0x1893 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x18EA DUP2 PUSH2 0x18D5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1905 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x18E1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1945 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x192A JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1954 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1976 DUP3 PUSH2 0x190B JUMP JUMPDEST PUSH2 0x1980 DUP2 DUP6 PUSH2 0x1916 JUMP JUMPDEST SWAP4 POP PUSH2 0x1990 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1927 JUMP JUMPDEST PUSH2 0x1999 DUP2 PUSH2 0x195A JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x19BE DUP2 DUP5 PUSH2 0x196B JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x19D9 DUP2 PUSH2 0x19C6 JUMP JUMPDEST DUP2 EQ PUSH2 0x19E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x19F6 DUP2 PUSH2 0x19D0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1A12 JUMPI PUSH2 0x1A11 PUSH2 0x1846 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1A20 DUP5 DUP3 DUP6 ADD PUSH2 0x19E7 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A54 DUP3 PUSH2 0x1A29 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1A64 DUP2 PUSH2 0x1A49 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1A7F PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1A5B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1A8E DUP2 PUSH2 0x1A49 JUMP JUMPDEST DUP2 EQ PUSH2 0x1A99 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1AAB DUP2 PUSH2 0x1A85 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1AC8 JUMPI PUSH2 0x1AC7 PUSH2 0x1846 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1AD6 DUP6 DUP3 DUP7 ADD PUSH2 0x1A9C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1AE7 DUP6 DUP3 DUP7 ADD PUSH2 0x19E7 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x1AFA DUP2 PUSH2 0x19C6 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1B15 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1AF1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1B34 JUMPI PUSH2 0x1B33 PUSH2 0x1846 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1B42 DUP7 DUP3 DUP8 ADD PUSH2 0x1A9C JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1B53 DUP7 DUP3 DUP8 ADD PUSH2 0x1A9C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1B64 DUP7 DUP3 DUP8 ADD PUSH2 0x19E7 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B84 JUMPI PUSH2 0x1B83 PUSH2 0x1846 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1B92 DUP5 DUP3 DUP6 ADD PUSH2 0x1A9C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1BA4 DUP2 PUSH2 0x18D5 JUMP JUMPDEST DUP2 EQ PUSH2 0x1BAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1BC1 DUP2 PUSH2 0x1B9B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1BDE JUMPI PUSH2 0x1BDD PUSH2 0x1846 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1BEC DUP6 DUP3 DUP7 ADD PUSH2 0x1A9C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1BFD DUP6 DUP3 DUP7 ADD PUSH2 0x1BB2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x1C49 DUP3 PUSH2 0x195A JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1C68 JUMPI PUSH2 0x1C67 PUSH2 0x1C11 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C7B PUSH2 0x183C JUMP JUMPDEST SWAP1 POP PUSH2 0x1C87 DUP3 DUP3 PUSH2 0x1C40 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1CA7 JUMPI PUSH2 0x1CA6 PUSH2 0x1C11 JUMP JUMPDEST JUMPDEST PUSH2 0x1CB0 DUP3 PUSH2 0x195A JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CDF PUSH2 0x1CDA DUP5 PUSH2 0x1C8C JUMP JUMPDEST PUSH2 0x1C71 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x1CFB JUMPI PUSH2 0x1CFA PUSH2 0x1C0C JUMP JUMPDEST JUMPDEST PUSH2 0x1D06 DUP5 DUP3 DUP6 PUSH2 0x1CBD JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1D23 JUMPI PUSH2 0x1D22 PUSH2 0x1C07 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1D33 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x1CCC JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1D56 JUMPI PUSH2 0x1D55 PUSH2 0x1846 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1D64 DUP8 DUP3 DUP9 ADD PUSH2 0x1A9C JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x1D75 DUP8 DUP3 DUP9 ADD PUSH2 0x1A9C JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x1D86 DUP8 DUP3 DUP9 ADD PUSH2 0x19E7 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1DA7 JUMPI PUSH2 0x1DA6 PUSH2 0x184B JUMP JUMPDEST JUMPDEST PUSH2 0x1DB3 DUP8 DUP3 DUP9 ADD PUSH2 0x1D0E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1DD6 JUMPI PUSH2 0x1DD5 PUSH2 0x1846 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1DE4 DUP6 DUP3 DUP7 ADD PUSH2 0x1A9C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1DF5 DUP6 DUP3 DUP7 ADD PUSH2 0x1A9C JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1E46 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1E59 JUMPI PUSH2 0x1E58 PUSH2 0x1DFF JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E75 DUP3 PUSH2 0x190B JUMP JUMPDEST PUSH2 0x1E7F DUP2 DUP6 PUSH2 0x1E5F JUMP JUMPDEST SWAP4 POP PUSH2 0x1E8F DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1927 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EA7 DUP3 DUP6 PUSH2 0x1E6A JUMP JUMPDEST SWAP2 POP PUSH2 0x1EB3 DUP3 DUP5 PUSH2 0x1E6A JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1EF9 DUP3 PUSH2 0x19C6 JUMP JUMPDEST SWAP2 POP PUSH2 0x1F04 DUP4 PUSH2 0x19C6 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x1F17 JUMPI PUSH2 0x1F16 PUSH2 0x1EBF JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F2D DUP3 PUSH2 0x19C6 JUMP JUMPDEST SWAP2 POP PUSH2 0x1F38 DUP4 PUSH2 0x19C6 JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x1F71 JUMPI PUSH2 0x1F70 PUSH2 0x1EBF JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F87 DUP3 PUSH2 0x19C6 JUMP JUMPDEST SWAP2 POP PUSH2 0x1F92 DUP4 PUSH2 0x19C6 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x1FC7 JUMPI PUSH2 0x1FC6 PUSH2 0x1EBF JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FF9 DUP3 PUSH2 0x1FD2 JUMP JUMPDEST PUSH2 0x2003 DUP2 DUP6 PUSH2 0x1FDD JUMP JUMPDEST SWAP4 POP PUSH2 0x2013 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1927 JUMP JUMPDEST PUSH2 0x201C DUP2 PUSH2 0x195A JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x203C PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x1A5B JUMP JUMPDEST PUSH2 0x2049 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x1A5B JUMP JUMPDEST PUSH2 0x2056 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1AF1 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x2068 DUP2 DUP5 PUSH2 0x1FEE JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2082 DUP2 PUSH2 0x187C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x209E JUMPI PUSH2 0x209D PUSH2 0x1846 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x20AC DUP5 DUP3 DUP6 ADD PUSH2 0x2073 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x20C0 DUP3 PUSH2 0x19C6 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x20F2 JUMPI PUSH2 0x20F1 PUSH2 0x1EBF JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2137 DUP3 PUSH2 0x19C6 JUMP JUMPDEST SWAP2 POP PUSH2 0x2142 DUP4 PUSH2 0x19C6 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x2152 JUMPI PUSH2 0x2151 PUSH2 0x20FD JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2168 DUP3 PUSH2 0x19C6 JUMP JUMPDEST SWAP2 POP PUSH2 0x2173 DUP4 PUSH2 0x19C6 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x2183 JUMPI PUSH2 0x2182 PUSH2 0x20FD JUMP JUMPDEST JUMPDEST DUP3 DUP3 MOD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID PUSH9 0x747470733A2F2F6761 PUSH21 0x657761792E70696E6174612E636C6F75642F697066 PUSH20 0x2F516D6648576B7454625354424E4C7777385A44 PUSH9 0x32716335444B71695A PUSH4 0x696B6E6F PUSH18 0x37365A665872736F5231762FA26469706673 PC 0x22 SLT KECCAK256 EXP LOG0 0x29 0xE4 0xDC MSTORE SUB 0x28 LOG0 PUSH3 0xFE60D2 DUP8 0x5C 0x4D SWAP12 PUSH9 0x2BEB4D6BF94F2A5BFB SAR SLT NOT INVALID PUSH1 0x64 PUSH20 0x6F6C634300080D00330000000000000000000000 ",
							"sourceMap": "1018:21855:9:-:0;;;2187:158;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2262:5;2254;:13;;;;;;;;;;;;:::i;:::-;;2288:7;2278;:17;;;;;;;;;;;;:::i;:::-;;2322:15;:13;;;:15;;:::i;:::-;2306:13;:31;;;;2187:158;;1018:21855;;2985:92;3041:7;3068:1;3061:8;;2985:92;:::o;1018:21855::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;7:75:12:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:117;443:1;440;433:12;457:117;566:1;563;556:12;580:102;621:6;672:2;668:7;663:2;656:5;652:14;648:28;638:38;;580:102;;;:::o;688:180::-;736:77;733:1;726:88;833:4;830:1;823:15;857:4;854:1;847:15;874:281;957:27;979:4;957:27;:::i;:::-;949:6;945:40;1087:6;1075:10;1072:22;1051:18;1039:10;1036:34;1033:62;1030:88;;;1098:18;;:::i;:::-;1030:88;1138:10;1134:2;1127:22;917:238;874:281;;:::o;1161:129::-;1195:6;1222:20;;:::i;:::-;1212:30;;1251:33;1279:4;1271:6;1251:33;:::i;:::-;1161:129;;;:::o;1296:308::-;1358:4;1448:18;1440:6;1437:30;1434:56;;;1470:18;;:::i;:::-;1434:56;1508:29;1530:6;1508:29;:::i;:::-;1500:37;;1592:4;1586;1582:15;1574:23;;1296:308;;;:::o;1610:307::-;1678:1;1688:113;1702:6;1699:1;1696:13;1688:113;;;1787:1;1782:3;1778:11;1772:18;1768:1;1763:3;1759:11;1752:39;1724:2;1721:1;1717:10;1712:15;;1688:113;;;1819:6;1816:1;1813:13;1810:101;;;1899:1;1890:6;1885:3;1881:16;1874:27;1810:101;1659:258;1610:307;;;:::o;1923:421::-;2012:5;2037:66;2053:49;2095:6;2053:49;:::i;:::-;2037:66;:::i;:::-;2028:75;;2126:6;2119:5;2112:21;2164:4;2157:5;2153:16;2202:3;2193:6;2188:3;2184:16;2181:25;2178:112;;;2209:79;;:::i;:::-;2178:112;2299:39;2331:6;2326:3;2321;2299:39;:::i;:::-;2018:326;1923:421;;;;;:::o;2364:355::-;2431:5;2480:3;2473:4;2465:6;2461:17;2457:27;2447:122;;2488:79;;:::i;:::-;2447:122;2598:6;2592:13;2623:90;2709:3;2701:6;2694:4;2686:6;2682:17;2623:90;:::i;:::-;2614:99;;2437:282;2364:355;;;;:::o;2725:853::-;2824:6;2832;2881:2;2869:9;2860:7;2856:23;2852:32;2849:119;;;2887:79;;:::i;:::-;2849:119;3028:1;3017:9;3013:17;3007:24;3058:18;3050:6;3047:30;3044:117;;;3080:79;;:::i;:::-;3044:117;3185:74;3251:7;3242:6;3231:9;3227:22;3185:74;:::i;:::-;3175:84;;2978:291;3329:2;3318:9;3314:18;3308:25;3360:18;3352:6;3349:30;3346:117;;;3382:79;;:::i;:::-;3346:117;3487:74;3553:7;3544:6;3533:9;3529:22;3487:74;:::i;:::-;3477:84;;3279:292;2725:853;;;;;:::o;3584:180::-;3632:77;3629:1;3622:88;3729:4;3726:1;3719:15;3753:4;3750:1;3743:15;3770:320;3814:6;3851:1;3845:4;3841:12;3831:22;;3898:1;3892:4;3888:12;3919:18;3909:81;;3975:4;3967:6;3963:17;3953:27;;3909:81;4037:2;4029:6;4026:14;4006:18;4003:38;4000:84;;4056:18;;:::i;:::-;4000:84;3821:269;3770:320;;;:::o;1018:21855:9:-;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@BlockScore_1154": {
									"entryPoint": 1611,
									"id": 1154,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_afterTokenTransfers_2495": {
									"entryPoint": 6131,
									"id": 2495,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@_approve_2414": {
									"entryPoint": 3262,
									"id": 2414,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_baseURI_1514": {
									"entryPoint": 5741,
									"id": 1514,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_beforeTokenTransfers_2482": {
									"entryPoint": 6125,
									"id": 2482,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@_checkContractOnERC721Received_2469": {
									"entryPoint": 5405,
									"id": 2469,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@_exists_1731": {
									"entryPoint": 3176,
									"id": 1731,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_msgSender_467": {
									"entryPoint": 3254,
									"id": 467,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_ownershipOf_1427": {
									"entryPoint": 4719,
									"id": 1427,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_startTokenId_1201": {
									"entryPoint": 3440,
									"id": 1201,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_transfer_2197": {
									"entryPoint": 3449,
									"id": 2197,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@add_892": {
									"entryPoint": 4697,
									"id": 892,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@approve_1560": {
									"entryPoint": 1312,
									"id": 1560,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@balanceOf_1289": {
									"entryPoint": 1916,
									"id": 1289,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@getApproved_1582": {
									"entryPoint": 1188,
									"id": 1582,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@isApprovedForAll_1634": {
									"entryPoint": 2922,
									"id": 1634,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@isContract_178": {
									"entryPoint": 5370,
									"id": 178,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@mul_922": {
									"entryPoint": 4675,
									"id": 922,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@name_1452": {
									"entryPoint": 1042,
									"id": 1452,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@ownerOf_1442": {
									"entryPoint": 1894,
									"id": 1442,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@safeTransferFrom_1671": {
									"entryPoint": 1862,
									"id": 1671,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@safeTransferFrom_1707": {
									"entryPoint": 2644,
									"id": 1707,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@setApprovalForAll_1616": {
									"entryPoint": 2269,
									"id": 1616,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@sub_907": {
									"entryPoint": 4653,
									"id": 907,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@supportsInterface_1261": {
									"entryPoint": 816,
									"id": 1261,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@supportsInterface_703": {
									"entryPoint": 3070,
									"id": 703,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@symbol_1462": {
									"entryPoint": 2123,
									"id": 1462,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@toString_562": {
									"entryPoint": 5773,
									"id": 562,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@tokenURI_1505": {
									"entryPoint": 2764,
									"id": 1505,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@totalSupply_1217": {
									"entryPoint": 1572,
									"id": 1217,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@transferFrom_1652": {
									"entryPoint": 1595,
									"id": 1652,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"abi_decode_available_length_t_bytes_memory_ptr": {
									"entryPoint": 7372,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_decode_t_address": {
									"entryPoint": 6812,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_bool": {
									"entryPoint": 7090,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_bytes4": {
									"entryPoint": 6291,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_bytes4_fromMemory": {
									"entryPoint": 8307,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_bytes_memory_ptr": {
									"entryPoint": 7438,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint256": {
									"entryPoint": 6631,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 7022,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address": {
									"entryPoint": 7615,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 6939,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr": {
									"entryPoint": 7484,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 4
								},
								"abi_decode_tuple_t_addresst_bool": {
									"entryPoint": 7111,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 6833,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_bytes4": {
									"entryPoint": 6312,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_bytes4_fromMemory": {
									"entryPoint": 8328,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 6652,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_address_to_t_address_fromStack": {
									"entryPoint": 6747,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bool_to_t_bool_fromStack": {
									"entryPoint": 6369,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack": {
									"entryPoint": 8174,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 6507,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack": {
									"entryPoint": 7786,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_uint256_to_t_uint256_fromStack": {
									"entryPoint": 6897,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 7835,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": 6762,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed": {
									"entryPoint": 8231,
									"id": null,
									"parameterSlots": 5,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": 6384,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 6564,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": 6912,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_memory": {
									"entryPoint": 7281,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": 6204,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"array_allocation_size_t_bytes_memory_ptr": {
									"entryPoint": 7308,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_length_t_bytes_memory_ptr": {
									"entryPoint": 8146,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_length_t_string_memory_ptr": {
									"entryPoint": 6411,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack": {
									"entryPoint": 8157,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
									"entryPoint": 6422,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack": {
									"entryPoint": 7775,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 8060,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_div_t_uint256": {
									"entryPoint": 8492,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 7970,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 7918,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 6729,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bool": {
									"entryPoint": 6357,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bytes4": {
									"entryPoint": 6224,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 6697,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint256": {
									"entryPoint": 6598,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"copy_calldata_to_memory": {
									"entryPoint": 7357,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"copy_memory_to_memory": {
									"entryPoint": 6439,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"extract_byte_array_length": {
									"entryPoint": 7726,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"finalize_allocation": {
									"entryPoint": 7232,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"increment_t_uint256": {
									"entryPoint": 8373,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"mod_t_uint256": {
									"entryPoint": 8541,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 7871,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x12": {
									"entryPoint": 8445,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x22": {
									"entryPoint": 7679,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x32": {
									"entryPoint": 8590,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 7185,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d": {
									"entryPoint": 7175,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae": {
									"entryPoint": 7180,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": 6219,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 6214,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"round_up_to_mul_of_32": {
									"entryPoint": 6490,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"validator_revert_t_address": {
									"entryPoint": 6789,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_bool": {
									"entryPoint": 7067,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_bytes4": {
									"entryPoint": 6268,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint256": {
									"entryPoint": 6608,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:15825:12",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "47:35:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "57:19:12",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "73:2:12",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "67:5:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "67:9:12"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "57:6:12"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "40:6:12",
														"type": ""
													}
												],
												"src": "7:75:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "177:28:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "194:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "197:1:12",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "187:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "187:12:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "187:12:12"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nodeType": "YulFunctionDefinition",
												"src": "88:117:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "300:28:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "317:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "320:1:12",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "310:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "310:12:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "310:12:12"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nodeType": "YulFunctionDefinition",
												"src": "211:117:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "378:105:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "388:89:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "403:5:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "410:66:12",
																		"type": "",
																		"value": "0xffffffff00000000000000000000000000000000000000000000000000000000"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "399:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "399:78:12"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "388:7:12"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bytes4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "360:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "370:7:12",
														"type": ""
													}
												],
												"src": "334:149:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "531:78:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "587:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "596:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "599:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "589:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "589:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "589:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "554:5:12"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "578:5:12"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_bytes4",
																					"nodeType": "YulIdentifier",
																					"src": "561:16:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "561:23:12"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "551:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "551:34:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "544:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "544:42:12"
															},
															"nodeType": "YulIf",
															"src": "541:62:12"
														}
													]
												},
												"name": "validator_revert_t_bytes4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "524:5:12",
														"type": ""
													}
												],
												"src": "489:120:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "666:86:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "676:29:12",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "698:6:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "685:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "685:20:12"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "676:5:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "740:5:12"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_bytes4",
																	"nodeType": "YulIdentifier",
																	"src": "714:25:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "714:32:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "714:32:12"
														}
													]
												},
												"name": "abi_decode_t_bytes4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "644:6:12",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "652:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "660:5:12",
														"type": ""
													}
												],
												"src": "615:137:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "823:262:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "869:83:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "871:77:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "871:79:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "871:79:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "844:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "853:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "840:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "840:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "865:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "836:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "836:32:12"
															},
															"nodeType": "YulIf",
															"src": "833:119:12"
														},
														{
															"nodeType": "YulBlock",
															"src": "962:116:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "977:15:12",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "991:1:12",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "981:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1006:62:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1040:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1051:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1036:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1036:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1060:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bytes4",
																			"nodeType": "YulIdentifier",
																			"src": "1016:19:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1016:52:12"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "1006:6:12"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "793:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "804:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "816:6:12",
														"type": ""
													}
												],
												"src": "758:327:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1133:48:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1143:32:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1168:5:12"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "1161:6:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1161:13:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1154:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1154:21:12"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "1143:7:12"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1115:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "1125:7:12",
														"type": ""
													}
												],
												"src": "1091:90:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1246:50:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1263:3:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1283:5:12"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bool",
																			"nodeType": "YulIdentifier",
																			"src": "1268:14:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1268:21:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1256:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1256:34:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1256:34:12"
														}
													]
												},
												"name": "abi_encode_t_bool_to_t_bool_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1234:5:12",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "1241:3:12",
														"type": ""
													}
												],
												"src": "1187:109:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1394:118:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1404:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1416:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1427:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1412:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1412:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1404:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1478:6:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1491:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1502:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1487:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1487:17:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bool_to_t_bool_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "1440:37:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1440:65:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1440:65:12"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1366:9:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1378:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1389:4:12",
														"type": ""
													}
												],
												"src": "1302:210:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1577:40:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1588:22:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1604:5:12"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1598:5:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1598:12:12"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "1588:6:12"
																}
															]
														}
													]
												},
												"name": "array_length_t_string_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1560:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "1570:6:12",
														"type": ""
													}
												],
												"src": "1518:99:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1719:73:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1736:3:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1741:6:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1729:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1729:19:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1729:19:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1757:29:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1776:3:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1781:4:12",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1772:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1772:14:12"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "1757:11:12"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "1691:3:12",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "1696:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "1707:11:12",
														"type": ""
													}
												],
												"src": "1623:169:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1847:258:12",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1857:10:12",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1866:1:12",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "1861:1:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1926:63:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "1951:3:12"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "1956:1:12"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "1947:3:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1947:11:12"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "1970:3:12"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "1975:1:12"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "1966:3:12"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1966:11:12"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "1960:5:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1960:18:12"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1940:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1940:39:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1940:39:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "1887:1:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1890:6:12"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "1884:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "1884:13:12"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "1898:19:12",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "1900:15:12",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "1909:1:12"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1912:2:12",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "1905:3:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1905:10:12"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "1900:1:12"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "1880:3:12",
																"statements": []
															},
															"src": "1876:113:12"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2023:76:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "2073:3:12"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "2078:6:12"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "2069:3:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2069:16:12"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2087:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2062:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2062:27:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2062:27:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "2004:1:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2007:6:12"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2001:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2001:13:12"
															},
															"nodeType": "YulIf",
															"src": "1998:101:12"
														}
													]
												},
												"name": "copy_memory_to_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "1829:3:12",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "1834:3:12",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "1839:6:12",
														"type": ""
													}
												],
												"src": "1798:307:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2159:54:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2169:38:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2187:5:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2194:2:12",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2183:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2183:14:12"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2203:2:12",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "2199:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2199:7:12"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "2179:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2179:28:12"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "2169:6:12"
																}
															]
														}
													]
												},
												"name": "round_up_to_mul_of_32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2142:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nodeType": "YulTypedName",
														"src": "2152:6:12",
														"type": ""
													}
												],
												"src": "2111:102:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2311:272:12",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2321:53:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2368:5:12"
																	}
																],
																"functionName": {
																	"name": "array_length_t_string_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "2335:32:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2335:39:12"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "2325:6:12",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2383:78:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2449:3:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2454:6:12"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "2390:58:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2390:71:12"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "2383:3:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2496:5:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2503:4:12",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2492:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2492:16:12"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2510:3:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2515:6:12"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "2470:21:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2470:52:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2470:52:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2531:46:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2542:3:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "2569:6:12"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nodeType": "YulIdentifier",
																			"src": "2547:21:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2547:29:12"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2538:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2538:39:12"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "2531:3:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2292:5:12",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "2299:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "2307:3:12",
														"type": ""
													}
												],
												"src": "2219:364:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2707:195:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2717:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2729:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2740:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2725:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2725:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2717:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2764:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2775:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2760:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2760:17:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "2783:4:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2789:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2779:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2779:20:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2753:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2753:47:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2753:47:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2809:86:12",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2881:6:12"
																	},
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "2890:4:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "2817:63:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "2817:78:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2809:4:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2679:9:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2691:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2702:4:12",
														"type": ""
													}
												],
												"src": "2589:313:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2953:32:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2963:16:12",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "2974:5:12"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "2963:7:12"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2935:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "2945:7:12",
														"type": ""
													}
												],
												"src": "2908:77:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3034:79:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3091:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3100:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3103:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3093:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3093:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3093:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3057:5:12"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "3082:5:12"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nodeType": "YulIdentifier",
																					"src": "3064:17:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3064:24:12"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "3054:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3054:35:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3047:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3047:43:12"
															},
															"nodeType": "YulIf",
															"src": "3044:63:12"
														}
													]
												},
												"name": "validator_revert_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3027:5:12",
														"type": ""
													}
												],
												"src": "2991:122:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3171:87:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3181:29:12",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "3203:6:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3190:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3190:20:12"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "3181:5:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3246:5:12"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "3219:26:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3219:33:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3219:33:12"
														}
													]
												},
												"name": "abi_decode_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "3149:6:12",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "3157:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3165:5:12",
														"type": ""
													}
												],
												"src": "3119:139:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3330:263:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3376:83:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "3378:77:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3378:79:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3378:79:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3351:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3360:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3347:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3347:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3372:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3343:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3343:32:12"
															},
															"nodeType": "YulIf",
															"src": "3340:119:12"
														},
														{
															"nodeType": "YulBlock",
															"src": "3469:117:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "3484:15:12",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3498:1:12",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "3488:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3513:63:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "3548:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "3559:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3544:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3544:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3568:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "3523:20:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3523:53:12"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "3513:6:12"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3300:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3311:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3323:6:12",
														"type": ""
													}
												],
												"src": "3264:329:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3644:81:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3654:65:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3669:5:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3676:42:12",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "3665:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3665:54:12"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "3654:7:12"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3626:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "3636:7:12",
														"type": ""
													}
												],
												"src": "3599:126:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3776:51:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3786:35:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3815:5:12"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "3797:17:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3797:24:12"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "3786:7:12"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3758:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "3768:7:12",
														"type": ""
													}
												],
												"src": "3731:96:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3898:53:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3915:3:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3938:5:12"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "3920:17:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3920:24:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3908:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "3908:37:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3908:37:12"
														}
													]
												},
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3886:5:12",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3893:3:12",
														"type": ""
													}
												],
												"src": "3833:118:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4055:124:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4065:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4077:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4088:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4073:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4073:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4065:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "4145:6:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4158:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4169:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4154:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4154:17:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "4101:43:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4101:71:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4101:71:12"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4027:9:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4039:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4050:4:12",
														"type": ""
													}
												],
												"src": "3957:222:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4228:79:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4285:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4294:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4297:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4287:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4287:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4287:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "4251:5:12"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "4276:5:12"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "4258:17:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4258:24:12"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "4248:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4248:35:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "4241:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4241:43:12"
															},
															"nodeType": "YulIf",
															"src": "4238:63:12"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4221:5:12",
														"type": ""
													}
												],
												"src": "4185:122:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4365:87:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4375:29:12",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "4397:6:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "4384:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4384:20:12"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "4375:5:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "4440:5:12"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "4413:26:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4413:33:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4413:33:12"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "4343:6:12",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "4351:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4359:5:12",
														"type": ""
													}
												],
												"src": "4313:139:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4541:391:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4587:83:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "4589:77:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4589:79:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4589:79:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4562:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4571:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4558:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4558:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4583:2:12",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "4554:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "4554:32:12"
															},
															"nodeType": "YulIf",
															"src": "4551:119:12"
														},
														{
															"nodeType": "YulBlock",
															"src": "4680:117:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "4695:15:12",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4709:1:12",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "4699:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4724:63:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "4759:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "4770:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4755:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4755:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4779:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "4734:20:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4734:53:12"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "4724:6:12"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "4807:118:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "4822:16:12",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4836:2:12",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "4826:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4852:63:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "4887:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "4898:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4883:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4883:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4907:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "4862:20:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4862:53:12"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "4852:6:12"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4503:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "4514:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4526:6:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "4534:6:12",
														"type": ""
													}
												],
												"src": "4458:474:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5003:53:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5020:3:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "5043:5:12"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "5025:17:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5025:24:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5013:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5013:37:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5013:37:12"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4991:5:12",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "4998:3:12",
														"type": ""
													}
												],
												"src": "4938:118:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5160:124:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5170:26:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5182:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5193:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5178:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5178:18:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5170:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "5250:6:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5263:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5274:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5259:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5259:17:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "5206:43:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5206:71:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5206:71:12"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5132:9:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5144:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5155:4:12",
														"type": ""
													}
												],
												"src": "5062:222:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5390:519:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5436:83:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "5438:77:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5438:79:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5438:79:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5411:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5420:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5407:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5407:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5432:2:12",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "5403:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5403:32:12"
															},
															"nodeType": "YulIf",
															"src": "5400:119:12"
														},
														{
															"nodeType": "YulBlock",
															"src": "5529:117:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "5544:15:12",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5558:1:12",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "5548:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "5573:63:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "5608:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "5619:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5604:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5604:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5628:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "5583:20:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5583:53:12"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "5573:6:12"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "5656:118:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "5671:16:12",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5685:2:12",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "5675:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "5701:63:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "5736:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "5747:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5732:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5732:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5756:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "5711:20:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5711:53:12"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "5701:6:12"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "5784:118:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "5799:16:12",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5813:2:12",
																		"type": "",
																		"value": "64"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "5803:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "5829:63:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "5864:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "5875:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5860:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5860:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5884:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "5839:20:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5839:53:12"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nodeType": "YulIdentifier",
																			"src": "5829:6:12"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5344:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "5355:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5367:6:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "5375:6:12",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "5383:6:12",
														"type": ""
													}
												],
												"src": "5290:619:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5981:263:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6027:83:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "6029:77:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6029:79:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6029:79:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "6002:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6011:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5998:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5998:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6023:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "5994:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "5994:32:12"
															},
															"nodeType": "YulIf",
															"src": "5991:119:12"
														},
														{
															"nodeType": "YulBlock",
															"src": "6120:117:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "6135:15:12",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6149:1:12",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "6139:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "6164:63:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "6199:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "6210:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "6195:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6195:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "6219:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "6174:20:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6174:53:12"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "6164:6:12"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5951:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "5962:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5974:6:12",
														"type": ""
													}
												],
												"src": "5915:329:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6290:76:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6344:16:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6353:1:12",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6356:1:12",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "6346:6:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6346:12:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6346:12:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "6313:5:12"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "6335:5:12"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_bool",
																					"nodeType": "YulIdentifier",
																					"src": "6320:14:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6320:21:12"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "6310:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6310:32:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "6303:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6303:40:12"
															},
															"nodeType": "YulIf",
															"src": "6300:60:12"
														}
													]
												},
												"name": "validator_revert_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "6283:5:12",
														"type": ""
													}
												],
												"src": "6250:116:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6421:84:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6431:29:12",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "6453:6:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "6440:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6440:20:12"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "6431:5:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "6493:5:12"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_bool",
																	"nodeType": "YulIdentifier",
																	"src": "6469:23:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6469:30:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6469:30:12"
														}
													]
												},
												"name": "abi_decode_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "6399:6:12",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "6407:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "6415:5:12",
														"type": ""
													}
												],
												"src": "6372:133:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6591:388:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6637:83:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "6639:77:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6639:79:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6639:79:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "6612:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6621:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "6608:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6608:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6633:2:12",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "6604:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "6604:32:12"
															},
															"nodeType": "YulIf",
															"src": "6601:119:12"
														},
														{
															"nodeType": "YulBlock",
															"src": "6730:117:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "6745:15:12",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6759:1:12",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "6749:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "6774:63:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "6809:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "6820:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "6805:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6805:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "6829:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "6784:20:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6784:53:12"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "6774:6:12"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "6857:115:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "6872:16:12",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6886:2:12",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "6876:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "6902:60:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "6934:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "6945:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "6930:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6930:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "6954:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bool",
																			"nodeType": "YulIdentifier",
																			"src": "6912:17:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6912:50:12"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "6902:6:12"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6553:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "6564:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6576:6:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "6584:6:12",
														"type": ""
													}
												],
												"src": "6511:468:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7074:28:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7091:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7094:1:12",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "7084:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7084:12:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7084:12:12"
														}
													]
												},
												"name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
												"nodeType": "YulFunctionDefinition",
												"src": "6985:117:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7197:28:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7214:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7217:1:12",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "7207:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7207:12:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7207:12:12"
														}
													]
												},
												"name": "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
												"nodeType": "YulFunctionDefinition",
												"src": "7108:117:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7259:152:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7276:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7279:77:12",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7269:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7269:88:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7269:88:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7373:1:12",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7376:4:12",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7366:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7366:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7366:15:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7397:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7400:4:12",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "7390:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7390:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7390:15:12"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "7231:180:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7460:238:12",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7470:58:12",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "7492:6:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "size",
																				"nodeType": "YulIdentifier",
																				"src": "7522:4:12"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nodeType": "YulIdentifier",
																			"src": "7500:21:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7500:27:12"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7488:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7488:40:12"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "7474:10:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7639:22:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "7641:16:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7641:18:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7641:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "7582:10:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7594:18:12",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "7579:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7579:34:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "7618:10:12"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "7630:6:12"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "7615:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7615:22:12"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "7576:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7576:62:12"
															},
															"nodeType": "YulIf",
															"src": "7573:88:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7677:2:12",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "7681:10:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7670:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7670:22:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7670:22:12"
														}
													]
												},
												"name": "finalize_allocation",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "7446:6:12",
														"type": ""
													},
													{
														"name": "size",
														"nodeType": "YulTypedName",
														"src": "7454:4:12",
														"type": ""
													}
												],
												"src": "7417:281:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7745:88:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7755:30:12",
															"value": {
																"arguments": [],
																"functionName": {
																	"name": "allocate_unbounded",
																	"nodeType": "YulIdentifier",
																	"src": "7765:18:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7765:20:12"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "7755:6:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "7814:6:12"
																	},
																	{
																		"name": "size",
																		"nodeType": "YulIdentifier",
																		"src": "7822:4:12"
																	}
																],
																"functionName": {
																	"name": "finalize_allocation",
																	"nodeType": "YulIdentifier",
																	"src": "7794:19:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7794:33:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7794:33:12"
														}
													]
												},
												"name": "allocate_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "size",
														"nodeType": "YulTypedName",
														"src": "7729:4:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "7738:6:12",
														"type": ""
													}
												],
												"src": "7704:129:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7905:241:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8010:22:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "8012:16:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8012:18:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8012:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "7982:6:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7990:18:12",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "7979:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "7979:30:12"
															},
															"nodeType": "YulIf",
															"src": "7976:56:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8042:37:12",
															"value": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "8072:6:12"
																	}
																],
																"functionName": {
																	"name": "round_up_to_mul_of_32",
																	"nodeType": "YulIdentifier",
																	"src": "8050:21:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8050:29:12"
															},
															"variableNames": [
																{
																	"name": "size",
																	"nodeType": "YulIdentifier",
																	"src": "8042:4:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "8116:23:12",
															"value": {
																"arguments": [
																	{
																		"name": "size",
																		"nodeType": "YulIdentifier",
																		"src": "8128:4:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8134:4:12",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8124:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8124:15:12"
															},
															"variableNames": [
																{
																	"name": "size",
																	"nodeType": "YulIdentifier",
																	"src": "8116:4:12"
																}
															]
														}
													]
												},
												"name": "array_allocation_size_t_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "7889:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "size",
														"nodeType": "YulTypedName",
														"src": "7900:4:12",
														"type": ""
													}
												],
												"src": "7839:307:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8203:103:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "dst",
																		"nodeType": "YulIdentifier",
																		"src": "8226:3:12"
																	},
																	{
																		"name": "src",
																		"nodeType": "YulIdentifier",
																		"src": "8231:3:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "8236:6:12"
																	}
																],
																"functionName": {
																	"name": "calldatacopy",
																	"nodeType": "YulIdentifier",
																	"src": "8213:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8213:30:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8213:30:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dst",
																				"nodeType": "YulIdentifier",
																				"src": "8284:3:12"
																			},
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "8289:6:12"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8280:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8280:16:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8298:1:12",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8273:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8273:27:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8273:27:12"
														}
													]
												},
												"name": "copy_calldata_to_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "8185:3:12",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "8190:3:12",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "8195:6:12",
														"type": ""
													}
												],
												"src": "8152:154:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8395:327:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8405:74:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "8471:6:12"
																			}
																		],
																		"functionName": {
																			"name": "array_allocation_size_t_bytes_memory_ptr",
																			"nodeType": "YulIdentifier",
																			"src": "8430:40:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8430:48:12"
																	}
																],
																"functionName": {
																	"name": "allocate_memory",
																	"nodeType": "YulIdentifier",
																	"src": "8414:15:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8414:65:12"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "8405:5:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "array",
																		"nodeType": "YulIdentifier",
																		"src": "8495:5:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "8502:6:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8488:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8488:21:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8488:21:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8518:27:12",
															"value": {
																"arguments": [
																	{
																		"name": "array",
																		"nodeType": "YulIdentifier",
																		"src": "8533:5:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8540:4:12",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8529:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8529:16:12"
															},
															"variables": [
																{
																	"name": "dst",
																	"nodeType": "YulTypedName",
																	"src": "8522:3:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8583:83:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
																				"nodeType": "YulIdentifier",
																				"src": "8585:77:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8585:79:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8585:79:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "src",
																				"nodeType": "YulIdentifier",
																				"src": "8564:3:12"
																			},
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "8569:6:12"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8560:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8560:16:12"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "8578:3:12"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "8557:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8557:25:12"
															},
															"nodeType": "YulIf",
															"src": "8554:112:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "src",
																		"nodeType": "YulIdentifier",
																		"src": "8699:3:12"
																	},
																	{
																		"name": "dst",
																		"nodeType": "YulIdentifier",
																		"src": "8704:3:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "8709:6:12"
																	}
																],
																"functionName": {
																	"name": "copy_calldata_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "8675:23:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8675:41:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8675:41:12"
														}
													]
												},
												"name": "abi_decode_available_length_t_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "8368:3:12",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "8373:6:12",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "8381:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "8389:5:12",
														"type": ""
													}
												],
												"src": "8312:410:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8802:277:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8851:83:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
																				"nodeType": "YulIdentifier",
																				"src": "8853:77:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8853:79:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8853:79:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "8830:6:12"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8838:4:12",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "8826:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8826:17:12"
																			},
																			{
																				"name": "end",
																				"nodeType": "YulIdentifier",
																				"src": "8845:3:12"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "8822:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8822:27:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "8815:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8815:35:12"
															},
															"nodeType": "YulIf",
															"src": "8812:122:12"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8943:34:12",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "8970:6:12"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "8957:12:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8957:20:12"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "8947:6:12",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "8986:87:12",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "9046:6:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9054:4:12",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9042:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9042:17:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "9061:6:12"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "9069:3:12"
																	}
																],
																"functionName": {
																	"name": "abi_decode_available_length_t_bytes_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "8995:46:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "8995:78:12"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "8986:5:12"
																}
															]
														}
													]
												},
												"name": "abi_decode_t_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "8780:6:12",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "8788:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "8796:5:12",
														"type": ""
													}
												],
												"src": "8741:338:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9211:817:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9258:83:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "9260:77:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9260:79:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9260:79:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "9232:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9241:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "9228:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9228:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9253:3:12",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "9224:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "9224:33:12"
															},
															"nodeType": "YulIf",
															"src": "9221:120:12"
														},
														{
															"nodeType": "YulBlock",
															"src": "9351:117:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "9366:15:12",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9380:1:12",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "9370:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "9395:63:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "9430:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "9441:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "9426:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "9426:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "9450:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "9405:20:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9405:53:12"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "9395:6:12"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "9478:118:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "9493:16:12",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9507:2:12",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "9497:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "9523:63:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "9558:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "9569:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "9554:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "9554:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "9578:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "9533:20:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9533:53:12"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "9523:6:12"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "9606:118:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "9621:16:12",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9635:2:12",
																		"type": "",
																		"value": "64"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "9625:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "9651:63:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "9686:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "9697:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "9682:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "9682:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "9706:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "9661:20:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9661:53:12"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nodeType": "YulIdentifier",
																			"src": "9651:6:12"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "9734:287:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "9749:46:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "9780:9:12"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "9791:2:12",
																						"type": "",
																						"value": "96"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "9776:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "9776:18:12"
																			}
																		],
																		"functionName": {
																			"name": "calldataload",
																			"nodeType": "YulIdentifier",
																			"src": "9763:12:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9763:32:12"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "9753:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "9842:83:12",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [],
																					"functionName": {
																						"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
																						"nodeType": "YulIdentifier",
																						"src": "9844:77:12"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "9844:79:12"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "9844:79:12"
																			}
																		]
																	},
																	"condition": {
																		"arguments": [
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "9814:6:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9822:18:12",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "9811:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9811:30:12"
																	},
																	"nodeType": "YulIf",
																	"src": "9808:117:12"
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "9939:72:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "9983:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "9994:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "9979:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "9979:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "10003:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bytes_memory_ptr",
																			"nodeType": "YulIdentifier",
																			"src": "9949:29:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9949:62:12"
																	},
																	"variableNames": [
																		{
																			"name": "value3",
																			"nodeType": "YulIdentifier",
																			"src": "9939:6:12"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9157:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "9168:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "9180:6:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "9188:6:12",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "9196:6:12",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "9204:6:12",
														"type": ""
													}
												],
												"src": "9085:943:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10117:391:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10163:83:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "10165:77:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10165:79:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "10165:79:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "10138:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10147:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "10134:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10134:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10159:2:12",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "10130:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "10130:32:12"
															},
															"nodeType": "YulIf",
															"src": "10127:119:12"
														},
														{
															"nodeType": "YulBlock",
															"src": "10256:117:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "10271:15:12",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10285:1:12",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "10275:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "10300:63:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "10335:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "10346:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "10331:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10331:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "10355:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "10310:20:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10310:53:12"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "10300:6:12"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "10383:118:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "10398:16:12",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10412:2:12",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "10402:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "10428:63:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "10463:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "10474:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "10459:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10459:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "10483:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "10438:20:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10438:53:12"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "10428:6:12"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10079:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "10090:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "10102:6:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "10110:6:12",
														"type": ""
													}
												],
												"src": "10034:474:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10542:152:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10559:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10562:77:12",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10552:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "10552:88:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10552:88:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10656:1:12",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10659:4:12",
																		"type": "",
																		"value": "0x22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10649:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "10649:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10649:15:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10680:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10683:4:12",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "10673:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "10673:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10673:15:12"
														}
													]
												},
												"name": "panic_error_0x22",
												"nodeType": "YulFunctionDefinition",
												"src": "10514:180:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10751:269:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10761:22:12",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "10775:4:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10781:1:12",
																		"type": "",
																		"value": "2"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "10771:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "10771:12:12"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "10761:6:12"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "10792:38:12",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "10822:4:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10828:1:12",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "10818:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "10818:12:12"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "10796:18:12",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10869:51:12",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "10883:27:12",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "10897:6:12"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "10905:4:12",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "10893:3:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10893:17:12"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "10883:6:12"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "10849:18:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "10842:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "10842:26:12"
															},
															"nodeType": "YulIf",
															"src": "10839:81:12"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10972:42:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x22",
																				"nodeType": "YulIdentifier",
																				"src": "10986:16:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10986:18:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "10986:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "10936:18:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "10959:6:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10967:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "10956:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10956:14:12"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "10933:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "10933:38:12"
															},
															"nodeType": "YulIf",
															"src": "10930:84:12"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "10735:4:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "10744:6:12",
														"type": ""
													}
												],
												"src": "10700:320:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11140:34:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11150:18:12",
															"value": {
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "11165:3:12"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "11150:11:12"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "11112:3:12",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "11117:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "11128:11:12",
														"type": ""
													}
												],
												"src": "11026:148:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11290:267:12",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "11300:53:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "11347:5:12"
																	}
																],
																"functionName": {
																	"name": "array_length_t_string_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "11314:32:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "11314:39:12"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "11304:6:12",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "11362:96:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "11446:3:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "11451:6:12"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11369:76:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "11369:89:12"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "11362:3:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "11493:5:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11500:4:12",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11489:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11489:16:12"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "11507:3:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "11512:6:12"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "11467:21:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "11467:52:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11467:52:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11528:23:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "11539:3:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "11544:6:12"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11535:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "11535:16:12"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "11528:3:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "11271:5:12",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "11278:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "11286:3:12",
														"type": ""
													}
												],
												"src": "11180:377:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11747:251:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11758:102:12",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "11847:6:12"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "11856:3:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11765:81:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "11765:95:12"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "11758:3:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "11870:102:12",
															"value": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "11959:6:12"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "11968:3:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11877:81:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "11877:95:12"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "11870:3:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "11982:10:12",
															"value": {
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "11989:3:12"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "11982:3:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "11718:3:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "11724:6:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "11732:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "11743:3:12",
														"type": ""
													}
												],
												"src": "11563:435:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12032:152:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12049:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12052:77:12",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12042:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "12042:88:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12042:88:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12146:1:12",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12149:4:12",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12139:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "12139:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12139:15:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12170:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12173:4:12",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "12163:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "12163:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12163:15:12"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "12004:180:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12235:146:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12245:25:12",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "12268:1:12"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "12250:17:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "12250:20:12"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "12245:1:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "12279:25:12",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "12302:1:12"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "12284:17:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "12284:20:12"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "12279:1:12"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "12326:22:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "12328:16:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12328:18:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "12328:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "12320:1:12"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "12323:1:12"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "12317:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "12317:8:12"
															},
															"nodeType": "YulIf",
															"src": "12314:34:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12358:17:12",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "12370:1:12"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "12373:1:12"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "12366:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "12366:9:12"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "12358:4:12"
																}
															]
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "12221:1:12",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "12224:1:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "12230:4:12",
														"type": ""
													}
												],
												"src": "12190:191:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12435:300:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12445:25:12",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "12468:1:12"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "12450:17:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "12450:20:12"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "12445:1:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "12479:25:12",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "12502:1:12"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "12484:17:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "12484:20:12"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "12479:1:12"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "12677:22:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "12679:16:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12679:18:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "12679:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "12589:1:12"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "12582:6:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "12582:9:12"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "12575:6:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12575:17:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "12597:1:12"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "12604:66:12",
																						"type": "",
																						"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																					},
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "12672:1:12"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "12600:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "12600:74:12"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "12594:2:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12594:81:12"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "12571:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "12571:105:12"
															},
															"nodeType": "YulIf",
															"src": "12568:131:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12709:20:12",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "12724:1:12"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "12727:1:12"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "12720:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "12720:9:12"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "12709:7:12"
																}
															]
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "12418:1:12",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "12421:1:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "12427:7:12",
														"type": ""
													}
												],
												"src": "12387:348:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12785:261:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12795:25:12",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "12818:1:12"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "12800:17:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "12800:20:12"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "12795:1:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "12829:25:12",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "12852:1:12"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "12834:17:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "12834:20:12"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "12829:1:12"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "12992:22:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "12994:16:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12994:18:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "12994:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "12913:1:12"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12920:66:12",
																				"type": "",
																				"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "12988:1:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "12916:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12916:74:12"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "12910:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "12910:81:12"
															},
															"nodeType": "YulIf",
															"src": "12907:107:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13024:16:12",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "13035:1:12"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "13038:1:12"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13031:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "13031:9:12"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "13024:3:12"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "12772:1:12",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "12775:1:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "12781:3:12",
														"type": ""
													}
												],
												"src": "12741:305:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13110:40:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "13121:22:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "13137:5:12"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "13131:5:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "13131:12:12"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "13121:6:12"
																}
															]
														}
													]
												},
												"name": "array_length_t_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "13093:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "13103:6:12",
														"type": ""
													}
												],
												"src": "13052:98:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13251:73:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "13268:3:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "13273:6:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13261:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "13261:19:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13261:19:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13289:29:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "13308:3:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13313:4:12",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13304:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "13304:14:12"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "13289:11:12"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "13223:3:12",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "13228:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "13239:11:12",
														"type": ""
													}
												],
												"src": "13156:168:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13420:270:12",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "13430:52:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "13476:5:12"
																	}
																],
																"functionName": {
																	"name": "array_length_t_bytes_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "13444:31:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "13444:38:12"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "13434:6:12",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "13491:77:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "13556:3:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "13561:6:12"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "13498:57:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "13498:70:12"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "13491:3:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "13603:5:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13610:4:12",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13599:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13599:16:12"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "13617:3:12"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "13622:6:12"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "13577:21:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "13577:52:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13577:52:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13638:46:12",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "13649:3:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "13676:6:12"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nodeType": "YulIdentifier",
																			"src": "13654:21:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13654:29:12"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13645:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "13645:39:12"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "13638:3:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "13401:5:12",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "13408:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "13416:3:12",
														"type": ""
													}
												],
												"src": "13330:360:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13896:440:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "13906:27:12",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13918:9:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13929:3:12",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13914:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "13914:19:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13906:4:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "13987:6:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14000:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14011:1:12",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13996:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13996:17:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "13943:43:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "13943:71:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13943:71:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "14068:6:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14081:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14092:2:12",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14077:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14077:18:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "14024:43:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "14024:72:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14024:72:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "14150:6:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14163:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14174:2:12",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14159:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14159:18:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "14106:43:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "14106:72:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14106:72:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14199:9:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14210:2:12",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14195:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14195:18:12"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "14219:4:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14225:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "14215:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14215:20:12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14188:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "14188:48:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14188:48:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "14245:84:12",
															"value": {
																"arguments": [
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "14315:6:12"
																	},
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "14324:4:12"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "14253:61:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "14253:76:12"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "14245:4:12"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "13844:9:12",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "13856:6:12",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "13864:6:12",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "13872:6:12",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "13880:6:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "13891:4:12",
														"type": ""
													}
												],
												"src": "13696:640:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14404:79:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "14414:22:12",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "14429:6:12"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "14423:5:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "14423:13:12"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "14414:5:12"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "14471:5:12"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_bytes4",
																	"nodeType": "YulIdentifier",
																	"src": "14445:25:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "14445:32:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14445:32:12"
														}
													]
												},
												"name": "abi_decode_t_bytes4_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "14382:6:12",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "14390:3:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "14398:5:12",
														"type": ""
													}
												],
												"src": "14342:141:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14565:273:12",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "14611:83:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "14613:77:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "14613:79:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "14613:79:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "14586:7:12"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14595:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "14582:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14582:23:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14607:2:12",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "14578:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "14578:32:12"
															},
															"nodeType": "YulIf",
															"src": "14575:119:12"
														},
														{
															"nodeType": "YulBlock",
															"src": "14704:127:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "14719:15:12",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14733:1:12",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "14723:6:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "14748:73:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "14793:9:12"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "14804:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "14789:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "14789:22:12"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "14813:7:12"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bytes4_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "14758:30:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14758:63:12"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "14748:6:12"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes4_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "14535:9:12",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "14546:7:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "14558:6:12",
														"type": ""
													}
												],
												"src": "14489:349:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14887:190:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "14897:33:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "14924:5:12"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "14906:17:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "14906:24:12"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "14897:5:12"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "15020:22:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "15022:16:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "15022:18:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "15022:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "14945:5:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14952:66:12",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "14942:2:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "14942:77:12"
															},
															"nodeType": "YulIf",
															"src": "14939:103:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "15051:20:12",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "15062:5:12"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15069:1:12",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "15058:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "15058:13:12"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "15051:3:12"
																}
															]
														}
													]
												},
												"name": "increment_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "14873:5:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "14883:3:12",
														"type": ""
													}
												],
												"src": "14844:233:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15111:152:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15128:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15131:77:12",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15121:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "15121:88:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15121:88:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15225:1:12",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15228:4:12",
																		"type": "",
																		"value": "0x12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15218:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "15218:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15218:15:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15249:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15252:4:12",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "15242:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "15242:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15242:15:12"
														}
													]
												},
												"name": "panic_error_0x12",
												"nodeType": "YulFunctionDefinition",
												"src": "15083:180:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15311:143:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "15321:25:12",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "15344:1:12"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "15326:17:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "15326:20:12"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "15321:1:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "15355:25:12",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "15378:1:12"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "15360:17:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "15360:20:12"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "15355:1:12"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "15402:22:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x12",
																				"nodeType": "YulIdentifier",
																				"src": "15404:16:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "15404:18:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "15404:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "15399:1:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "15392:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "15392:9:12"
															},
															"nodeType": "YulIf",
															"src": "15389:35:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "15434:14:12",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "15443:1:12"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "15446:1:12"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "15439:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "15439:9:12"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "15434:1:12"
																}
															]
														}
													]
												},
												"name": "checked_div_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "15300:1:12",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "15303:1:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nodeType": "YulTypedName",
														"src": "15309:1:12",
														"type": ""
													}
												],
												"src": "15269:185:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15494:142:12",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "15504:25:12",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "15527:1:12"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "15509:17:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "15509:20:12"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "15504:1:12"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "15538:25:12",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "15561:1:12"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "15543:17:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "15543:20:12"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "15538:1:12"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "15585:22:12",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x12",
																				"nodeType": "YulIdentifier",
																				"src": "15587:16:12"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "15587:18:12"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "15587:18:12"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "15582:1:12"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "15575:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "15575:9:12"
															},
															"nodeType": "YulIf",
															"src": "15572:35:12"
														},
														{
															"nodeType": "YulAssignment",
															"src": "15616:14:12",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "15625:1:12"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "15628:1:12"
																	}
																],
																"functionName": {
																	"name": "mod",
																	"nodeType": "YulIdentifier",
																	"src": "15621:3:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "15621:9:12"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "15616:1:12"
																}
															]
														}
													]
												},
												"name": "mod_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "15483:1:12",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "15486:1:12",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nodeType": "YulTypedName",
														"src": "15492:1:12",
														"type": ""
													}
												],
												"src": "15460:176:12"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15670:152:12",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15687:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15690:77:12",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15680:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "15680:88:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15680:88:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15784:1:12",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15787:4:12",
																		"type": "",
																		"value": "0x32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15777:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "15777:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15777:15:12"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15808:1:12",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15811:4:12",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "15801:6:12"
																},
																"nodeType": "YulFunctionCall",
																"src": "15801:15:12"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15801:15:12"
														}
													]
												},
												"name": "panic_error_0x32",
												"nodeType": "YulFunctionDefinition",
												"src": "15642:180:12"
											}
										]
									},
									"contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_calldata_to_memory(src, dst, length) {\n        calldatacopy(dst, src, length)\n        // clear end\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory(src, dst, length)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        end := pos\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        if lt(x, y) { panic_error_0x11() }\n\n        diff := sub(x, y)\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x != 0 and y > (maxValue / x)\n        if and(iszero(iszero(x)), gt(y, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x))) { panic_error_0x11() }\n\n        product := mul(x, y)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x > (maxValue - y)\n        if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }\n\n        sum := add(x, y)\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value3,  tail)\n\n    }\n\n    function abi_decode_t_bytes4_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function checked_div_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n\n        r := div(x, y)\n    }\n\n    function mod_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n        r := mod(x, y)\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n}\n",
									"id": 12,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100f55760003560e01c806342842e0e11610097578063a22cb46511610066578063a22cb46514610298578063b88d4fde146102b4578063c87b56dd146102d0578063e985e9c514610300576100f5565b806342842e0e146101fe5780636352211e1461021a57806370a082311461024a57806395d89b411461027a576100f5565b8063095ea7b3116100d3578063095ea7b31461017857806318160ddd1461019457806323b872dd146101b2578063325b272a146101ce576100f5565b806301ffc9a7146100fa57806306fdde031461012a578063081812fc14610148575b600080fd5b610114600480360381019061010f91906118a8565b610330565b60405161012191906118f0565b60405180910390f35b610132610412565b60405161013f91906119a4565b60405180910390f35b610162600480360381019061015d91906119fc565b6104a4565b60405161016f9190611a6a565b60405180910390f35b610192600480360381019061018d9190611ab1565b610520565b005b61019c610624565b6040516101a99190611b00565b60405180910390f35b6101cc60048036038101906101c79190611b1b565b61063b565b005b6101e860048036038101906101e39190611b6e565b61064b565b6040516101f59190611b00565b60405180910390f35b61021860048036038101906102139190611b1b565b610746565b005b610234600480360381019061022f91906119fc565b610766565b6040516102419190611a6a565b60405180910390f35b610264600480360381019061025f9190611b6e565b61077c565b6040516102719190611b00565b60405180910390f35b61028261084b565b60405161028f91906119a4565b60405180910390f35b6102b260048036038101906102ad9190611bc7565b6108dd565b005b6102ce60048036038101906102c99190611d3c565b610a54565b005b6102ea60048036038101906102e591906119fc565b610acc565b6040516102f791906119a4565b60405180910390f35b61031a60048036038101906103159190611dbf565b610b6a565b60405161032791906118f0565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806103fb57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061040b575061040a82610bfe565b5b9050919050565b60606002805461042190611e2e565b80601f016020809104026020016040519081016040528092919081815260200182805461044d90611e2e565b801561049a5780601f1061046f5761010080835404028352916020019161049a565b820191906000526020600020905b81548152906001019060200180831161047d57829003601f168201915b5050505050905090565b60006104af82610c68565b6104e5576040517fcf4700e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6006600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061052b82610766565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610592576040517f943f7b8c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166105b1610cb6565b73ffffffffffffffffffffffffffffffffffffffff1614610614576105dd816105d8610cb6565b610b6a565b610613576040517fcfb3b94200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b61061f838383610cbe565b505050565b600061062e610d70565b6001546000540303905090565b610646838383610d79565b505050565b6000806106b2600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060018152602001908152602001600020544361122d90919063ffffffff16565b905060006106d1826106c38661077c565b61124390919063ffffffff16565b9050600061073982600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600281526020019081526020016000205461125990919063ffffffff16565b9050809350505050919050565b61076183838360405180602001604052806000815250610a54565b505050565b60006107718261126f565b600001519050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036107e3576040517f8f4eb60400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900467ffffffffffffffff1667ffffffffffffffff169050919050565b60606003805461085a90611e2e565b80601f016020809104026020016040519081016040528092919081815260200182805461088690611e2e565b80156108d35780601f106108a8576101008083540402835291602001916108d3565b820191906000526020600020905b8154815290600101906020018083116108b657829003601f168201915b5050505050905090565b6108e5610cb6565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610949576040517fb06307db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060076000610956610cb6565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16610a03610cb6565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610a4891906118f0565b60405180910390a35050565b610a5f848484610d79565b610a7e8373ffffffffffffffffffffffffffffffffffffffff166114fa565b15610ac657610a8f8484848461151d565b610ac5576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b50505050565b6060610ad782610c68565b610b0d576040517fa14c4b5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610b1761166d565b90506000815103610b375760405180602001604052806000815250610b62565b80610b418461168d565b604051602001610b52929190611e9b565b6040516020818303038152906040525b915050919050565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600081610c73610d70565b11158015610c82575060005482105b8015610caf575060046000838152602001908152602001600020600001601c9054906101000a900460ff16155b9050919050565b600033905090565b826006600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b60006001905090565b6000610d848261126f565b90508373ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff1614610def576040517fa114810000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008473ffffffffffffffffffffffffffffffffffffffff16610e10610cb6565b73ffffffffffffffffffffffffffffffffffffffff161480610e3f5750610e3e85610e39610cb6565b610b6a565b5b80610e845750610e4d610cb6565b73ffffffffffffffffffffffffffffffffffffffff16610e6c846104a4565b73ffffffffffffffffffffffffffffffffffffffff16145b905080610ebd576040517f59c896be00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610f23576040517fea553b3400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610f3085858560016117ed565b610f3c60008487610cbe565b6001600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282829054906101000a900467ffffffffffffffff160392506101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506001600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282829054906101000a900467ffffffffffffffff160192506101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506000600460008581526020019081526020016000209050848160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550428160000160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060006001850190506000600460008381526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036111bb5760005482146111ba57878160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084602001518160000160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b5b505050828473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461122685858560016117f3565b5050505050565b6000818361123b9190611eee565b905092915050565b600081836112519190611f22565b905092915050565b600081836112679190611f7c565b905092915050565b6112776117f9565b600082905080611285610d70565b116114c3576000548110156114c2576000600460008381526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160008201601c9054906101000a900460ff161515151581525050905080604001516114c057600073ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff16146113a45780925050506114f5565b5b6001156114bf57818060019003925050600460008381526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160008201601c9054906101000a900460ff1615151515815250509050600073ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff16146114ba5780925050506114f5565b6113a5565b5b505b5b6040517fdf2d9b4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60008373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611543610cb6565b8786866040518563ffffffff1660e01b81526004016115659493929190612027565b6020604051808303816000875af19250505080156115a157506040513d601f19601f8201168201806040525081019061159e9190612088565b60015b61161a573d80600081146115d1576040519150601f19603f3d011682016040523d82523d6000602084013e6115d6565b606091505b506000815103611612576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050949350505050565b60606040518060800160405280605181526020016121be60519139905090565b6060600082036116d4576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506117e8565b600082905060005b600082146117065780806116ef906120b5565b915050600a826116ff919061212c565b91506116dc565b60008167ffffffffffffffff81111561172257611721611c11565b5b6040519080825280601f01601f1916602001820160405280156117545781602001600182028036833780820191505090505b5090505b600085146117e15760018261176d9190611eee565b9150600a8561177c919061215d565b60306117889190611f7c565b60f81b81838151811061179e5761179d61218e565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856117da919061212c565b9450611758565b8093505050505b919050565b50505050565b50505050565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600067ffffffffffffffff1681526020016000151581525090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61188581611850565b811461189057600080fd5b50565b6000813590506118a28161187c565b92915050565b6000602082840312156118be576118bd611846565b5b60006118cc84828501611893565b91505092915050565b60008115159050919050565b6118ea816118d5565b82525050565b600060208201905061190560008301846118e1565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561194557808201518184015260208101905061192a565b83811115611954576000848401525b50505050565b6000601f19601f8301169050919050565b60006119768261190b565b6119808185611916565b9350611990818560208601611927565b6119998161195a565b840191505092915050565b600060208201905081810360008301526119be818461196b565b905092915050565b6000819050919050565b6119d9816119c6565b81146119e457600080fd5b50565b6000813590506119f6816119d0565b92915050565b600060208284031215611a1257611a11611846565b5b6000611a20848285016119e7565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611a5482611a29565b9050919050565b611a6481611a49565b82525050565b6000602082019050611a7f6000830184611a5b565b92915050565b611a8e81611a49565b8114611a9957600080fd5b50565b600081359050611aab81611a85565b92915050565b60008060408385031215611ac857611ac7611846565b5b6000611ad685828601611a9c565b9250506020611ae7858286016119e7565b9150509250929050565b611afa816119c6565b82525050565b6000602082019050611b156000830184611af1565b92915050565b600080600060608486031215611b3457611b33611846565b5b6000611b4286828701611a9c565b9350506020611b5386828701611a9c565b9250506040611b64868287016119e7565b9150509250925092565b600060208284031215611b8457611b83611846565b5b6000611b9284828501611a9c565b91505092915050565b611ba4816118d5565b8114611baf57600080fd5b50565b600081359050611bc181611b9b565b92915050565b60008060408385031215611bde57611bdd611846565b5b6000611bec85828601611a9c565b9250506020611bfd85828601611bb2565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611c498261195a565b810181811067ffffffffffffffff82111715611c6857611c67611c11565b5b80604052505050565b6000611c7b61183c565b9050611c878282611c40565b919050565b600067ffffffffffffffff821115611ca757611ca6611c11565b5b611cb08261195a565b9050602081019050919050565b82818337600083830152505050565b6000611cdf611cda84611c8c565b611c71565b905082815260208101848484011115611cfb57611cfa611c0c565b5b611d06848285611cbd565b509392505050565b600082601f830112611d2357611d22611c07565b5b8135611d33848260208601611ccc565b91505092915050565b60008060008060808587031215611d5657611d55611846565b5b6000611d6487828801611a9c565b9450506020611d7587828801611a9c565b9350506040611d86878288016119e7565b925050606085013567ffffffffffffffff811115611da757611da661184b565b5b611db387828801611d0e565b91505092959194509250565b60008060408385031215611dd657611dd5611846565b5b6000611de485828601611a9c565b9250506020611df585828601611a9c565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611e4657607f821691505b602082108103611e5957611e58611dff565b5b50919050565b600081905092915050565b6000611e758261190b565b611e7f8185611e5f565b9350611e8f818560208601611927565b80840191505092915050565b6000611ea78285611e6a565b9150611eb38284611e6a565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611ef9826119c6565b9150611f04836119c6565b925082821015611f1757611f16611ebf565b5b828203905092915050565b6000611f2d826119c6565b9150611f38836119c6565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611f7157611f70611ebf565b5b828202905092915050565b6000611f87826119c6565b9150611f92836119c6565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611fc757611fc6611ebf565b5b828201905092915050565b600081519050919050565b600082825260208201905092915050565b6000611ff982611fd2565b6120038185611fdd565b9350612013818560208601611927565b61201c8161195a565b840191505092915050565b600060808201905061203c6000830187611a5b565b6120496020830186611a5b565b6120566040830185611af1565b81810360608301526120688184611fee565b905095945050505050565b6000815190506120828161187c565b92915050565b60006020828403121561209e5761209d611846565b5b60006120ac84828501612073565b91505092915050565b60006120c0826119c6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036120f2576120f1611ebf565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612137826119c6565b9150612142836119c6565b925082612152576121516120fd565b5b828204905092915050565b6000612168826119c6565b9150612173836119c6565b925082612183576121826120fd565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfe68747470733a2f2f676174657761792e70696e6174612e636c6f75642f697066732f516d6648576b7454625354424e4c7777385a446832716335444b71695a63696b6e6f7137365a665872736f5231762fa26469706673582212200aa029e4dc520328a062fe60d2875c4d9b682beb4d6bf94f2a5bfb1d1219fe6064736f6c634300080d0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xF5 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x42842E0E GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x298 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x2B4 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x2D0 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x300 JUMPI PUSH2 0xF5 JUMP JUMPDEST DUP1 PUSH4 0x42842E0E EQ PUSH2 0x1FE JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x21A JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x24A JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x27A JUMPI PUSH2 0xF5 JUMP JUMPDEST DUP1 PUSH4 0x95EA7B3 GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x178 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x194 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1B2 JUMPI DUP1 PUSH4 0x325B272A EQ PUSH2 0x1CE JUMPI PUSH2 0xF5 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xFA JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x12A JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x148 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x114 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x10F SWAP2 SWAP1 PUSH2 0x18A8 JUMP JUMPDEST PUSH2 0x330 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x121 SWAP2 SWAP1 PUSH2 0x18F0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x132 PUSH2 0x412 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x13F SWAP2 SWAP1 PUSH2 0x19A4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x162 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x15D SWAP2 SWAP1 PUSH2 0x19FC JUMP JUMPDEST PUSH2 0x4A4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x16F SWAP2 SWAP1 PUSH2 0x1A6A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x192 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x18D SWAP2 SWAP1 PUSH2 0x1AB1 JUMP JUMPDEST PUSH2 0x520 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x19C PUSH2 0x624 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A9 SWAP2 SWAP1 PUSH2 0x1B00 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1CC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1C7 SWAP2 SWAP1 PUSH2 0x1B1B JUMP JUMPDEST PUSH2 0x63B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1E8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1E3 SWAP2 SWAP1 PUSH2 0x1B6E JUMP JUMPDEST PUSH2 0x64B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F5 SWAP2 SWAP1 PUSH2 0x1B00 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x218 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x213 SWAP2 SWAP1 PUSH2 0x1B1B JUMP JUMPDEST PUSH2 0x746 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x234 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x22F SWAP2 SWAP1 PUSH2 0x19FC JUMP JUMPDEST PUSH2 0x766 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x241 SWAP2 SWAP1 PUSH2 0x1A6A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x264 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x25F SWAP2 SWAP1 PUSH2 0x1B6E JUMP JUMPDEST PUSH2 0x77C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x271 SWAP2 SWAP1 PUSH2 0x1B00 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x282 PUSH2 0x84B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x28F SWAP2 SWAP1 PUSH2 0x19A4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2B2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2AD SWAP2 SWAP1 PUSH2 0x1BC7 JUMP JUMPDEST PUSH2 0x8DD JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2CE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2C9 SWAP2 SWAP1 PUSH2 0x1D3C JUMP JUMPDEST PUSH2 0xA54 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2EA PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2E5 SWAP2 SWAP1 PUSH2 0x19FC JUMP JUMPDEST PUSH2 0xACC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2F7 SWAP2 SWAP1 PUSH2 0x19A4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x31A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x315 SWAP2 SWAP1 PUSH2 0x1DBF JUMP JUMPDEST PUSH2 0xB6A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x327 SWAP2 SWAP1 PUSH2 0x18F0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x3FB JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x40B JUMPI POP PUSH2 0x40A DUP3 PUSH2 0xBFE JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD PUSH2 0x421 SWAP1 PUSH2 0x1E2E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x44D SWAP1 PUSH2 0x1E2E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x49A JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x46F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x49A JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x47D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4AF DUP3 PUSH2 0xC68 JUMP JUMPDEST PUSH2 0x4E5 JUMPI PUSH1 0x40 MLOAD PUSH32 0xCF4700E400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x6 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x52B DUP3 PUSH2 0x766 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x592 JUMPI PUSH1 0x40 MLOAD PUSH32 0x943F7B8C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x5B1 PUSH2 0xCB6 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x614 JUMPI PUSH2 0x5DD DUP2 PUSH2 0x5D8 PUSH2 0xCB6 JUMP JUMPDEST PUSH2 0xB6A JUMP JUMPDEST PUSH2 0x613 JUMPI PUSH1 0x40 MLOAD PUSH32 0xCFB3B94200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST PUSH2 0x61F DUP4 DUP4 DUP4 PUSH2 0xCBE JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x62E PUSH2 0xD70 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 SLOAD SUB SUB SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x646 DUP4 DUP4 DUP4 PUSH2 0xD79 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x6B2 PUSH1 0x8 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD NUMBER PUSH2 0x122D SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x6D1 DUP3 PUSH2 0x6C3 DUP7 PUSH2 0x77C JUMP JUMPDEST PUSH2 0x1243 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x739 DUP3 PUSH1 0x8 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH1 0x2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1259 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x761 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xA54 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x771 DUP3 PUSH2 0x126F JUMP JUMPDEST PUSH1 0x0 ADD MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x7E3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8F4EB60400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x5 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x85A SWAP1 PUSH2 0x1E2E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x886 SWAP1 PUSH2 0x1E2E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x8D3 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x8A8 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x8D3 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x8B6 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x8E5 PUSH2 0xCB6 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x949 JUMPI PUSH1 0x40 MLOAD PUSH32 0xB06307DB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x7 PUSH1 0x0 PUSH2 0x956 PUSH2 0xCB6 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xA03 PUSH2 0xCB6 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0xA48 SWAP2 SWAP1 PUSH2 0x18F0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0xA5F DUP5 DUP5 DUP5 PUSH2 0xD79 JUMP JUMPDEST PUSH2 0xA7E DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x14FA JUMP JUMPDEST ISZERO PUSH2 0xAC6 JUMPI PUSH2 0xA8F DUP5 DUP5 DUP5 DUP5 PUSH2 0x151D JUMP JUMPDEST PUSH2 0xAC5 JUMPI PUSH1 0x40 MLOAD PUSH32 0xD1A57ED600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xAD7 DUP3 PUSH2 0xC68 JUMP JUMPDEST PUSH2 0xB0D JUMPI PUSH1 0x40 MLOAD PUSH32 0xA14C4B5000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xB17 PUSH2 0x166D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0xB37 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xB62 JUMP JUMPDEST DUP1 PUSH2 0xB41 DUP5 PUSH2 0x168D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xB52 SWAP3 SWAP2 SWAP1 PUSH2 0x1E9B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0xC73 PUSH2 0xD70 JUMP JUMPDEST GT ISZERO DUP1 ISZERO PUSH2 0xC82 JUMPI POP PUSH1 0x0 SLOAD DUP3 LT JUMPDEST DUP1 ISZERO PUSH2 0xCAF JUMPI POP PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x1C SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP3 PUSH1 0x6 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD84 DUP3 PUSH2 0x126F JUMP JUMPDEST SWAP1 POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xDEF JUMPI PUSH1 0x40 MLOAD PUSH32 0xA114810000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xE10 PUSH2 0xCB6 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xE3F JUMPI POP PUSH2 0xE3E DUP6 PUSH2 0xE39 PUSH2 0xCB6 JUMP JUMPDEST PUSH2 0xB6A JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0xE84 JUMPI POP PUSH2 0xE4D PUSH2 0xCB6 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xE6C DUP5 PUSH2 0x4A4 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP1 POP DUP1 PUSH2 0xEBD JUMPI PUSH1 0x40 MLOAD PUSH32 0x59C896BE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xF23 JUMPI PUSH1 0x40 MLOAD PUSH32 0xEA553B3400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xF30 DUP6 DUP6 DUP6 PUSH1 0x1 PUSH2 0x17ED JUMP JUMPDEST PUSH2 0xF3C PUSH1 0x0 DUP5 DUP8 PUSH2 0xCBE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x5 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND SUB SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x5 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND ADD SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP DUP5 DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP TIMESTAMP DUP2 PUSH1 0x0 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x1 DUP6 ADD SWAP1 POP PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x11BB JUMPI PUSH1 0x0 SLOAD DUP3 EQ PUSH2 0x11BA JUMPI DUP8 DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP5 PUSH1 0x20 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST JUMPDEST POP POP POP DUP3 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x1226 DUP6 DUP6 DUP6 PUSH1 0x1 PUSH2 0x17F3 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 PUSH2 0x123B SWAP2 SWAP1 PUSH2 0x1EEE JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 PUSH2 0x1251 SWAP2 SWAP1 PUSH2 0x1F22 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 PUSH2 0x1267 SWAP2 SWAP1 PUSH2 0x1F7C JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1277 PUSH2 0x17F9 JUMP JUMPDEST PUSH1 0x0 DUP3 SWAP1 POP DUP1 PUSH2 0x1285 PUSH2 0xD70 JUMP JUMPDEST GT PUSH2 0x14C3 JUMPI PUSH1 0x0 SLOAD DUP2 LT ISZERO PUSH2 0x14C2 JUMPI PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x1C SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE POP POP SWAP1 POP DUP1 PUSH1 0x40 ADD MLOAD PUSH2 0x14C0 JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x13A4 JUMPI DUP1 SWAP3 POP POP POP PUSH2 0x14F5 JUMP JUMPDEST JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x14BF JUMPI DUP2 DUP1 PUSH1 0x1 SWAP1 SUB SWAP3 POP POP PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x1C SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x14BA JUMPI DUP1 SWAP3 POP POP POP PUSH2 0x14F5 JUMP JUMPDEST PUSH2 0x13A5 JUMP JUMPDEST JUMPDEST POP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xDF2D9B4200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x1543 PUSH2 0xCB6 JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1565 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2027 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x15A1 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x159E SWAP2 SWAP1 PUSH2 0x2088 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x161A JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x15D1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x15D6 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x1612 JUMPI PUSH1 0x40 MLOAD PUSH32 0xD1A57ED600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x51 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x21BE PUSH1 0x51 SWAP2 CODECOPY SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 SUB PUSH2 0x16D4 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 POP PUSH2 0x17E8 JUMP JUMPDEST PUSH1 0x0 DUP3 SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x0 DUP3 EQ PUSH2 0x1706 JUMPI DUP1 DUP1 PUSH2 0x16EF SWAP1 PUSH2 0x20B5 JUMP JUMPDEST SWAP2 POP POP PUSH1 0xA DUP3 PUSH2 0x16FF SWAP2 SWAP1 PUSH2 0x212C JUMP JUMPDEST SWAP2 POP PUSH2 0x16DC JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1722 JUMPI PUSH2 0x1721 PUSH2 0x1C11 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1754 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP JUMPDEST PUSH1 0x0 DUP6 EQ PUSH2 0x17E1 JUMPI PUSH1 0x1 DUP3 PUSH2 0x176D SWAP2 SWAP1 PUSH2 0x1EEE JUMP JUMPDEST SWAP2 POP PUSH1 0xA DUP6 PUSH2 0x177C SWAP2 SWAP1 PUSH2 0x215D JUMP JUMPDEST PUSH1 0x30 PUSH2 0x1788 SWAP2 SWAP1 PUSH2 0x1F7C JUMP JUMPDEST PUSH1 0xF8 SHL DUP2 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x179E JUMPI PUSH2 0x179D PUSH2 0x218E JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xA DUP6 PUSH2 0x17DA SWAP2 SWAP1 PUSH2 0x212C JUMP JUMPDEST SWAP5 POP PUSH2 0x1758 JUMP JUMPDEST DUP1 SWAP4 POP POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1885 DUP2 PUSH2 0x1850 JUMP JUMPDEST DUP2 EQ PUSH2 0x1890 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x18A2 DUP2 PUSH2 0x187C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x18BE JUMPI PUSH2 0x18BD PUSH2 0x1846 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x18CC DUP5 DUP3 DUP6 ADD PUSH2 0x1893 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x18EA DUP2 PUSH2 0x18D5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1905 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x18E1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1945 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x192A JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1954 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1976 DUP3 PUSH2 0x190B JUMP JUMPDEST PUSH2 0x1980 DUP2 DUP6 PUSH2 0x1916 JUMP JUMPDEST SWAP4 POP PUSH2 0x1990 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1927 JUMP JUMPDEST PUSH2 0x1999 DUP2 PUSH2 0x195A JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x19BE DUP2 DUP5 PUSH2 0x196B JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x19D9 DUP2 PUSH2 0x19C6 JUMP JUMPDEST DUP2 EQ PUSH2 0x19E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x19F6 DUP2 PUSH2 0x19D0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1A12 JUMPI PUSH2 0x1A11 PUSH2 0x1846 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1A20 DUP5 DUP3 DUP6 ADD PUSH2 0x19E7 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A54 DUP3 PUSH2 0x1A29 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1A64 DUP2 PUSH2 0x1A49 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1A7F PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1A5B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1A8E DUP2 PUSH2 0x1A49 JUMP JUMPDEST DUP2 EQ PUSH2 0x1A99 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1AAB DUP2 PUSH2 0x1A85 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1AC8 JUMPI PUSH2 0x1AC7 PUSH2 0x1846 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1AD6 DUP6 DUP3 DUP7 ADD PUSH2 0x1A9C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1AE7 DUP6 DUP3 DUP7 ADD PUSH2 0x19E7 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x1AFA DUP2 PUSH2 0x19C6 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1B15 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1AF1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1B34 JUMPI PUSH2 0x1B33 PUSH2 0x1846 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1B42 DUP7 DUP3 DUP8 ADD PUSH2 0x1A9C JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1B53 DUP7 DUP3 DUP8 ADD PUSH2 0x1A9C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1B64 DUP7 DUP3 DUP8 ADD PUSH2 0x19E7 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B84 JUMPI PUSH2 0x1B83 PUSH2 0x1846 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1B92 DUP5 DUP3 DUP6 ADD PUSH2 0x1A9C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1BA4 DUP2 PUSH2 0x18D5 JUMP JUMPDEST DUP2 EQ PUSH2 0x1BAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1BC1 DUP2 PUSH2 0x1B9B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1BDE JUMPI PUSH2 0x1BDD PUSH2 0x1846 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1BEC DUP6 DUP3 DUP7 ADD PUSH2 0x1A9C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1BFD DUP6 DUP3 DUP7 ADD PUSH2 0x1BB2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x1C49 DUP3 PUSH2 0x195A JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1C68 JUMPI PUSH2 0x1C67 PUSH2 0x1C11 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C7B PUSH2 0x183C JUMP JUMPDEST SWAP1 POP PUSH2 0x1C87 DUP3 DUP3 PUSH2 0x1C40 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1CA7 JUMPI PUSH2 0x1CA6 PUSH2 0x1C11 JUMP JUMPDEST JUMPDEST PUSH2 0x1CB0 DUP3 PUSH2 0x195A JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CDF PUSH2 0x1CDA DUP5 PUSH2 0x1C8C JUMP JUMPDEST PUSH2 0x1C71 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x1CFB JUMPI PUSH2 0x1CFA PUSH2 0x1C0C JUMP JUMPDEST JUMPDEST PUSH2 0x1D06 DUP5 DUP3 DUP6 PUSH2 0x1CBD JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1D23 JUMPI PUSH2 0x1D22 PUSH2 0x1C07 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1D33 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x1CCC JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1D56 JUMPI PUSH2 0x1D55 PUSH2 0x1846 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1D64 DUP8 DUP3 DUP9 ADD PUSH2 0x1A9C JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x1D75 DUP8 DUP3 DUP9 ADD PUSH2 0x1A9C JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x1D86 DUP8 DUP3 DUP9 ADD PUSH2 0x19E7 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1DA7 JUMPI PUSH2 0x1DA6 PUSH2 0x184B JUMP JUMPDEST JUMPDEST PUSH2 0x1DB3 DUP8 DUP3 DUP9 ADD PUSH2 0x1D0E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1DD6 JUMPI PUSH2 0x1DD5 PUSH2 0x1846 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1DE4 DUP6 DUP3 DUP7 ADD PUSH2 0x1A9C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1DF5 DUP6 DUP3 DUP7 ADD PUSH2 0x1A9C JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1E46 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1E59 JUMPI PUSH2 0x1E58 PUSH2 0x1DFF JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E75 DUP3 PUSH2 0x190B JUMP JUMPDEST PUSH2 0x1E7F DUP2 DUP6 PUSH2 0x1E5F JUMP JUMPDEST SWAP4 POP PUSH2 0x1E8F DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1927 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EA7 DUP3 DUP6 PUSH2 0x1E6A JUMP JUMPDEST SWAP2 POP PUSH2 0x1EB3 DUP3 DUP5 PUSH2 0x1E6A JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1EF9 DUP3 PUSH2 0x19C6 JUMP JUMPDEST SWAP2 POP PUSH2 0x1F04 DUP4 PUSH2 0x19C6 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x1F17 JUMPI PUSH2 0x1F16 PUSH2 0x1EBF JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F2D DUP3 PUSH2 0x19C6 JUMP JUMPDEST SWAP2 POP PUSH2 0x1F38 DUP4 PUSH2 0x19C6 JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x1F71 JUMPI PUSH2 0x1F70 PUSH2 0x1EBF JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F87 DUP3 PUSH2 0x19C6 JUMP JUMPDEST SWAP2 POP PUSH2 0x1F92 DUP4 PUSH2 0x19C6 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x1FC7 JUMPI PUSH2 0x1FC6 PUSH2 0x1EBF JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FF9 DUP3 PUSH2 0x1FD2 JUMP JUMPDEST PUSH2 0x2003 DUP2 DUP6 PUSH2 0x1FDD JUMP JUMPDEST SWAP4 POP PUSH2 0x2013 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1927 JUMP JUMPDEST PUSH2 0x201C DUP2 PUSH2 0x195A JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x203C PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x1A5B JUMP JUMPDEST PUSH2 0x2049 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x1A5B JUMP JUMPDEST PUSH2 0x2056 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1AF1 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x2068 DUP2 DUP5 PUSH2 0x1FEE JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2082 DUP2 PUSH2 0x187C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x209E JUMPI PUSH2 0x209D PUSH2 0x1846 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x20AC DUP5 DUP3 DUP6 ADD PUSH2 0x2073 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x20C0 DUP3 PUSH2 0x19C6 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x20F2 JUMPI PUSH2 0x20F1 PUSH2 0x1EBF JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2137 DUP3 PUSH2 0x19C6 JUMP JUMPDEST SWAP2 POP PUSH2 0x2142 DUP4 PUSH2 0x19C6 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x2152 JUMPI PUSH2 0x2151 PUSH2 0x20FD JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2168 DUP3 PUSH2 0x19C6 JUMP JUMPDEST SWAP2 POP PUSH2 0x2173 DUP4 PUSH2 0x19C6 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x2183 JUMPI PUSH2 0x2182 PUSH2 0x20FD JUMP JUMPDEST JUMPDEST DUP3 DUP3 MOD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID PUSH9 0x747470733A2F2F6761 PUSH21 0x657761792E70696E6174612E636C6F75642F697066 PUSH20 0x2F516D6648576B7454625354424E4C7777385A44 PUSH9 0x32716335444B71695A PUSH4 0x696B6E6F PUSH18 0x37365A665872736F5231762FA26469706673 PC 0x22 SLT KECCAK256 EXP LOG0 0x29 0xE4 0xDC MSTORE SUB 0x28 LOG0 PUSH3 0xFE60D2 DUP8 0x5C 0x4D SWAP12 PUSH9 0x2BEB4D6BF94F2A5BFB SAR SLT NOT INVALID PUSH1 0x64 PUSH20 0x6F6C634300080D00330000000000000000000000 ",
							"sourceMap": "1018:21855:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3971:305;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7086:100;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;8671:204;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;8233:372;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3211:312;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;9536:170;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2359:296;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;9777:185;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;6894:125;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4340:206;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7255:104;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;8947:287;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;10033:370;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;7430:318;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;9305:164;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3971:305;4073:4;4125:25;4110:40;;;:11;:40;;;;:105;;;;4182:33;4167:48;;;:11;:48;;;;4110:105;:158;;;;4232:36;4256:11;4232:23;:36::i;:::-;4110:158;4090:178;;3971:305;;;:::o;7086:100::-;7140:13;7173:5;7166:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7086:100;:::o;8671:204::-;8739:7;8764:16;8772:7;8764;:16::i;:::-;8759:64;;8789:34;;;;;;;;;;;;;;8759:64;8843:15;:24;8859:7;8843:24;;;;;;;;;;;;;;;;;;;;;8836:31;;8671:204;;;:::o;8233:372::-;8306:13;8322:24;8338:7;8322:15;:24::i;:::-;8306:40;;8367:5;8361:11;;:2;:11;;;8357:48;;8381:24;;;;;;;;;;;;;;8357:48;8438:5;8422:21;;:12;:10;:12::i;:::-;:21;;;8418:139;;8449:37;8466:5;8473:12;:10;:12::i;:::-;8449:16;:37::i;:::-;8445:112;;8510:35;;;;;;;;;;;;;;8445:112;8418:139;8569:28;8578:2;8582:7;8591:5;8569:8;:28::i;:::-;8295:310;8233:372;;:::o;3211:312::-;3264:7;3489:15;:13;:15::i;:::-;3474:12;;3458:13;;:28;:46;3451:53;;3211:312;:::o;9536:170::-;9670:28;9680:4;9686:2;9690:7;9670:9;:28::i;:::-;9536:170;;;:::o;2359:296::-;2412:7;2431:18;2452:38;2469:11;:17;2481:4;2469:17;;;;;;;;;;;;;;;:20;2487:1;2469:20;;;;;;;;;;;;2452:12;:16;;:38;;;;:::i;:::-;2431:59;;2501:15;2519:31;2539:10;2519:15;2529:4;2519:9;:15::i;:::-;:19;;:31;;;;:::i;:::-;2501:49;;2561:20;2584:33;2609:7;2584:11;:17;2596:4;2584:17;;;;;;;;;;;;;;;:20;2602:1;2584:20;;;;;;;;;;;;:24;;:33;;;;:::i;:::-;2561:56;;2635:12;2628:19;;;;;2359:296;;;:::o;9777:185::-;9915:39;9932:4;9938:2;9942:7;9915:39;;;;;;;;;;;;:16;:39::i;:::-;9777:185;;;:::o;6894:125::-;6958:7;6985:21;6998:7;6985:12;:21::i;:::-;:26;;;6978:33;;6894:125;;;:::o;4340:206::-;4404:7;4445:1;4428:19;;:5;:19;;;4424:60;;4456:28;;;;;;;;;;;;;;4424:60;4510:12;:19;4523:5;4510:19;;;;;;;;;;;;;;;:27;;;;;;;;;;;;4502:36;;4495:43;;4340:206;;;:::o;7255:104::-;7311:13;7344:7;7337:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7255:104;:::o;8947:287::-;9058:12;:10;:12::i;:::-;9046:24;;:8;:24;;;9042:54;;9079:17;;;;;;;;;;;;;;9042:54;9154:8;9109:18;:32;9128:12;:10;:12::i;:::-;9109:32;;;;;;;;;;;;;;;:42;9142:8;9109:42;;;;;;;;;;;;;;;;:53;;;;;;;;;;;;;;;;;;9207:8;9178:48;;9193:12;:10;:12::i;:::-;9178:48;;;9217:8;9178:48;;;;;;:::i;:::-;;;;;;;;8947:287;;:::o;10033:370::-;10200:28;10210:4;10216:2;10220:7;10200:9;:28::i;:::-;10243:15;:2;:13;;;:15::i;:::-;10239:157;;;10264:56;10295:4;10301:2;10305:7;10314:5;10264:30;:56::i;:::-;10260:136;;10344:40;;;;;;;;;;;;;;10260:136;10239:157;10033:370;;;;:::o;7430:318::-;7503:13;7534:16;7542:7;7534;:16::i;:::-;7529:59;;7559:29;;;;;;;;;;;;;;7529:59;7601:21;7625:10;:8;:10::i;:::-;7601:34;;7678:1;7659:7;7653:21;:26;:87;;;;;;;;;;;;;;;;;7706:7;7715:18;:7;:16;:18::i;:::-;7689:45;;;;;;;;;:::i;:::-;;;;;;;;;;;;;7653:87;7646:94;;;7430:318;;;:::o;9305:164::-;9402:4;9426:18;:25;9445:5;9426:25;;;;;;;;;;;;;;;:35;9452:8;9426:35;;;;;;;;;;;;;;;;;;;;;;;;;9419:42;;9305:164;;;;:::o;829:155:6:-;914:4;952:25;937:40;;;:11;:40;;;;930:47;;829:155;;;:::o;10658:174:9:-;10715:4;10758:7;10739:15;:13;:15::i;:::-;:26;;:53;;;;;10779:13;;10769:7;:23;10739:53;:85;;;;;10797:11;:20;10809:7;10797:20;;;;;;;;;;;:27;;;;;;;;;;;;10796:28;10739:85;10732:92;;10658:174;;;:::o;640:96:4:-;693:7;719:10;712:17;;640:96;:::o;19891:196:9:-;20033:2;20006:15;:24;20022:7;20006:24;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;20071:7;20067:2;20051:28;;20060:5;20051:28;;;;;;;;;;;;19891:196;;;:::o;2985:92::-;3041:7;3068:1;3061:8;;2985:92;:::o;14839:2130::-;14954:35;14992:21;15005:7;14992:12;:21::i;:::-;14954:59;;15052:4;15030:26;;:13;:18;;;:26;;;15026:67;;15065:28;;;;;;;;;;;;;;15026:67;15106:22;15148:4;15132:20;;:12;:10;:12::i;:::-;:20;;;:73;;;;15169:36;15186:4;15192:12;:10;:12::i;:::-;15169:16;:36::i;:::-;15132:73;:126;;;;15246:12;:10;:12::i;:::-;15222:36;;:20;15234:7;15222:11;:20::i;:::-;:36;;;15132:126;15106:153;;15277:17;15272:66;;15303:35;;;;;;;;;;;;;;15272:66;15367:1;15353:16;;:2;:16;;;15349:52;;15378:23;;;;;;;;;;;;;;15349:52;15414:43;15436:4;15442:2;15446:7;15455:1;15414:21;:43::i;:::-;15522:35;15539:1;15543:7;15552:4;15522:8;:35::i;:::-;15883:1;15853:12;:18;15866:4;15853:18;;;;;;;;;;;;;;;:26;;;:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15927:1;15899:12;:16;15912:2;15899:16;;;;;;;;;;;;;;;:24;;;:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15945:31;15979:11;:20;15991:7;15979:20;;;;;;;;;;;15945:54;;16030:2;16014:8;:13;;;:18;;;;;;;;;;;;;;;;;;16080:15;16047:8;:23;;;:49;;;;;;;;;;;;;;;;;;16348:19;16380:1;16370:7;:11;16348:33;;16396:31;16430:11;:24;16442:11;16430:24;;;;;;;;;;;16396:58;;16498:1;16473:27;;:8;:13;;;;;;;;;;;;:27;;;16469:384;;16683:13;;16668:11;:28;16664:174;;16737:4;16721:8;:13;;;:20;;;;;;;;;;;;;;;;;;16790:13;:28;;;16764:8;:23;;;:54;;;;;;;;;;;;;;;;;;16664:174;16469:384;15828:1036;;;16900:7;16896:2;16881:27;;16890:4;16881:27;;;;;;;;;;;;16919:42;16940:4;16946:2;16950:7;16959:1;16919:20;:42::i;:::-;14943:2026;;14839:2130;;;:::o;3122:96:8:-;3180:7;3210:1;3206;:5;;;;:::i;:::-;3199:12;;3122:96;;;;:::o;3465:::-;3523:7;3553:1;3549;:5;;;;:::i;:::-;3542:12;;3465:96;;;;:::o;2755:::-;2813:7;2843:1;2839;:5;;;;:::i;:::-;2832:12;;2755:96;;;;:::o;5721:1111:9:-;5783:21;;:::i;:::-;5817:12;5832:7;5817:22;;5900:4;5881:15;:13;:15::i;:::-;:23;5877:888;;5917:13;;5910:4;:20;5906:859;;;5951:31;5985:11;:17;5997:4;5985:17;;;;;;;;;;;5951:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6026:9;:16;;;6021:729;;6097:1;6071:28;;:9;:14;;;:28;;;6067:101;;6135:9;6128:16;;;;;;6067:101;6470:261;6477:4;6470:261;;;6510:6;;;;;;;;6555:11;:17;6567:4;6555:17;;;;;;;;;;;6543:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6629:1;6603:28;;:9;:14;;;:28;;;6599:109;;6671:9;6664:16;;;;;;6599:109;6470:261;;;6021:729;5932:833;5906:859;5877:888;6793:31;;;;;;;;;;;;;;5721:1111;;;;:::o;1175:320:3:-;1235:4;1487:1;1465:7;:19;;;:23;1458:30;;1175:320;;;:::o;20579:667:9:-;20742:4;20779:2;20763:36;;;20800:12;:10;:12::i;:::-;20814:4;20820:7;20829:5;20763:72;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;20759:480;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21014:1;20997:6;:13;:18;20993:235;;21043:40;;;;;;;;;;;;;;20993:235;21186:6;21180:13;21171:6;21167:2;21163:15;21156:38;20759:480;20892:45;;;20882:55;;;:6;:55;;;;20875:62;;;20579:667;;;;;;:::o;7996:175::-;8047:13;8073:90;;;;;;;;;;;;;;;;;;;7996:175;:::o;328:703:5:-;384:13;610:1;601:5;:10;597:51;;627:10;;;;;;;;;;;;;;;;;;;;;597:51;657:12;672:5;657:20;;687:14;711:75;726:1;718:4;:9;711:75;;743:8;;;;;:::i;:::-;;;;773:2;765:10;;;;;:::i;:::-;;;711:75;;;795:19;827:6;817:17;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;795:39;;844:150;860:1;851:5;:10;844:150;;887:1;877:11;;;;;:::i;:::-;;;953:2;945:5;:10;;;;:::i;:::-;932:2;:24;;;;:::i;:::-;919:39;;902:6;909;902:14;;;;;;;;:::i;:::-;;;;;:56;;;;;;;;;;;981:2;972:11;;;;;:::i;:::-;;;844:150;;;1017:6;1003:21;;;;;328:703;;;;:::o;21894:159:9:-;;;;;:::o;22712:158::-;;;;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;7:75:12:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:149;370:7;410:66;403:5;399:78;388:89;;334:149;;;:::o;489:120::-;561:23;578:5;561:23;:::i;:::-;554:5;551:34;541:62;;599:1;596;589:12;541:62;489:120;:::o;615:137::-;660:5;698:6;685:20;676:29;;714:32;740:5;714:32;:::i;:::-;615:137;;;;:::o;758:327::-;816:6;865:2;853:9;844:7;840:23;836:32;833:119;;;871:79;;:::i;:::-;833:119;991:1;1016:52;1060:7;1051:6;1040:9;1036:22;1016:52;:::i;:::-;1006:62;;962:116;758:327;;;;:::o;1091:90::-;1125:7;1168:5;1161:13;1154:21;1143:32;;1091:90;;;:::o;1187:109::-;1268:21;1283:5;1268:21;:::i;:::-;1263:3;1256:34;1187:109;;:::o;1302:210::-;1389:4;1427:2;1416:9;1412:18;1404:26;;1440:65;1502:1;1491:9;1487:17;1478:6;1440:65;:::i;:::-;1302:210;;;;:::o;1518:99::-;1570:6;1604:5;1598:12;1588:22;;1518:99;;;:::o;1623:169::-;1707:11;1741:6;1736:3;1729:19;1781:4;1776:3;1772:14;1757:29;;1623:169;;;;:::o;1798:307::-;1866:1;1876:113;1890:6;1887:1;1884:13;1876:113;;;1975:1;1970:3;1966:11;1960:18;1956:1;1951:3;1947:11;1940:39;1912:2;1909:1;1905:10;1900:15;;1876:113;;;2007:6;2004:1;2001:13;1998:101;;;2087:1;2078:6;2073:3;2069:16;2062:27;1998:101;1847:258;1798:307;;;:::o;2111:102::-;2152:6;2203:2;2199:7;2194:2;2187:5;2183:14;2179:28;2169:38;;2111:102;;;:::o;2219:364::-;2307:3;2335:39;2368:5;2335:39;:::i;:::-;2390:71;2454:6;2449:3;2390:71;:::i;:::-;2383:78;;2470:52;2515:6;2510:3;2503:4;2496:5;2492:16;2470:52;:::i;:::-;2547:29;2569:6;2547:29;:::i;:::-;2542:3;2538:39;2531:46;;2311:272;2219:364;;;;:::o;2589:313::-;2702:4;2740:2;2729:9;2725:18;2717:26;;2789:9;2783:4;2779:20;2775:1;2764:9;2760:17;2753:47;2817:78;2890:4;2881:6;2817:78;:::i;:::-;2809:86;;2589:313;;;;:::o;2908:77::-;2945:7;2974:5;2963:16;;2908:77;;;:::o;2991:122::-;3064:24;3082:5;3064:24;:::i;:::-;3057:5;3054:35;3044:63;;3103:1;3100;3093:12;3044:63;2991:122;:::o;3119:139::-;3165:5;3203:6;3190:20;3181:29;;3219:33;3246:5;3219:33;:::i;:::-;3119:139;;;;:::o;3264:329::-;3323:6;3372:2;3360:9;3351:7;3347:23;3343:32;3340:119;;;3378:79;;:::i;:::-;3340:119;3498:1;3523:53;3568:7;3559:6;3548:9;3544:22;3523:53;:::i;:::-;3513:63;;3469:117;3264:329;;;;:::o;3599:126::-;3636:7;3676:42;3669:5;3665:54;3654:65;;3599:126;;;:::o;3731:96::-;3768:7;3797:24;3815:5;3797:24;:::i;:::-;3786:35;;3731:96;;;:::o;3833:118::-;3920:24;3938:5;3920:24;:::i;:::-;3915:3;3908:37;3833:118;;:::o;3957:222::-;4050:4;4088:2;4077:9;4073:18;4065:26;;4101:71;4169:1;4158:9;4154:17;4145:6;4101:71;:::i;:::-;3957:222;;;;:::o;4185:122::-;4258:24;4276:5;4258:24;:::i;:::-;4251:5;4248:35;4238:63;;4297:1;4294;4287:12;4238:63;4185:122;:::o;4313:139::-;4359:5;4397:6;4384:20;4375:29;;4413:33;4440:5;4413:33;:::i;:::-;4313:139;;;;:::o;4458:474::-;4526:6;4534;4583:2;4571:9;4562:7;4558:23;4554:32;4551:119;;;4589:79;;:::i;:::-;4551:119;4709:1;4734:53;4779:7;4770:6;4759:9;4755:22;4734:53;:::i;:::-;4724:63;;4680:117;4836:2;4862:53;4907:7;4898:6;4887:9;4883:22;4862:53;:::i;:::-;4852:63;;4807:118;4458:474;;;;;:::o;4938:118::-;5025:24;5043:5;5025:24;:::i;:::-;5020:3;5013:37;4938:118;;:::o;5062:222::-;5155:4;5193:2;5182:9;5178:18;5170:26;;5206:71;5274:1;5263:9;5259:17;5250:6;5206:71;:::i;:::-;5062:222;;;;:::o;5290:619::-;5367:6;5375;5383;5432:2;5420:9;5411:7;5407:23;5403:32;5400:119;;;5438:79;;:::i;:::-;5400:119;5558:1;5583:53;5628:7;5619:6;5608:9;5604:22;5583:53;:::i;:::-;5573:63;;5529:117;5685:2;5711:53;5756:7;5747:6;5736:9;5732:22;5711:53;:::i;:::-;5701:63;;5656:118;5813:2;5839:53;5884:7;5875:6;5864:9;5860:22;5839:53;:::i;:::-;5829:63;;5784:118;5290:619;;;;;:::o;5915:329::-;5974:6;6023:2;6011:9;6002:7;5998:23;5994:32;5991:119;;;6029:79;;:::i;:::-;5991:119;6149:1;6174:53;6219:7;6210:6;6199:9;6195:22;6174:53;:::i;:::-;6164:63;;6120:117;5915:329;;;;:::o;6250:116::-;6320:21;6335:5;6320:21;:::i;:::-;6313:5;6310:32;6300:60;;6356:1;6353;6346:12;6300:60;6250:116;:::o;6372:133::-;6415:5;6453:6;6440:20;6431:29;;6469:30;6493:5;6469:30;:::i;:::-;6372:133;;;;:::o;6511:468::-;6576:6;6584;6633:2;6621:9;6612:7;6608:23;6604:32;6601:119;;;6639:79;;:::i;:::-;6601:119;6759:1;6784:53;6829:7;6820:6;6809:9;6805:22;6784:53;:::i;:::-;6774:63;;6730:117;6886:2;6912:50;6954:7;6945:6;6934:9;6930:22;6912:50;:::i;:::-;6902:60;;6857:115;6511:468;;;;;:::o;6985:117::-;7094:1;7091;7084:12;7108:117;7217:1;7214;7207:12;7231:180;7279:77;7276:1;7269:88;7376:4;7373:1;7366:15;7400:4;7397:1;7390:15;7417:281;7500:27;7522:4;7500:27;:::i;:::-;7492:6;7488:40;7630:6;7618:10;7615:22;7594:18;7582:10;7579:34;7576:62;7573:88;;;7641:18;;:::i;:::-;7573:88;7681:10;7677:2;7670:22;7460:238;7417:281;;:::o;7704:129::-;7738:6;7765:20;;:::i;:::-;7755:30;;7794:33;7822:4;7814:6;7794:33;:::i;:::-;7704:129;;;:::o;7839:307::-;7900:4;7990:18;7982:6;7979:30;7976:56;;;8012:18;;:::i;:::-;7976:56;8050:29;8072:6;8050:29;:::i;:::-;8042:37;;8134:4;8128;8124:15;8116:23;;7839:307;;;:::o;8152:154::-;8236:6;8231:3;8226;8213:30;8298:1;8289:6;8284:3;8280:16;8273:27;8152:154;;;:::o;8312:410::-;8389:5;8414:65;8430:48;8471:6;8430:48;:::i;:::-;8414:65;:::i;:::-;8405:74;;8502:6;8495:5;8488:21;8540:4;8533:5;8529:16;8578:3;8569:6;8564:3;8560:16;8557:25;8554:112;;;8585:79;;:::i;:::-;8554:112;8675:41;8709:6;8704:3;8699;8675:41;:::i;:::-;8395:327;8312:410;;;;;:::o;8741:338::-;8796:5;8845:3;8838:4;8830:6;8826:17;8822:27;8812:122;;8853:79;;:::i;:::-;8812:122;8970:6;8957:20;8995:78;9069:3;9061:6;9054:4;9046:6;9042:17;8995:78;:::i;:::-;8986:87;;8802:277;8741:338;;;;:::o;9085:943::-;9180:6;9188;9196;9204;9253:3;9241:9;9232:7;9228:23;9224:33;9221:120;;;9260:79;;:::i;:::-;9221:120;9380:1;9405:53;9450:7;9441:6;9430:9;9426:22;9405:53;:::i;:::-;9395:63;;9351:117;9507:2;9533:53;9578:7;9569:6;9558:9;9554:22;9533:53;:::i;:::-;9523:63;;9478:118;9635:2;9661:53;9706:7;9697:6;9686:9;9682:22;9661:53;:::i;:::-;9651:63;;9606:118;9791:2;9780:9;9776:18;9763:32;9822:18;9814:6;9811:30;9808:117;;;9844:79;;:::i;:::-;9808:117;9949:62;10003:7;9994:6;9983:9;9979:22;9949:62;:::i;:::-;9939:72;;9734:287;9085:943;;;;;;;:::o;10034:474::-;10102:6;10110;10159:2;10147:9;10138:7;10134:23;10130:32;10127:119;;;10165:79;;:::i;:::-;10127:119;10285:1;10310:53;10355:7;10346:6;10335:9;10331:22;10310:53;:::i;:::-;10300:63;;10256:117;10412:2;10438:53;10483:7;10474:6;10463:9;10459:22;10438:53;:::i;:::-;10428:63;;10383:118;10034:474;;;;;:::o;10514:180::-;10562:77;10559:1;10552:88;10659:4;10656:1;10649:15;10683:4;10680:1;10673:15;10700:320;10744:6;10781:1;10775:4;10771:12;10761:22;;10828:1;10822:4;10818:12;10849:18;10839:81;;10905:4;10897:6;10893:17;10883:27;;10839:81;10967:2;10959:6;10956:14;10936:18;10933:38;10930:84;;10986:18;;:::i;:::-;10930:84;10751:269;10700:320;;;:::o;11026:148::-;11128:11;11165:3;11150:18;;11026:148;;;;:::o;11180:377::-;11286:3;11314:39;11347:5;11314:39;:::i;:::-;11369:89;11451:6;11446:3;11369:89;:::i;:::-;11362:96;;11467:52;11512:6;11507:3;11500:4;11493:5;11489:16;11467:52;:::i;:::-;11544:6;11539:3;11535:16;11528:23;;11290:267;11180:377;;;;:::o;11563:435::-;11743:3;11765:95;11856:3;11847:6;11765:95;:::i;:::-;11758:102;;11877:95;11968:3;11959:6;11877:95;:::i;:::-;11870:102;;11989:3;11982:10;;11563:435;;;;;:::o;12004:180::-;12052:77;12049:1;12042:88;12149:4;12146:1;12139:15;12173:4;12170:1;12163:15;12190:191;12230:4;12250:20;12268:1;12250:20;:::i;:::-;12245:25;;12284:20;12302:1;12284:20;:::i;:::-;12279:25;;12323:1;12320;12317:8;12314:34;;;12328:18;;:::i;:::-;12314:34;12373:1;12370;12366:9;12358:17;;12190:191;;;;:::o;12387:348::-;12427:7;12450:20;12468:1;12450:20;:::i;:::-;12445:25;;12484:20;12502:1;12484:20;:::i;:::-;12479:25;;12672:1;12604:66;12600:74;12597:1;12594:81;12589:1;12582:9;12575:17;12571:105;12568:131;;;12679:18;;:::i;:::-;12568:131;12727:1;12724;12720:9;12709:20;;12387:348;;;;:::o;12741:305::-;12781:3;12800:20;12818:1;12800:20;:::i;:::-;12795:25;;12834:20;12852:1;12834:20;:::i;:::-;12829:25;;12988:1;12920:66;12916:74;12913:1;12910:81;12907:107;;;12994:18;;:::i;:::-;12907:107;13038:1;13035;13031:9;13024:16;;12741:305;;;;:::o;13052:98::-;13103:6;13137:5;13131:12;13121:22;;13052:98;;;:::o;13156:168::-;13239:11;13273:6;13268:3;13261:19;13313:4;13308:3;13304:14;13289:29;;13156:168;;;;:::o;13330:360::-;13416:3;13444:38;13476:5;13444:38;:::i;:::-;13498:70;13561:6;13556:3;13498:70;:::i;:::-;13491:77;;13577:52;13622:6;13617:3;13610:4;13603:5;13599:16;13577:52;:::i;:::-;13654:29;13676:6;13654:29;:::i;:::-;13649:3;13645:39;13638:46;;13420:270;13330:360;;;;:::o;13696:640::-;13891:4;13929:3;13918:9;13914:19;13906:27;;13943:71;14011:1;14000:9;13996:17;13987:6;13943:71;:::i;:::-;14024:72;14092:2;14081:9;14077:18;14068:6;14024:72;:::i;:::-;14106;14174:2;14163:9;14159:18;14150:6;14106:72;:::i;:::-;14225:9;14219:4;14215:20;14210:2;14199:9;14195:18;14188:48;14253:76;14324:4;14315:6;14253:76;:::i;:::-;14245:84;;13696:640;;;;;;;:::o;14342:141::-;14398:5;14429:6;14423:13;14414:22;;14445:32;14471:5;14445:32;:::i;:::-;14342:141;;;;:::o;14489:349::-;14558:6;14607:2;14595:9;14586:7;14582:23;14578:32;14575:119;;;14613:79;;:::i;:::-;14575:119;14733:1;14758:63;14813:7;14804:6;14793:9;14789:22;14758:63;:::i;:::-;14748:73;;14704:127;14489:349;;;;:::o;14844:233::-;14883:3;14906:24;14924:5;14906:24;:::i;:::-;14897:33;;14952:66;14945:5;14942:77;14939:103;;15022:18;;:::i;:::-;14939:103;15069:1;15062:5;15058:13;15051:20;;14844:233;;;:::o;15083:180::-;15131:77;15128:1;15121:88;15228:4;15225:1;15218:15;15252:4;15249:1;15242:15;15269:185;15309:1;15326:20;15344:1;15326:20;:::i;:::-;15321:25;;15360:20;15378:1;15360:20;:::i;:::-;15355:25;;15399:1;15389:35;;15404:18;;:::i;:::-;15389:35;15446:1;15443;15439:9;15434:14;;15269:185;;;;:::o;15460:176::-;15492:1;15509:20;15527:1;15509:20;:::i;:::-;15504:25;;15543:20;15561:1;15543:20;:::i;:::-;15538:25;;15582:1;15572:35;;15587:18;;:::i;:::-;15572:35;15628:1;15625;15621:9;15616:14;;15460:176;;;;:::o;15642:180::-;15690:77;15687:1;15680:88;15787:4;15784:1;15777:15;15811:4;15808:1;15801:15"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1754400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"BlockScore(address)": "infinite",
								"approve(address,uint256)": "infinite",
								"balanceOf(address)": "2991",
								"getApproved(uint256)": "7466",
								"isApprovedForAll(address,address)": "infinite",
								"name()": "infinite",
								"ownerOf(uint256)": "infinite",
								"safeTransferFrom(address,address,uint256)": "infinite",
								"safeTransferFrom(address,address,uint256,bytes)": "infinite",
								"setApprovalForAll(address,bool)": "infinite",
								"supportsInterface(bytes4)": "797",
								"symbol()": "infinite",
								"tokenURI(uint256)": "infinite",
								"totalSupply()": "4629",
								"transferFrom(address,address,uint256)": "infinite"
							},
							"internal": {
								"_afterTokenTransfers(address,address,uint256,uint256)": "17",
								"_approve(address,uint256,address)": "26292",
								"_baseURI()": "infinite",
								"_beforeTokenTransfers(address,address,uint256,uint256)": "17",
								"_burn(uint256)": "infinite",
								"_burn(uint256,bool)": "infinite",
								"_checkContractOnERC721Received(address,address,uint256,bytes memory)": "infinite",
								"_exists(uint256)": "4507",
								"_getAux(address)": "infinite",
								"_mint(address,uint256)": "infinite",
								"_numberBurned(address)": "infinite",
								"_numberMinted(address)": "infinite",
								"_ownershipOf(uint256)": "infinite",
								"_safeMint(address,uint256)": "infinite",
								"_safeMint(address,uint256,bytes memory)": "infinite",
								"_setAux(address,uint64)": "infinite",
								"_startTokenId()": "23",
								"_totalMinted()": "infinite",
								"_transfer(address,address,uint256)": "infinite",
								"updateBlockScore()": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1018,
									"end": 22873,
									"name": "PUSH",
									"source": 9,
									"value": "80"
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 2187,
									"end": 2345,
									"name": "CALLVALUE",
									"source": 9
								},
								{
									"begin": 2187,
									"end": 2345,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 2187,
									"end": 2345,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 2187,
									"end": 2345,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 2187,
									"end": 2345,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 2187,
									"end": 2345,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 2187,
									"end": 2345,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 2187,
									"end": 2345,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 2187,
									"end": 2345,
									"name": "tag",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 2187,
									"end": 2345,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 2187,
									"end": 2345,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 2187,
									"end": 2345,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 2187,
									"end": 2345,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 2187,
									"end": 2345,
									"name": "PUSHSIZE",
									"source": 9
								},
								{
									"begin": 2187,
									"end": 2345,
									"name": "CODESIZE",
									"source": 9
								},
								{
									"begin": 2187,
									"end": 2345,
									"name": "SUB",
									"source": 9
								},
								{
									"begin": 2187,
									"end": 2345,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 2187,
									"end": 2345,
									"name": "PUSHSIZE",
									"source": 9
								},
								{
									"begin": 2187,
									"end": 2345,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 2187,
									"end": 2345,
									"name": "CODECOPY",
									"source": 9
								},
								{
									"begin": 2187,
									"end": 2345,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 2187,
									"end": 2345,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 2187,
									"end": 2345,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 2187,
									"end": 2345,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 2187,
									"end": 2345,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 2187,
									"end": 2345,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 2187,
									"end": 2345,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 2187,
									"end": 2345,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 2187,
									"end": 2345,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "2"
								},
								{
									"begin": 2187,
									"end": 2345,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 2187,
									"end": 2345,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 2187,
									"end": 2345,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "3"
								},
								{
									"begin": 2187,
									"end": 2345,
									"name": "JUMP",
									"source": 9,
									"value": "[in]"
								},
								{
									"begin": 2187,
									"end": 2345,
									"name": "tag",
									"source": 9,
									"value": "2"
								},
								{
									"begin": 2187,
									"end": 2345,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 2262,
									"end": 2267,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 2254,
									"end": 2259,
									"name": "PUSH",
									"source": 9,
									"value": "2"
								},
								{
									"begin": 2254,
									"end": 2267,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 2254,
									"end": 2267,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 2254,
									"end": 2267,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 2254,
									"end": 2267,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 2254,
									"end": 2267,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 2254,
									"end": 2267,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 2254,
									"end": 2267,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 2254,
									"end": 2267,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "6"
								},
								{
									"begin": 2254,
									"end": 2267,
									"name": "SWAP3",
									"source": 9
								},
								{
									"begin": 2254,
									"end": 2267,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 2254,
									"end": 2267,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 2254,
									"end": 2267,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "7"
								},
								{
									"begin": 2254,
									"end": 2267,
									"name": "JUMP",
									"source": 9,
									"value": "[in]"
								},
								{
									"begin": 2254,
									"end": 2267,
									"name": "tag",
									"source": 9,
									"value": "6"
								},
								{
									"begin": 2254,
									"end": 2267,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 2254,
									"end": 2267,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 2288,
									"end": 2295,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 2278,
									"end": 2285,
									"name": "PUSH",
									"source": 9,
									"value": "3"
								},
								{
									"begin": 2278,
									"end": 2295,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 2278,
									"end": 2295,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 2278,
									"end": 2295,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 2278,
									"end": 2295,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 2278,
									"end": 2295,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 2278,
									"end": 2295,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 2278,
									"end": 2295,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 2278,
									"end": 2295,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "8"
								},
								{
									"begin": 2278,
									"end": 2295,
									"name": "SWAP3",
									"source": 9
								},
								{
									"begin": 2278,
									"end": 2295,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 2278,
									"end": 2295,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 2278,
									"end": 2295,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "7"
								},
								{
									"begin": 2278,
									"end": 2295,
									"name": "JUMP",
									"source": 9,
									"value": "[in]"
								},
								{
									"begin": 2278,
									"end": 2295,
									"name": "tag",
									"source": 9,
									"value": "8"
								},
								{
									"begin": 2278,
									"end": 2295,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 2278,
									"end": 2295,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 2322,
									"end": 2337,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "9"
								},
								{
									"begin": 2322,
									"end": 2335,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "10"
								},
								{
									"begin": 2322,
									"end": 2335,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 2322,
									"end": 2335,
									"name": "SHL",
									"source": 9
								},
								{
									"begin": 2322,
									"end": 2337,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 2322,
									"end": 2337,
									"name": "SHR",
									"source": 9
								},
								{
									"begin": 2322,
									"end": 2337,
									"name": "JUMP",
									"source": 9,
									"value": "[in]"
								},
								{
									"begin": 2322,
									"end": 2337,
									"name": "tag",
									"source": 9,
									"value": "9"
								},
								{
									"begin": 2322,
									"end": 2337,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 2306,
									"end": 2319,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 2306,
									"end": 2337,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 2306,
									"end": 2337,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 2306,
									"end": 2337,
									"name": "SSTORE",
									"source": 9
								},
								{
									"begin": 2306,
									"end": 2337,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 2187,
									"end": 2345,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 2187,
									"end": 2345,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "11"
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 2985,
									"end": 3077,
									"name": "tag",
									"source": 9,
									"value": "10"
								},
								{
									"begin": 2985,
									"end": 3077,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 3041,
									"end": 3048,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 3068,
									"end": 3069,
									"name": "PUSH",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 3061,
									"end": 3069,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 3061,
									"end": 3069,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 2985,
									"end": 3077,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 2985,
									"end": 3077,
									"name": "JUMP",
									"source": 9,
									"value": "[out]"
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "tag",
									"source": 9,
									"value": "7"
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "SLOAD",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "13"
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "14"
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "JUMP",
									"source": 9,
									"value": "[in]"
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "tag",
									"source": 9,
									"value": "13"
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "KECCAK256",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "PUSH",
									"source": 9,
									"value": "1F"
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "DIV",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "SWAP3",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "16"
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "DUP6",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "SSTORE",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "15"
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "tag",
									"source": 9,
									"value": "16"
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "PUSH",
									"source": 9,
									"value": "1F"
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "LT",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "17"
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "PUSH",
									"source": 9,
									"value": "FF"
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "NOT",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "OR",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "DUP6",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "SSTORE",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "15"
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "tag",
									"source": 9,
									"value": "17"
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "PUSH",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "DUP6",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "SSTORE",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "15"
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "tag",
									"source": 9,
									"value": "18"
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "GT",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "19"
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "SSTORE",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "PUSH",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "18"
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "tag",
									"source": 9,
									"value": "19"
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "tag",
									"source": 9,
									"value": "15"
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "21"
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "JUMP",
									"source": 9,
									"value": "[in]"
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "tag",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "JUMP",
									"source": 9,
									"value": "[out]"
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "tag",
									"source": 9,
									"value": "21"
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "tag",
									"source": 9,
									"value": "22"
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "GT",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "23"
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "SSTORE",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "PUSH",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "22"
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "tag",
									"source": 9,
									"value": "23"
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "JUMP",
									"source": 9,
									"value": "[out]"
								},
								{
									"begin": 7,
									"end": 82,
									"name": "tag",
									"source": 12,
									"value": "24"
								},
								{
									"begin": 7,
									"end": 82,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 40,
									"end": 46,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 73,
									"end": 75,
									"name": "PUSH",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 67,
									"end": 76,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 57,
									"end": 76,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 57,
									"end": 76,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 7,
									"end": 82,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 7,
									"end": 82,
									"name": "JUMP",
									"source": 12,
									"value": "[out]"
								},
								{
									"begin": 88,
									"end": 205,
									"name": "tag",
									"source": 12,
									"value": "25"
								},
								{
									"begin": 88,
									"end": 205,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 197,
									"end": 198,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 195,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 187,
									"end": 199,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 211,
									"end": 328,
									"name": "tag",
									"source": 12,
									"value": "26"
								},
								{
									"begin": 211,
									"end": 328,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 320,
									"end": 321,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 317,
									"end": 318,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 310,
									"end": 322,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 334,
									"end": 451,
									"name": "tag",
									"source": 12,
									"value": "27"
								},
								{
									"begin": 334,
									"end": 451,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 443,
									"end": 444,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 440,
									"end": 441,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 433,
									"end": 445,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 457,
									"end": 574,
									"name": "tag",
									"source": 12,
									"value": "28"
								},
								{
									"begin": 457,
									"end": 574,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 566,
									"end": 567,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 563,
									"end": 564,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 556,
									"end": 568,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 580,
									"end": 682,
									"name": "tag",
									"source": 12,
									"value": "29"
								},
								{
									"begin": 580,
									"end": 682,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 621,
									"end": 627,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 672,
									"end": 674,
									"name": "PUSH",
									"source": 12,
									"value": "1F"
								},
								{
									"begin": 668,
									"end": 675,
									"name": "NOT",
									"source": 12
								},
								{
									"begin": 663,
									"end": 665,
									"name": "PUSH",
									"source": 12,
									"value": "1F"
								},
								{
									"begin": 656,
									"end": 661,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 652,
									"end": 666,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 648,
									"end": 676,
									"name": "AND",
									"source": 12
								},
								{
									"begin": 638,
									"end": 676,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 638,
									"end": 676,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 580,
									"end": 682,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 580,
									"end": 682,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 580,
									"end": 682,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 580,
									"end": 682,
									"name": "JUMP",
									"source": 12,
									"value": "[out]"
								},
								{
									"begin": 688,
									"end": 868,
									"name": "tag",
									"source": 12,
									"value": "30"
								},
								{
									"begin": 688,
									"end": 868,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 736,
									"end": 813,
									"name": "PUSH",
									"source": 12,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 733,
									"end": 734,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 726,
									"end": 814,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 833,
									"end": 837,
									"name": "PUSH",
									"source": 12,
									"value": "41"
								},
								{
									"begin": 830,
									"end": 831,
									"name": "PUSH",
									"source": 12,
									"value": "4"
								},
								{
									"begin": 823,
									"end": 838,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 857,
									"end": 861,
									"name": "PUSH",
									"source": 12,
									"value": "24"
								},
								{
									"begin": 854,
									"end": 855,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 847,
									"end": 862,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 874,
									"end": 1155,
									"name": "tag",
									"source": 12,
									"value": "31"
								},
								{
									"begin": 874,
									"end": 1155,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 957,
									"end": 984,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "47"
								},
								{
									"begin": 979,
									"end": 983,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 957,
									"end": 984,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "29"
								},
								{
									"begin": 957,
									"end": 984,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 957,
									"end": 984,
									"name": "tag",
									"source": 12,
									"value": "47"
								},
								{
									"begin": 957,
									"end": 984,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 949,
									"end": 955,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 945,
									"end": 985,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1087,
									"end": 1093,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 1075,
									"end": 1085,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 1072,
									"end": 1094,
									"name": "LT",
									"source": 12
								},
								{
									"begin": 1051,
									"end": 1069,
									"name": "PUSH",
									"source": 12,
									"value": "FFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1039,
									"end": 1049,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1036,
									"end": 1070,
									"name": "GT",
									"source": 12
								},
								{
									"begin": 1033,
									"end": 1095,
									"name": "OR",
									"source": 12
								},
								{
									"begin": 1030,
									"end": 1118,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 1030,
									"end": 1118,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "48"
								},
								{
									"begin": 1030,
									"end": 1118,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 1098,
									"end": 1116,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "49"
								},
								{
									"begin": 1098,
									"end": 1116,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "30"
								},
								{
									"begin": 1098,
									"end": 1116,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 1098,
									"end": 1116,
									"name": "tag",
									"source": 12,
									"value": "49"
								},
								{
									"begin": 1098,
									"end": 1116,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1030,
									"end": 1118,
									"name": "tag",
									"source": 12,
									"value": "48"
								},
								{
									"begin": 1030,
									"end": 1118,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1138,
									"end": 1148,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 1134,
									"end": 1136,
									"name": "PUSH",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 1127,
									"end": 1149,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 917,
									"end": 1155,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 874,
									"end": 1155,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 874,
									"end": 1155,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 874,
									"end": 1155,
									"name": "JUMP",
									"source": 12,
									"value": "[out]"
								},
								{
									"begin": 1161,
									"end": 1290,
									"name": "tag",
									"source": 12,
									"value": "32"
								},
								{
									"begin": 1161,
									"end": 1290,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1195,
									"end": 1201,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1222,
									"end": 1242,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "51"
								},
								{
									"begin": 1222,
									"end": 1242,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "24"
								},
								{
									"begin": 1222,
									"end": 1242,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 1222,
									"end": 1242,
									"name": "tag",
									"source": 12,
									"value": "51"
								},
								{
									"begin": 1222,
									"end": 1242,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1212,
									"end": 1242,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 1212,
									"end": 1242,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1251,
									"end": 1284,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "52"
								},
								{
									"begin": 1279,
									"end": 1283,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1271,
									"end": 1277,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1251,
									"end": 1284,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "31"
								},
								{
									"begin": 1251,
									"end": 1284,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 1251,
									"end": 1284,
									"name": "tag",
									"source": 12,
									"value": "52"
								},
								{
									"begin": 1251,
									"end": 1284,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1161,
									"end": 1290,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 1161,
									"end": 1290,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 1161,
									"end": 1290,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1161,
									"end": 1290,
									"name": "JUMP",
									"source": 12,
									"value": "[out]"
								},
								{
									"begin": 1296,
									"end": 1604,
									"name": "tag",
									"source": 12,
									"value": "33"
								},
								{
									"begin": 1296,
									"end": 1604,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1358,
									"end": 1362,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1448,
									"end": 1466,
									"name": "PUSH",
									"source": 12,
									"value": "FFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1440,
									"end": 1446,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1437,
									"end": 1467,
									"name": "GT",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 1490,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 1490,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "54"
								},
								{
									"begin": 1434,
									"end": 1490,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 1470,
									"end": 1488,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "55"
								},
								{
									"begin": 1470,
									"end": 1488,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "30"
								},
								{
									"begin": 1470,
									"end": 1488,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 1470,
									"end": 1488,
									"name": "tag",
									"source": 12,
									"value": "55"
								},
								{
									"begin": 1470,
									"end": 1488,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1434,
									"end": 1490,
									"name": "tag",
									"source": 12,
									"value": "54"
								},
								{
									"begin": 1434,
									"end": 1490,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1508,
									"end": 1537,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "56"
								},
								{
									"begin": 1530,
									"end": 1536,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1508,
									"end": 1537,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "29"
								},
								{
									"begin": 1508,
									"end": 1537,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 1508,
									"end": 1537,
									"name": "tag",
									"source": 12,
									"value": "56"
								},
								{
									"begin": 1508,
									"end": 1537,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1500,
									"end": 1537,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 1500,
									"end": 1537,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1592,
									"end": 1596,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 1586,
									"end": 1590,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 1582,
									"end": 1597,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1574,
									"end": 1597,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 1574,
									"end": 1597,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1296,
									"end": 1604,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 1296,
									"end": 1604,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 1296,
									"end": 1604,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1296,
									"end": 1604,
									"name": "JUMP",
									"source": 12,
									"value": "[out]"
								},
								{
									"begin": 1610,
									"end": 1917,
									"name": "tag",
									"source": 12,
									"value": "34"
								},
								{
									"begin": 1610,
									"end": 1917,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1678,
									"end": 1679,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1688,
									"end": 1801,
									"name": "tag",
									"source": 12,
									"value": "58"
								},
								{
									"begin": 1688,
									"end": 1801,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1702,
									"end": 1708,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 1699,
									"end": 1700,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 1696,
									"end": 1709,
									"name": "LT",
									"source": 12
								},
								{
									"begin": 1688,
									"end": 1801,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 1688,
									"end": 1801,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "60"
								},
								{
									"begin": 1688,
									"end": 1801,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 1787,
									"end": 1788,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 1782,
									"end": 1785,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1778,
									"end": 1789,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1772,
									"end": 1790,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 1768,
									"end": 1769,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 1763,
									"end": 1766,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 1759,
									"end": 1770,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1752,
									"end": 1791,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 1724,
									"end": 1726,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 1721,
									"end": 1722,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 1717,
									"end": 1727,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1712,
									"end": 1727,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 1712,
									"end": 1727,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1688,
									"end": 1801,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "58"
								},
								{
									"begin": 1688,
									"end": 1801,
									"name": "JUMP",
									"source": 12
								},
								{
									"begin": 1688,
									"end": 1801,
									"name": "tag",
									"source": 12,
									"value": "60"
								},
								{
									"begin": 1688,
									"end": 1801,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1819,
									"end": 1825,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 1816,
									"end": 1817,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 1813,
									"end": 1826,
									"name": "GT",
									"source": 12
								},
								{
									"begin": 1810,
									"end": 1911,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 1810,
									"end": 1911,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "61"
								},
								{
									"begin": 1810,
									"end": 1911,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 1899,
									"end": 1900,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1890,
									"end": 1896,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 1885,
									"end": 1888,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 1881,
									"end": 1897,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 1874,
									"end": 1901,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 1810,
									"end": 1911,
									"name": "tag",
									"source": 12,
									"value": "61"
								},
								{
									"begin": 1810,
									"end": 1911,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1659,
									"end": 1917,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1610,
									"end": 1917,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1610,
									"end": 1917,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1610,
									"end": 1917,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1610,
									"end": 1917,
									"name": "JUMP",
									"source": 12,
									"value": "[out]"
								},
								{
									"begin": 1923,
									"end": 2344,
									"name": "tag",
									"source": 12,
									"value": "35"
								},
								{
									"begin": 1923,
									"end": 2344,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2012,
									"end": 2017,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 2037,
									"end": 2103,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "63"
								},
								{
									"begin": 2053,
									"end": 2102,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "64"
								},
								{
									"begin": 2095,
									"end": 2101,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 2053,
									"end": 2102,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "33"
								},
								{
									"begin": 2053,
									"end": 2102,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 2053,
									"end": 2102,
									"name": "tag",
									"source": 12,
									"value": "64"
								},
								{
									"begin": 2053,
									"end": 2102,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2037,
									"end": 2103,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "32"
								},
								{
									"begin": 2037,
									"end": 2103,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 2037,
									"end": 2103,
									"name": "tag",
									"source": 12,
									"value": "63"
								},
								{
									"begin": 2037,
									"end": 2103,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2028,
									"end": 2103,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 2028,
									"end": 2103,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2126,
									"end": 2132,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 2119,
									"end": 2124,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 2112,
									"end": 2133,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 2164,
									"end": 2168,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 2157,
									"end": 2162,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 2153,
									"end": 2169,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 2202,
									"end": 2205,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 2193,
									"end": 2199,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 2188,
									"end": 2191,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 2184,
									"end": 2200,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 2181,
									"end": 2206,
									"name": "GT",
									"source": 12
								},
								{
									"begin": 2178,
									"end": 2290,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 2178,
									"end": 2290,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "65"
								},
								{
									"begin": 2178,
									"end": 2290,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 2209,
									"end": 2288,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "66"
								},
								{
									"begin": 2209,
									"end": 2288,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "28"
								},
								{
									"begin": 2209,
									"end": 2288,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 2209,
									"end": 2288,
									"name": "tag",
									"source": 12,
									"value": "66"
								},
								{
									"begin": 2209,
									"end": 2288,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2178,
									"end": 2290,
									"name": "tag",
									"source": 12,
									"value": "65"
								},
								{
									"begin": 2178,
									"end": 2290,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2299,
									"end": 2338,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "67"
								},
								{
									"begin": 2331,
									"end": 2337,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 2326,
									"end": 2329,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 2321,
									"end": 2324,
									"name": "DUP6",
									"source": 12
								},
								{
									"begin": 2299,
									"end": 2338,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "34"
								},
								{
									"begin": 2299,
									"end": 2338,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 2299,
									"end": 2338,
									"name": "tag",
									"source": 12,
									"value": "67"
								},
								{
									"begin": 2299,
									"end": 2338,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2018,
									"end": 2344,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1923,
									"end": 2344,
									"name": "SWAP4",
									"source": 12
								},
								{
									"begin": 1923,
									"end": 2344,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 1923,
									"end": 2344,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1923,
									"end": 2344,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1923,
									"end": 2344,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1923,
									"end": 2344,
									"name": "JUMP",
									"source": 12,
									"value": "[out]"
								},
								{
									"begin": 2364,
									"end": 2719,
									"name": "tag",
									"source": 12,
									"value": "36"
								},
								{
									"begin": 2364,
									"end": 2719,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2431,
									"end": 2436,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 2480,
									"end": 2483,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 2473,
									"end": 2477,
									"name": "PUSH",
									"source": 12,
									"value": "1F"
								},
								{
									"begin": 2465,
									"end": 2471,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 2461,
									"end": 2478,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 2457,
									"end": 2484,
									"name": "SLT",
									"source": 12
								},
								{
									"begin": 2447,
									"end": 2569,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "69"
								},
								{
									"begin": 2447,
									"end": 2569,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 2488,
									"end": 2567,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "70"
								},
								{
									"begin": 2488,
									"end": 2567,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "27"
								},
								{
									"begin": 2488,
									"end": 2567,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 2488,
									"end": 2567,
									"name": "tag",
									"source": 12,
									"value": "70"
								},
								{
									"begin": 2488,
									"end": 2567,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2447,
									"end": 2569,
									"name": "tag",
									"source": 12,
									"value": "69"
								},
								{
									"begin": 2447,
									"end": 2569,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2598,
									"end": 2604,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 2592,
									"end": 2605,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 2623,
									"end": 2713,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "71"
								},
								{
									"begin": 2709,
									"end": 2712,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 2701,
									"end": 2707,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 2694,
									"end": 2698,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 2686,
									"end": 2692,
									"name": "DUP7",
									"source": 12
								},
								{
									"begin": 2682,
									"end": 2699,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 2623,
									"end": 2713,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "35"
								},
								{
									"begin": 2623,
									"end": 2713,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 2623,
									"end": 2713,
									"name": "tag",
									"source": 12,
									"value": "71"
								},
								{
									"begin": 2623,
									"end": 2713,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2614,
									"end": 2713,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 2614,
									"end": 2713,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2437,
									"end": 2719,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2364,
									"end": 2719,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 2364,
									"end": 2719,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 2364,
									"end": 2719,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2364,
									"end": 2719,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2364,
									"end": 2719,
									"name": "JUMP",
									"source": 12,
									"value": "[out]"
								},
								{
									"begin": 2725,
									"end": 3578,
									"name": "tag",
									"source": 12,
									"value": "3"
								},
								{
									"begin": 2725,
									"end": 3578,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2824,
									"end": 2830,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 2832,
									"end": 2838,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 2881,
									"end": 2883,
									"name": "PUSH",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 2869,
									"end": 2878,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 2860,
									"end": 2867,
									"name": "DUP6",
									"source": 12
								},
								{
									"begin": 2856,
									"end": 2879,
									"name": "SUB",
									"source": 12
								},
								{
									"begin": 2852,
									"end": 2884,
									"name": "SLT",
									"source": 12
								},
								{
									"begin": 2849,
									"end": 2968,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 2849,
									"end": 2968,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "73"
								},
								{
									"begin": 2849,
									"end": 2968,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 2887,
									"end": 2966,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "74"
								},
								{
									"begin": 2887,
									"end": 2966,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "25"
								},
								{
									"begin": 2887,
									"end": 2966,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 2887,
									"end": 2966,
									"name": "tag",
									"source": 12,
									"value": "74"
								},
								{
									"begin": 2887,
									"end": 2966,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 2849,
									"end": 2968,
									"name": "tag",
									"source": 12,
									"value": "73"
								},
								{
									"begin": 2849,
									"end": 2968,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3028,
									"end": 3029,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 3017,
									"end": 3026,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 3013,
									"end": 3030,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 3007,
									"end": 3031,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 3058,
									"end": 3076,
									"name": "PUSH",
									"source": 12,
									"value": "FFFFFFFFFFFFFFFF"
								},
								{
									"begin": 3050,
									"end": 3056,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 3047,
									"end": 3077,
									"name": "GT",
									"source": 12
								},
								{
									"begin": 3044,
									"end": 3161,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 3044,
									"end": 3161,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "75"
								},
								{
									"begin": 3044,
									"end": 3161,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 3080,
									"end": 3159,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "76"
								},
								{
									"begin": 3080,
									"end": 3159,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "26"
								},
								{
									"begin": 3080,
									"end": 3159,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 3080,
									"end": 3159,
									"name": "tag",
									"source": 12,
									"value": "76"
								},
								{
									"begin": 3080,
									"end": 3159,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3044,
									"end": 3161,
									"name": "tag",
									"source": 12,
									"value": "75"
								},
								{
									"begin": 3044,
									"end": 3161,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3185,
									"end": 3259,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "77"
								},
								{
									"begin": 3251,
									"end": 3258,
									"name": "DUP6",
									"source": 12
								},
								{
									"begin": 3242,
									"end": 3248,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 3231,
									"end": 3240,
									"name": "DUP7",
									"source": 12
								},
								{
									"begin": 3227,
									"end": 3249,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 3185,
									"end": 3259,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "36"
								},
								{
									"begin": 3185,
									"end": 3259,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 3185,
									"end": 3259,
									"name": "tag",
									"source": 12,
									"value": "77"
								},
								{
									"begin": 3185,
									"end": 3259,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3175,
									"end": 3259,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 3175,
									"end": 3259,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2978,
									"end": 3269,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 3329,
									"end": 3331,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 3318,
									"end": 3327,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 3314,
									"end": 3332,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 3308,
									"end": 3333,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 3360,
									"end": 3378,
									"name": "PUSH",
									"source": 12,
									"value": "FFFFFFFFFFFFFFFF"
								},
								{
									"begin": 3352,
									"end": 3358,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 3349,
									"end": 3379,
									"name": "GT",
									"source": 12
								},
								{
									"begin": 3346,
									"end": 3463,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 3346,
									"end": 3463,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "78"
								},
								{
									"begin": 3346,
									"end": 3463,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 3382,
									"end": 3461,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "79"
								},
								{
									"begin": 3382,
									"end": 3461,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "26"
								},
								{
									"begin": 3382,
									"end": 3461,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 3382,
									"end": 3461,
									"name": "tag",
									"source": 12,
									"value": "79"
								},
								{
									"begin": 3382,
									"end": 3461,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3346,
									"end": 3463,
									"name": "tag",
									"source": 12,
									"value": "78"
								},
								{
									"begin": 3346,
									"end": 3463,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3487,
									"end": 3561,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "80"
								},
								{
									"begin": 3553,
									"end": 3560,
									"name": "DUP6",
									"source": 12
								},
								{
									"begin": 3544,
									"end": 3550,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 3533,
									"end": 3542,
									"name": "DUP7",
									"source": 12
								},
								{
									"begin": 3529,
									"end": 3551,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 3487,
									"end": 3561,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "36"
								},
								{
									"begin": 3487,
									"end": 3561,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 3487,
									"end": 3561,
									"name": "tag",
									"source": 12,
									"value": "80"
								},
								{
									"begin": 3487,
									"end": 3561,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3477,
									"end": 3561,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 3477,
									"end": 3561,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 3279,
									"end": 3571,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2725,
									"end": 3578,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 2725,
									"end": 3578,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2725,
									"end": 3578,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 2725,
									"end": 3578,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 2725,
									"end": 3578,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 2725,
									"end": 3578,
									"name": "JUMP",
									"source": 12,
									"value": "[out]"
								},
								{
									"begin": 3584,
									"end": 3764,
									"name": "tag",
									"source": 12,
									"value": "37"
								},
								{
									"begin": 3584,
									"end": 3764,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3632,
									"end": 3709,
									"name": "PUSH",
									"source": 12,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 3629,
									"end": 3630,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 3622,
									"end": 3710,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 3729,
									"end": 3733,
									"name": "PUSH",
									"source": 12,
									"value": "22"
								},
								{
									"begin": 3726,
									"end": 3727,
									"name": "PUSH",
									"source": 12,
									"value": "4"
								},
								{
									"begin": 3719,
									"end": 3734,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 3753,
									"end": 3757,
									"name": "PUSH",
									"source": 12,
									"value": "24"
								},
								{
									"begin": 3750,
									"end": 3751,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 3743,
									"end": 3758,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 3770,
									"end": 4090,
									"name": "tag",
									"source": 12,
									"value": "14"
								},
								{
									"begin": 3770,
									"end": 4090,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3814,
									"end": 3820,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 3851,
									"end": 3852,
									"name": "PUSH",
									"source": 12,
									"value": "2"
								},
								{
									"begin": 3845,
									"end": 3849,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 3841,
									"end": 3853,
									"name": "DIV",
									"source": 12
								},
								{
									"begin": 3831,
									"end": 3853,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 3831,
									"end": 3853,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 3898,
									"end": 3899,
									"name": "PUSH",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 3892,
									"end": 3896,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 3888,
									"end": 3900,
									"name": "AND",
									"source": 12
								},
								{
									"begin": 3919,
									"end": 3937,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 3909,
									"end": 3990,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "83"
								},
								{
									"begin": 3909,
									"end": 3990,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 3975,
									"end": 3979,
									"name": "PUSH",
									"source": 12,
									"value": "7F"
								},
								{
									"begin": 3967,
									"end": 3973,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 3963,
									"end": 3980,
									"name": "AND",
									"source": 12
								},
								{
									"begin": 3953,
									"end": 3980,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 3953,
									"end": 3980,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 3909,
									"end": 3990,
									"name": "tag",
									"source": 12,
									"value": "83"
								},
								{
									"begin": 3909,
									"end": 3990,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 4037,
									"end": 4039,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 4029,
									"end": 4035,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 4026,
									"end": 4040,
									"name": "LT",
									"source": 12
								},
								{
									"begin": 4006,
									"end": 4024,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 4003,
									"end": 4041,
									"name": "SUB",
									"source": 12
								},
								{
									"begin": 4000,
									"end": 4084,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "84"
								},
								{
									"begin": 4000,
									"end": 4084,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 4056,
									"end": 4074,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "85"
								},
								{
									"begin": 4056,
									"end": 4074,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "37"
								},
								{
									"begin": 4056,
									"end": 4074,
									"name": "JUMP",
									"source": 12,
									"value": "[in]"
								},
								{
									"begin": 4056,
									"end": 4074,
									"name": "tag",
									"source": 12,
									"value": "85"
								},
								{
									"begin": 4056,
									"end": 4074,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 4000,
									"end": 4084,
									"name": "tag",
									"source": 12,
									"value": "84"
								},
								{
									"begin": 4000,
									"end": 4084,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 3821,
									"end": 4090,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 3770,
									"end": 4090,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 3770,
									"end": 4090,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 3770,
									"end": 4090,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 3770,
									"end": 4090,
									"name": "JUMP",
									"source": 12,
									"value": "[out]"
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "tag",
									"source": 9,
									"value": "11"
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "PUSH #[$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "PUSH [$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "CODECOPY",
									"source": 9
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 1018,
									"end": 22873,
									"name": "RETURN",
									"source": 9
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212200aa029e4dc520328a062fe60d2875c4d9b682beb4d6bf94f2a5bfb1d1219fe6064736f6c634300080d0033",
									".code": [
										{
											"begin": 1018,
											"end": 22873,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "tag",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "PUSH",
											"source": 9,
											"value": "42842E0E"
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "18"
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "PUSH",
											"source": 9,
											"value": "A22CB465"
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "19"
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "PUSH",
											"source": 9,
											"value": "A22CB465"
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "14"
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "PUSH",
											"source": 9,
											"value": "B88D4FDE"
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "15"
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "PUSH",
											"source": 9,
											"value": "C87B56DD"
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "16"
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "PUSH",
											"source": 9,
											"value": "E985E9C5"
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "17"
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "tag",
											"source": 9,
											"value": "19"
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "PUSH",
											"source": 9,
											"value": "42842E0E"
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "10"
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "PUSH",
											"source": 9,
											"value": "6352211E"
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "11"
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "PUSH",
											"source": 9,
											"value": "70A08231"
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "12"
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "PUSH",
											"source": 9,
											"value": "95D89B41"
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "13"
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "tag",
											"source": 9,
											"value": "18"
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "PUSH",
											"source": 9,
											"value": "95EA7B3"
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "PUSH",
											"source": 9,
											"value": "95EA7B3"
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "PUSH",
											"source": 9,
											"value": "18160DDD"
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "PUSH",
											"source": 9,
											"value": "23B872DD"
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "PUSH",
											"source": 9,
											"value": "325B272A"
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "9"
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "tag",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "PUSH",
											"source": 9,
											"value": "1FFC9A7"
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "PUSH",
											"source": 9,
											"value": "6FDDE03"
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "PUSH",
											"source": 9,
											"value": "81812FC"
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "tag",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1018,
											"end": 22873,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 3971,
											"end": 4276,
											"name": "tag",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 3971,
											"end": 4276,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3971,
											"end": 4276,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "21"
										},
										{
											"begin": 3971,
											"end": 4276,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 3971,
											"end": 4276,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3971,
											"end": 4276,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 3971,
											"end": 4276,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 3971,
											"end": 4276,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3971,
											"end": 4276,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3971,
											"end": 4276,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3971,
											"end": 4276,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "22"
										},
										{
											"begin": 3971,
											"end": 4276,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3971,
											"end": 4276,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3971,
											"end": 4276,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "23"
										},
										{
											"begin": 3971,
											"end": 4276,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3971,
											"end": 4276,
											"name": "tag",
											"source": 9,
											"value": "22"
										},
										{
											"begin": 3971,
											"end": 4276,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3971,
											"end": 4276,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 3971,
											"end": 4276,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3971,
											"end": 4276,
											"name": "tag",
											"source": 9,
											"value": "21"
										},
										{
											"begin": 3971,
											"end": 4276,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3971,
											"end": 4276,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3971,
											"end": 4276,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3971,
											"end": 4276,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "25"
										},
										{
											"begin": 3971,
											"end": 4276,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3971,
											"end": 4276,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3971,
											"end": 4276,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "26"
										},
										{
											"begin": 3971,
											"end": 4276,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3971,
											"end": 4276,
											"name": "tag",
											"source": 9,
											"value": "25"
										},
										{
											"begin": 3971,
											"end": 4276,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3971,
											"end": 4276,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3971,
											"end": 4276,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3971,
											"end": 4276,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3971,
											"end": 4276,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3971,
											"end": 4276,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 3971,
											"end": 4276,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3971,
											"end": 4276,
											"name": "RETURN",
											"source": 9
										},
										{
											"begin": 7086,
											"end": 7186,
											"name": "tag",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 7086,
											"end": 7186,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7086,
											"end": 7186,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "27"
										},
										{
											"begin": 7086,
											"end": 7186,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "28"
										},
										{
											"begin": 7086,
											"end": 7186,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 7086,
											"end": 7186,
											"name": "tag",
											"source": 9,
											"value": "27"
										},
										{
											"begin": 7086,
											"end": 7186,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7086,
											"end": 7186,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 7086,
											"end": 7186,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 7086,
											"end": 7186,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "29"
										},
										{
											"begin": 7086,
											"end": 7186,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 7086,
											"end": 7186,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7086,
											"end": 7186,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "30"
										},
										{
											"begin": 7086,
											"end": 7186,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 7086,
											"end": 7186,
											"name": "tag",
											"source": 9,
											"value": "29"
										},
										{
											"begin": 7086,
											"end": 7186,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7086,
											"end": 7186,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 7086,
											"end": 7186,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 7086,
											"end": 7186,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 7086,
											"end": 7186,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 7086,
											"end": 7186,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 7086,
											"end": 7186,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7086,
											"end": 7186,
											"name": "RETURN",
											"source": 9
										},
										{
											"begin": 8671,
											"end": 8875,
											"name": "tag",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 8671,
											"end": 8875,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8671,
											"end": 8875,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "31"
										},
										{
											"begin": 8671,
											"end": 8875,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 8671,
											"end": 8875,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 8671,
											"end": 8875,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 8671,
											"end": 8875,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 8671,
											"end": 8875,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 8671,
											"end": 8875,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 8671,
											"end": 8875,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8671,
											"end": 8875,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "32"
										},
										{
											"begin": 8671,
											"end": 8875,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 8671,
											"end": 8875,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8671,
											"end": 8875,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "33"
										},
										{
											"begin": 8671,
											"end": 8875,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 8671,
											"end": 8875,
											"name": "tag",
											"source": 9,
											"value": "32"
										},
										{
											"begin": 8671,
											"end": 8875,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8671,
											"end": 8875,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "34"
										},
										{
											"begin": 8671,
											"end": 8875,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 8671,
											"end": 8875,
											"name": "tag",
											"source": 9,
											"value": "31"
										},
										{
											"begin": 8671,
											"end": 8875,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8671,
											"end": 8875,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 8671,
											"end": 8875,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 8671,
											"end": 8875,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "35"
										},
										{
											"begin": 8671,
											"end": 8875,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 8671,
											"end": 8875,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8671,
											"end": 8875,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "36"
										},
										{
											"begin": 8671,
											"end": 8875,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 8671,
											"end": 8875,
											"name": "tag",
											"source": 9,
											"value": "35"
										},
										{
											"begin": 8671,
											"end": 8875,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8671,
											"end": 8875,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 8671,
											"end": 8875,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 8671,
											"end": 8875,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 8671,
											"end": 8875,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 8671,
											"end": 8875,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 8671,
											"end": 8875,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8671,
											"end": 8875,
											"name": "RETURN",
											"source": 9
										},
										{
											"begin": 8233,
											"end": 8605,
											"name": "tag",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 8233,
											"end": 8605,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8233,
											"end": 8605,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "37"
										},
										{
											"begin": 8233,
											"end": 8605,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 8233,
											"end": 8605,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 8233,
											"end": 8605,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 8233,
											"end": 8605,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 8233,
											"end": 8605,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 8233,
											"end": 8605,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 8233,
											"end": 8605,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8233,
											"end": 8605,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "38"
										},
										{
											"begin": 8233,
											"end": 8605,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 8233,
											"end": 8605,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8233,
											"end": 8605,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "39"
										},
										{
											"begin": 8233,
											"end": 8605,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 8233,
											"end": 8605,
											"name": "tag",
											"source": 9,
											"value": "38"
										},
										{
											"begin": 8233,
											"end": 8605,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8233,
											"end": 8605,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 8233,
											"end": 8605,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 8233,
											"end": 8605,
											"name": "tag",
											"source": 9,
											"value": "37"
										},
										{
											"begin": 8233,
											"end": 8605,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8233,
											"end": 8605,
											"name": "STOP",
											"source": 9
										},
										{
											"begin": 3211,
											"end": 3523,
											"name": "tag",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 3211,
											"end": 3523,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3211,
											"end": 3523,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "41"
										},
										{
											"begin": 3211,
											"end": 3523,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "42"
										},
										{
											"begin": 3211,
											"end": 3523,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3211,
											"end": 3523,
											"name": "tag",
											"source": 9,
											"value": "41"
										},
										{
											"begin": 3211,
											"end": 3523,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3211,
											"end": 3523,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3211,
											"end": 3523,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3211,
											"end": 3523,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "43"
										},
										{
											"begin": 3211,
											"end": 3523,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3211,
											"end": 3523,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3211,
											"end": 3523,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 3211,
											"end": 3523,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3211,
											"end": 3523,
											"name": "tag",
											"source": 9,
											"value": "43"
										},
										{
											"begin": 3211,
											"end": 3523,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3211,
											"end": 3523,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3211,
											"end": 3523,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3211,
											"end": 3523,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3211,
											"end": 3523,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3211,
											"end": 3523,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 3211,
											"end": 3523,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3211,
											"end": 3523,
											"name": "RETURN",
											"source": 9
										},
										{
											"begin": 9536,
											"end": 9706,
											"name": "tag",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 9536,
											"end": 9706,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 9536,
											"end": 9706,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "45"
										},
										{
											"begin": 9536,
											"end": 9706,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 9536,
											"end": 9706,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 9536,
											"end": 9706,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 9536,
											"end": 9706,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 9536,
											"end": 9706,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 9536,
											"end": 9706,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 9536,
											"end": 9706,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9536,
											"end": 9706,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "46"
										},
										{
											"begin": 9536,
											"end": 9706,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 9536,
											"end": 9706,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9536,
											"end": 9706,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "47"
										},
										{
											"begin": 9536,
											"end": 9706,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 9536,
											"end": 9706,
											"name": "tag",
											"source": 9,
											"value": "46"
										},
										{
											"begin": 9536,
											"end": 9706,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 9536,
											"end": 9706,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "48"
										},
										{
											"begin": 9536,
											"end": 9706,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 9536,
											"end": 9706,
											"name": "tag",
											"source": 9,
											"value": "45"
										},
										{
											"begin": 9536,
											"end": 9706,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 9536,
											"end": 9706,
											"name": "STOP",
											"source": 9
										},
										{
											"begin": 2359,
											"end": 2655,
											"name": "tag",
											"source": 9,
											"value": "9"
										},
										{
											"begin": 2359,
											"end": 2655,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2359,
											"end": 2655,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "49"
										},
										{
											"begin": 2359,
											"end": 2655,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 2359,
											"end": 2655,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2359,
											"end": 2655,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 2359,
											"end": 2655,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 2359,
											"end": 2655,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2359,
											"end": 2655,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2359,
											"end": 2655,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2359,
											"end": 2655,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "50"
										},
										{
											"begin": 2359,
											"end": 2655,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2359,
											"end": 2655,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2359,
											"end": 2655,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "51"
										},
										{
											"begin": 2359,
											"end": 2655,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2359,
											"end": 2655,
											"name": "tag",
											"source": 9,
											"value": "50"
										},
										{
											"begin": 2359,
											"end": 2655,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2359,
											"end": 2655,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "52"
										},
										{
											"begin": 2359,
											"end": 2655,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2359,
											"end": 2655,
											"name": "tag",
											"source": 9,
											"value": "49"
										},
										{
											"begin": 2359,
											"end": 2655,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2359,
											"end": 2655,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2359,
											"end": 2655,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2359,
											"end": 2655,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "53"
										},
										{
											"begin": 2359,
											"end": 2655,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2359,
											"end": 2655,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2359,
											"end": 2655,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 2359,
											"end": 2655,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2359,
											"end": 2655,
											"name": "tag",
											"source": 9,
											"value": "53"
										},
										{
											"begin": 2359,
											"end": 2655,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2359,
											"end": 2655,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2359,
											"end": 2655,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2359,
											"end": 2655,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2359,
											"end": 2655,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2359,
											"end": 2655,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 2359,
											"end": 2655,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2359,
											"end": 2655,
											"name": "RETURN",
											"source": 9
										},
										{
											"begin": 9777,
											"end": 9962,
											"name": "tag",
											"source": 9,
											"value": "10"
										},
										{
											"begin": 9777,
											"end": 9962,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 9777,
											"end": 9962,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "54"
										},
										{
											"begin": 9777,
											"end": 9962,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 9777,
											"end": 9962,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 9777,
											"end": 9962,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 9777,
											"end": 9962,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 9777,
											"end": 9962,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 9777,
											"end": 9962,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 9777,
											"end": 9962,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9777,
											"end": 9962,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "55"
										},
										{
											"begin": 9777,
											"end": 9962,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 9777,
											"end": 9962,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9777,
											"end": 9962,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "47"
										},
										{
											"begin": 9777,
											"end": 9962,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 9777,
											"end": 9962,
											"name": "tag",
											"source": 9,
											"value": "55"
										},
										{
											"begin": 9777,
											"end": 9962,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 9777,
											"end": 9962,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "56"
										},
										{
											"begin": 9777,
											"end": 9962,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 9777,
											"end": 9962,
											"name": "tag",
											"source": 9,
											"value": "54"
										},
										{
											"begin": 9777,
											"end": 9962,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 9777,
											"end": 9962,
											"name": "STOP",
											"source": 9
										},
										{
											"begin": 6894,
											"end": 7019,
											"name": "tag",
											"source": 9,
											"value": "11"
										},
										{
											"begin": 6894,
											"end": 7019,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6894,
											"end": 7019,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "57"
										},
										{
											"begin": 6894,
											"end": 7019,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 6894,
											"end": 7019,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6894,
											"end": 7019,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 6894,
											"end": 7019,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 6894,
											"end": 7019,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6894,
											"end": 7019,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6894,
											"end": 7019,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6894,
											"end": 7019,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "58"
										},
										{
											"begin": 6894,
											"end": 7019,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 6894,
											"end": 7019,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6894,
											"end": 7019,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "33"
										},
										{
											"begin": 6894,
											"end": 7019,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 6894,
											"end": 7019,
											"name": "tag",
											"source": 9,
											"value": "58"
										},
										{
											"begin": 6894,
											"end": 7019,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6894,
											"end": 7019,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "59"
										},
										{
											"begin": 6894,
											"end": 7019,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 6894,
											"end": 7019,
											"name": "tag",
											"source": 9,
											"value": "57"
										},
										{
											"begin": 6894,
											"end": 7019,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6894,
											"end": 7019,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 6894,
											"end": 7019,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 6894,
											"end": 7019,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 6894,
											"end": 7019,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 6894,
											"end": 7019,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6894,
											"end": 7019,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "36"
										},
										{
											"begin": 6894,
											"end": 7019,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 6894,
											"end": 7019,
											"name": "tag",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 6894,
											"end": 7019,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6894,
											"end": 7019,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 6894,
											"end": 7019,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 6894,
											"end": 7019,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6894,
											"end": 7019,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 6894,
											"end": 7019,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 6894,
											"end": 7019,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6894,
											"end": 7019,
											"name": "RETURN",
											"source": 9
										},
										{
											"begin": 4340,
											"end": 4546,
											"name": "tag",
											"source": 9,
											"value": "12"
										},
										{
											"begin": 4340,
											"end": 4546,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4340,
											"end": 4546,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "61"
										},
										{
											"begin": 4340,
											"end": 4546,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 4340,
											"end": 4546,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4340,
											"end": 4546,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 4340,
											"end": 4546,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 4340,
											"end": 4546,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4340,
											"end": 4546,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4340,
											"end": 4546,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4340,
											"end": 4546,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "62"
										},
										{
											"begin": 4340,
											"end": 4546,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4340,
											"end": 4546,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4340,
											"end": 4546,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "51"
										},
										{
											"begin": 4340,
											"end": 4546,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 4340,
											"end": 4546,
											"name": "tag",
											"source": 9,
											"value": "62"
										},
										{
											"begin": 4340,
											"end": 4546,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4340,
											"end": 4546,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "63"
										},
										{
											"begin": 4340,
											"end": 4546,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 4340,
											"end": 4546,
											"name": "tag",
											"source": 9,
											"value": "61"
										},
										{
											"begin": 4340,
											"end": 4546,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4340,
											"end": 4546,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 4340,
											"end": 4546,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 4340,
											"end": 4546,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 4340,
											"end": 4546,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4340,
											"end": 4546,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4340,
											"end": 4546,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 4340,
											"end": 4546,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 4340,
											"end": 4546,
											"name": "tag",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 4340,
											"end": 4546,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4340,
											"end": 4546,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 4340,
											"end": 4546,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 4340,
											"end": 4546,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4340,
											"end": 4546,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4340,
											"end": 4546,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 4340,
											"end": 4546,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4340,
											"end": 4546,
											"name": "RETURN",
											"source": 9
										},
										{
											"begin": 7255,
											"end": 7359,
											"name": "tag",
											"source": 9,
											"value": "13"
										},
										{
											"begin": 7255,
											"end": 7359,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7255,
											"end": 7359,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "65"
										},
										{
											"begin": 7255,
											"end": 7359,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "66"
										},
										{
											"begin": 7255,
											"end": 7359,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 7255,
											"end": 7359,
											"name": "tag",
											"source": 9,
											"value": "65"
										},
										{
											"begin": 7255,
											"end": 7359,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7255,
											"end": 7359,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 7255,
											"end": 7359,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 7255,
											"end": 7359,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "67"
										},
										{
											"begin": 7255,
											"end": 7359,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 7255,
											"end": 7359,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7255,
											"end": 7359,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "30"
										},
										{
											"begin": 7255,
											"end": 7359,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 7255,
											"end": 7359,
											"name": "tag",
											"source": 9,
											"value": "67"
										},
										{
											"begin": 7255,
											"end": 7359,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7255,
											"end": 7359,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 7255,
											"end": 7359,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 7255,
											"end": 7359,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 7255,
											"end": 7359,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 7255,
											"end": 7359,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 7255,
											"end": 7359,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7255,
											"end": 7359,
											"name": "RETURN",
											"source": 9
										},
										{
											"begin": 8947,
											"end": 9234,
											"name": "tag",
											"source": 9,
											"value": "14"
										},
										{
											"begin": 8947,
											"end": 9234,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8947,
											"end": 9234,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 8947,
											"end": 9234,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 8947,
											"end": 9234,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 8947,
											"end": 9234,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 8947,
											"end": 9234,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 8947,
											"end": 9234,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 8947,
											"end": 9234,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 8947,
											"end": 9234,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8947,
											"end": 9234,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "69"
										},
										{
											"begin": 8947,
											"end": 9234,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 8947,
											"end": 9234,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8947,
											"end": 9234,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "70"
										},
										{
											"begin": 8947,
											"end": 9234,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 8947,
											"end": 9234,
											"name": "tag",
											"source": 9,
											"value": "69"
										},
										{
											"begin": 8947,
											"end": 9234,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8947,
											"end": 9234,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "71"
										},
										{
											"begin": 8947,
											"end": 9234,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 8947,
											"end": 9234,
											"name": "tag",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 8947,
											"end": 9234,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8947,
											"end": 9234,
											"name": "STOP",
											"source": 9
										},
										{
											"begin": 10033,
											"end": 10403,
											"name": "tag",
											"source": 9,
											"value": "15"
										},
										{
											"begin": 10033,
											"end": 10403,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10033,
											"end": 10403,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "72"
										},
										{
											"begin": 10033,
											"end": 10403,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 10033,
											"end": 10403,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 10033,
											"end": 10403,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 10033,
											"end": 10403,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 10033,
											"end": 10403,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10033,
											"end": 10403,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10033,
											"end": 10403,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10033,
											"end": 10403,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "73"
										},
										{
											"begin": 10033,
											"end": 10403,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 10033,
											"end": 10403,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10033,
											"end": 10403,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "74"
										},
										{
											"begin": 10033,
											"end": 10403,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 10033,
											"end": 10403,
											"name": "tag",
											"source": 9,
											"value": "73"
										},
										{
											"begin": 10033,
											"end": 10403,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10033,
											"end": 10403,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "75"
										},
										{
											"begin": 10033,
											"end": 10403,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 10033,
											"end": 10403,
											"name": "tag",
											"source": 9,
											"value": "72"
										},
										{
											"begin": 10033,
											"end": 10403,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10033,
											"end": 10403,
											"name": "STOP",
											"source": 9
										},
										{
											"begin": 7430,
											"end": 7748,
											"name": "tag",
											"source": 9,
											"value": "16"
										},
										{
											"begin": 7430,
											"end": 7748,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7430,
											"end": 7748,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "76"
										},
										{
											"begin": 7430,
											"end": 7748,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 7430,
											"end": 7748,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 7430,
											"end": 7748,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 7430,
											"end": 7748,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 7430,
											"end": 7748,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7430,
											"end": 7748,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7430,
											"end": 7748,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7430,
											"end": 7748,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "77"
										},
										{
											"begin": 7430,
											"end": 7748,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 7430,
											"end": 7748,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7430,
											"end": 7748,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "33"
										},
										{
											"begin": 7430,
											"end": 7748,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 7430,
											"end": 7748,
											"name": "tag",
											"source": 9,
											"value": "77"
										},
										{
											"begin": 7430,
											"end": 7748,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7430,
											"end": 7748,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "78"
										},
										{
											"begin": 7430,
											"end": 7748,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 7430,
											"end": 7748,
											"name": "tag",
											"source": 9,
											"value": "76"
										},
										{
											"begin": 7430,
											"end": 7748,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7430,
											"end": 7748,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 7430,
											"end": 7748,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 7430,
											"end": 7748,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "79"
										},
										{
											"begin": 7430,
											"end": 7748,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 7430,
											"end": 7748,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7430,
											"end": 7748,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "30"
										},
										{
											"begin": 7430,
											"end": 7748,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 7430,
											"end": 7748,
											"name": "tag",
											"source": 9,
											"value": "79"
										},
										{
											"begin": 7430,
											"end": 7748,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7430,
											"end": 7748,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 7430,
											"end": 7748,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 7430,
											"end": 7748,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 7430,
											"end": 7748,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 7430,
											"end": 7748,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 7430,
											"end": 7748,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7430,
											"end": 7748,
											"name": "RETURN",
											"source": 9
										},
										{
											"begin": 9305,
											"end": 9469,
											"name": "tag",
											"source": 9,
											"value": "17"
										},
										{
											"begin": 9305,
											"end": 9469,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 9305,
											"end": 9469,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 9305,
											"end": 9469,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 9305,
											"end": 9469,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 9305,
											"end": 9469,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 9305,
											"end": 9469,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 9305,
											"end": 9469,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 9305,
											"end": 9469,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 9305,
											"end": 9469,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9305,
											"end": 9469,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "81"
										},
										{
											"begin": 9305,
											"end": 9469,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 9305,
											"end": 9469,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9305,
											"end": 9469,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "82"
										},
										{
											"begin": 9305,
											"end": 9469,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 9305,
											"end": 9469,
											"name": "tag",
											"source": 9,
											"value": "81"
										},
										{
											"begin": 9305,
											"end": 9469,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 9305,
											"end": 9469,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "83"
										},
										{
											"begin": 9305,
											"end": 9469,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 9305,
											"end": 9469,
											"name": "tag",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 9305,
											"end": 9469,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 9305,
											"end": 9469,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 9305,
											"end": 9469,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 9305,
											"end": 9469,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 9305,
											"end": 9469,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 9305,
											"end": 9469,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9305,
											"end": 9469,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "26"
										},
										{
											"begin": 9305,
											"end": 9469,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 9305,
											"end": 9469,
											"name": "tag",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 9305,
											"end": 9469,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 9305,
											"end": 9469,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 9305,
											"end": 9469,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 9305,
											"end": 9469,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 9305,
											"end": 9469,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 9305,
											"end": 9469,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 9305,
											"end": 9469,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9305,
											"end": 9469,
											"name": "RETURN",
											"source": 9
										},
										{
											"begin": 3971,
											"end": 4276,
											"name": "tag",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 3971,
											"end": 4276,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4073,
											"end": 4077,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4125,
											"end": 4150,
											"name": "PUSH",
											"source": 9,
											"value": "80AC58CD00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4110,
											"end": 4150,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4110,
											"end": 4150,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 4110,
											"end": 4150,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4110,
											"end": 4121,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4110,
											"end": 4150,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4110,
											"end": 4150,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 4110,
											"end": 4150,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4110,
											"end": 4150,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 4110,
											"end": 4215,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4110,
											"end": 4215,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "86"
										},
										{
											"begin": 4110,
											"end": 4215,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 4110,
											"end": 4215,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4182,
											"end": 4215,
											"name": "PUSH",
											"source": 9,
											"value": "5B5E139F00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4167,
											"end": 4215,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4167,
											"end": 4215,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 4167,
											"end": 4215,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4167,
											"end": 4178,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4167,
											"end": 4215,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4167,
											"end": 4215,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 4167,
											"end": 4215,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4167,
											"end": 4215,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 4110,
											"end": 4215,
											"name": "tag",
											"source": 9,
											"value": "86"
										},
										{
											"begin": 4110,
											"end": 4215,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4110,
											"end": 4268,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4110,
											"end": 4268,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "87"
										},
										{
											"begin": 4110,
											"end": 4268,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 4110,
											"end": 4268,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4232,
											"end": 4268,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "88"
										},
										{
											"begin": 4256,
											"end": 4267,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4232,
											"end": 4255,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "89"
										},
										{
											"begin": 4232,
											"end": 4268,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 4232,
											"end": 4268,
											"name": "tag",
											"source": 9,
											"value": "88"
										},
										{
											"begin": 4232,
											"end": 4268,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4110,
											"end": 4268,
											"name": "tag",
											"source": 9,
											"value": "87"
										},
										{
											"begin": 4110,
											"end": 4268,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4090,
											"end": 4268,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4090,
											"end": 4268,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3971,
											"end": 4276,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3971,
											"end": 4276,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3971,
											"end": 4276,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3971,
											"end": 4276,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 7086,
											"end": 7186,
											"name": "tag",
											"source": 9,
											"value": "28"
										},
										{
											"begin": 7086,
											"end": 7186,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7140,
											"end": 7153,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 7173,
											"end": 7178,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "91"
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "92"
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "tag",
											"source": 9,
											"value": "91"
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "93"
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "92"
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "tag",
											"source": 9,
											"value": "93"
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "94"
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "95"
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "94"
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "tag",
											"source": 9,
											"value": "95"
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "tag",
											"source": 9,
											"value": "96"
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "96"
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "tag",
											"source": 9,
											"value": "94"
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7166,
											"end": 7178,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7086,
											"end": 7186,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7086,
											"end": 7186,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 8671,
											"end": 8875,
											"name": "tag",
											"source": 9,
											"value": "34"
										},
										{
											"begin": 8671,
											"end": 8875,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8739,
											"end": 8746,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 8764,
											"end": 8780,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "98"
										},
										{
											"begin": 8772,
											"end": 8779,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 8764,
											"end": 8771,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "99"
										},
										{
											"begin": 8764,
											"end": 8780,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 8764,
											"end": 8780,
											"name": "tag",
											"source": 9,
											"value": "98"
										},
										{
											"begin": 8764,
											"end": 8780,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8759,
											"end": 8823,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 8759,
											"end": 8823,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 8789,
											"end": 8823,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 8789,
											"end": 8823,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 8789,
											"end": 8823,
											"name": "PUSH",
											"source": 9,
											"value": "CF4700E400000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 8789,
											"end": 8823,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 8789,
											"end": 8823,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 8789,
											"end": 8823,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 8789,
											"end": 8823,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 8789,
											"end": 8823,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 8789,
											"end": 8823,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 8789,
											"end": 8823,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 8789,
											"end": 8823,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 8789,
											"end": 8823,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 8789,
											"end": 8823,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8789,
											"end": 8823,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 8759,
											"end": 8823,
											"name": "tag",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 8759,
											"end": 8823,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8843,
											"end": 8858,
											"name": "PUSH",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 8843,
											"end": 8867,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 8859,
											"end": 8866,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 8843,
											"end": 8867,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 8843,
											"end": 8867,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 8843,
											"end": 8867,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 8843,
											"end": 8867,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 8843,
											"end": 8867,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8843,
											"end": 8867,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 8843,
											"end": 8867,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 8843,
											"end": 8867,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 8843,
											"end": 8867,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 8843,
											"end": 8867,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 8843,
											"end": 8867,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 8843,
											"end": 8867,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 8843,
											"end": 8867,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8843,
											"end": 8867,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 8843,
											"end": 8867,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8843,
											"end": 8867,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 8843,
											"end": 8867,
											"name": "EXP",
											"source": 9
										},
										{
											"begin": 8843,
											"end": 8867,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8843,
											"end": 8867,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 8843,
											"end": 8867,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8843,
											"end": 8867,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 8836,
											"end": 8867,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8836,
											"end": 8867,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 8671,
											"end": 8875,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 8671,
											"end": 8875,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8671,
											"end": 8875,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 8671,
											"end": 8875,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 8233,
											"end": 8605,
											"name": "tag",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 8233,
											"end": 8605,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8306,
											"end": 8319,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 8322,
											"end": 8346,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "102"
										},
										{
											"begin": 8338,
											"end": 8345,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 8322,
											"end": 8337,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "59"
										},
										{
											"begin": 8322,
											"end": 8346,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 8322,
											"end": 8346,
											"name": "tag",
											"source": 9,
											"value": "102"
										},
										{
											"begin": 8322,
											"end": 8346,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8306,
											"end": 8346,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8306,
											"end": 8346,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 8367,
											"end": 8372,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 8361,
											"end": 8372,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8361,
											"end": 8372,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 8361,
											"end": 8363,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 8361,
											"end": 8372,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8361,
											"end": 8372,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 8361,
											"end": 8372,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 8357,
											"end": 8405,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "103"
										},
										{
											"begin": 8357,
											"end": 8405,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 8381,
											"end": 8405,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 8381,
											"end": 8405,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 8381,
											"end": 8405,
											"name": "PUSH",
											"source": 9,
											"value": "943F7B8C00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 8381,
											"end": 8405,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 8381,
											"end": 8405,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 8381,
											"end": 8405,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 8381,
											"end": 8405,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 8381,
											"end": 8405,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 8381,
											"end": 8405,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 8381,
											"end": 8405,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 8381,
											"end": 8405,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 8381,
											"end": 8405,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 8381,
											"end": 8405,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8381,
											"end": 8405,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 8357,
											"end": 8405,
											"name": "tag",
											"source": 9,
											"value": "103"
										},
										{
											"begin": 8357,
											"end": 8405,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8438,
											"end": 8443,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 8422,
											"end": 8443,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8422,
											"end": 8443,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 8422,
											"end": 8434,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "104"
										},
										{
											"begin": 8422,
											"end": 8432,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "105"
										},
										{
											"begin": 8422,
											"end": 8434,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 8422,
											"end": 8434,
											"name": "tag",
											"source": 9,
											"value": "104"
										},
										{
											"begin": 8422,
											"end": 8434,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8422,
											"end": 8443,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8422,
											"end": 8443,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 8422,
											"end": 8443,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 8418,
											"end": 8557,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "106"
										},
										{
											"begin": 8418,
											"end": 8557,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 8449,
											"end": 8486,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "107"
										},
										{
											"begin": 8466,
											"end": 8471,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 8473,
											"end": 8485,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "108"
										},
										{
											"begin": 8473,
											"end": 8483,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "105"
										},
										{
											"begin": 8473,
											"end": 8485,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 8473,
											"end": 8485,
											"name": "tag",
											"source": 9,
											"value": "108"
										},
										{
											"begin": 8473,
											"end": 8485,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8449,
											"end": 8465,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "83"
										},
										{
											"begin": 8449,
											"end": 8486,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 8449,
											"end": 8486,
											"name": "tag",
											"source": 9,
											"value": "107"
										},
										{
											"begin": 8449,
											"end": 8486,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8445,
											"end": 8557,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "109"
										},
										{
											"begin": 8445,
											"end": 8557,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 8510,
											"end": 8545,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 8510,
											"end": 8545,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 8510,
											"end": 8545,
											"name": "PUSH",
											"source": 9,
											"value": "CFB3B94200000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 8510,
											"end": 8545,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 8510,
											"end": 8545,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 8510,
											"end": 8545,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 8510,
											"end": 8545,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 8510,
											"end": 8545,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 8510,
											"end": 8545,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 8510,
											"end": 8545,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 8510,
											"end": 8545,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 8510,
											"end": 8545,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 8510,
											"end": 8545,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8510,
											"end": 8545,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 8445,
											"end": 8557,
											"name": "tag",
											"source": 9,
											"value": "109"
										},
										{
											"begin": 8445,
											"end": 8557,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8418,
											"end": 8557,
											"name": "tag",
											"source": 9,
											"value": "106"
										},
										{
											"begin": 8418,
											"end": 8557,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8569,
											"end": 8597,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "110"
										},
										{
											"begin": 8578,
											"end": 8580,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 8582,
											"end": 8589,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 8591,
											"end": 8596,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 8569,
											"end": 8577,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "111"
										},
										{
											"begin": 8569,
											"end": 8597,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 8569,
											"end": 8597,
											"name": "tag",
											"source": 9,
											"value": "110"
										},
										{
											"begin": 8569,
											"end": 8597,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8295,
											"end": 8605,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 8233,
											"end": 8605,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 8233,
											"end": 8605,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 8233,
											"end": 8605,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 3211,
											"end": 3523,
											"name": "tag",
											"source": 9,
											"value": "42"
										},
										{
											"begin": 3211,
											"end": 3523,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3264,
											"end": 3271,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3489,
											"end": 3504,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 3489,
											"end": 3502,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "114"
										},
										{
											"begin": 3489,
											"end": 3504,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3489,
											"end": 3504,
											"name": "tag",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 3489,
											"end": 3504,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3474,
											"end": 3486,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 3474,
											"end": 3486,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3458,
											"end": 3471,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3458,
											"end": 3471,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3458,
											"end": 3486,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 3458,
											"end": 3504,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 3451,
											"end": 3504,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3451,
											"end": 3504,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3211,
											"end": 3523,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3211,
											"end": 3523,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 9536,
											"end": 9706,
											"name": "tag",
											"source": 9,
											"value": "48"
										},
										{
											"begin": 9536,
											"end": 9706,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 9670,
											"end": 9698,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "116"
										},
										{
											"begin": 9680,
											"end": 9684,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 9686,
											"end": 9688,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 9690,
											"end": 9697,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 9670,
											"end": 9679,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "117"
										},
										{
											"begin": 9670,
											"end": 9698,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 9670,
											"end": 9698,
											"name": "tag",
											"source": 9,
											"value": "116"
										},
										{
											"begin": 9670,
											"end": 9698,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 9536,
											"end": 9706,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 9536,
											"end": 9706,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 9536,
											"end": 9706,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 9536,
											"end": 9706,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 2359,
											"end": 2655,
											"name": "tag",
											"source": 9,
											"value": "52"
										},
										{
											"begin": 2359,
											"end": 2655,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2412,
											"end": 2419,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2431,
											"end": 2449,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2452,
											"end": 2490,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "119"
										},
										{
											"begin": 2469,
											"end": 2480,
											"name": "PUSH",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 2469,
											"end": 2486,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2481,
											"end": 2485,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 2469,
											"end": 2486,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2469,
											"end": 2486,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2469,
											"end": 2486,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2469,
											"end": 2486,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2469,
											"end": 2486,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2469,
											"end": 2486,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2469,
											"end": 2486,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2469,
											"end": 2486,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2469,
											"end": 2486,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2469,
											"end": 2486,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2469,
											"end": 2486,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2469,
											"end": 2486,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2469,
											"end": 2486,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2469,
											"end": 2486,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2469,
											"end": 2486,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 2469,
											"end": 2489,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2487,
											"end": 2488,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 2469,
											"end": 2489,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2469,
											"end": 2489,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2469,
											"end": 2489,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2469,
											"end": 2489,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2469,
											"end": 2489,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2469,
											"end": 2489,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2469,
											"end": 2489,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2469,
											"end": 2489,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2469,
											"end": 2489,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2469,
											"end": 2489,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2469,
											"end": 2489,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 2469,
											"end": 2489,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 2452,
											"end": 2464,
											"name": "NUMBER",
											"source": 9
										},
										{
											"begin": 2452,
											"end": 2468,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "120"
										},
										{
											"begin": 2452,
											"end": 2468,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2452,
											"end": 2490,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2452,
											"end": 2490,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2452,
											"end": 2490,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFF"
										},
										{
											"begin": 2452,
											"end": 2490,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2452,
											"end": 2490,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2452,
											"end": 2490,
											"name": "tag",
											"source": 9,
											"value": "119"
										},
										{
											"begin": 2452,
											"end": 2490,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2431,
											"end": 2490,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2431,
											"end": 2490,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2501,
											"end": 2516,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2519,
											"end": 2550,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "121"
										},
										{
											"begin": 2539,
											"end": 2549,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2519,
											"end": 2534,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "122"
										},
										{
											"begin": 2529,
											"end": 2533,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 2519,
											"end": 2528,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "63"
										},
										{
											"begin": 2519,
											"end": 2534,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2519,
											"end": 2534,
											"name": "tag",
											"source": 9,
											"value": "122"
										},
										{
											"begin": 2519,
											"end": 2534,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2519,
											"end": 2538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "123"
										},
										{
											"begin": 2519,
											"end": 2538,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2519,
											"end": 2550,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2519,
											"end": 2550,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2519,
											"end": 2550,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFF"
										},
										{
											"begin": 2519,
											"end": 2550,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2519,
											"end": 2550,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2519,
											"end": 2550,
											"name": "tag",
											"source": 9,
											"value": "121"
										},
										{
											"begin": 2519,
											"end": 2550,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2501,
											"end": 2550,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2501,
											"end": 2550,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2561,
											"end": 2581,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2584,
											"end": 2617,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "124"
										},
										{
											"begin": 2609,
											"end": 2616,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2584,
											"end": 2595,
											"name": "PUSH",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 2584,
											"end": 2601,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2596,
											"end": 2600,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 2584,
											"end": 2601,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2584,
											"end": 2601,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2584,
											"end": 2601,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2584,
											"end": 2601,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2584,
											"end": 2601,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2584,
											"end": 2601,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2584,
											"end": 2601,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2584,
											"end": 2601,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2584,
											"end": 2601,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2584,
											"end": 2601,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2584,
											"end": 2601,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2584,
											"end": 2601,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2584,
											"end": 2601,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2584,
											"end": 2601,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2584,
											"end": 2601,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 2584,
											"end": 2604,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2602,
											"end": 2603,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 2584,
											"end": 2604,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2584,
											"end": 2604,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2584,
											"end": 2604,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2584,
											"end": 2604,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2584,
											"end": 2604,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2584,
											"end": 2604,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2584,
											"end": 2604,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2584,
											"end": 2604,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2584,
											"end": 2604,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2584,
											"end": 2604,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2584,
											"end": 2604,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 2584,
											"end": 2604,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 2584,
											"end": 2608,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "125"
										},
										{
											"begin": 2584,
											"end": 2608,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2584,
											"end": 2617,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2584,
											"end": 2617,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2584,
											"end": 2617,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFF"
										},
										{
											"begin": 2584,
											"end": 2617,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2584,
											"end": 2617,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2584,
											"end": 2617,
											"name": "tag",
											"source": 9,
											"value": "124"
										},
										{
											"begin": 2584,
											"end": 2617,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2561,
											"end": 2617,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2561,
											"end": 2617,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2635,
											"end": 2647,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2628,
											"end": 2647,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 2628,
											"end": 2647,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2628,
											"end": 2647,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2628,
											"end": 2647,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2628,
											"end": 2647,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2359,
											"end": 2655,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2359,
											"end": 2655,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2359,
											"end": 2655,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2359,
											"end": 2655,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 9777,
											"end": 9962,
											"name": "tag",
											"source": 9,
											"value": "56"
										},
										{
											"begin": 9777,
											"end": 9962,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 9915,
											"end": 9954,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "127"
										},
										{
											"begin": 9932,
											"end": 9936,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 9938,
											"end": 9940,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 9942,
											"end": 9949,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 9915,
											"end": 9954,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 9915,
											"end": 9954,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 9915,
											"end": 9954,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 9915,
											"end": 9954,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 9915,
											"end": 9954,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 9915,
											"end": 9954,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 9915,
											"end": 9954,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 9915,
											"end": 9954,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 9915,
											"end": 9954,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 9915,
											"end": 9954,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 9915,
											"end": 9954,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 9915,
											"end": 9954,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 9915,
											"end": 9931,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "75"
										},
										{
											"begin": 9915,
											"end": 9954,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 9915,
											"end": 9954,
											"name": "tag",
											"source": 9,
											"value": "127"
										},
										{
											"begin": 9915,
											"end": 9954,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 9777,
											"end": 9962,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 9777,
											"end": 9962,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 9777,
											"end": 9962,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 9777,
											"end": 9962,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 6894,
											"end": 7019,
											"name": "tag",
											"source": 9,
											"value": "59"
										},
										{
											"begin": 6894,
											"end": 7019,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6958,
											"end": 6965,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6985,
											"end": 7006,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "129"
										},
										{
											"begin": 6998,
											"end": 7005,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 6985,
											"end": 6997,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "130"
										},
										{
											"begin": 6985,
											"end": 7006,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 6985,
											"end": 7006,
											"name": "tag",
											"source": 9,
											"value": "129"
										},
										{
											"begin": 6985,
											"end": 7006,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6985,
											"end": 7011,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6985,
											"end": 7011,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6985,
											"end": 7011,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 6978,
											"end": 7011,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6978,
											"end": 7011,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6894,
											"end": 7019,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 6894,
											"end": 7019,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6894,
											"end": 7019,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6894,
											"end": 7019,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 4340,
											"end": 4546,
											"name": "tag",
											"source": 9,
											"value": "63"
										},
										{
											"begin": 4340,
											"end": 4546,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4404,
											"end": 4411,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4445,
											"end": 4446,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4428,
											"end": 4447,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4428,
											"end": 4447,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4428,
											"end": 4433,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4428,
											"end": 4447,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4428,
											"end": 4447,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4428,
											"end": 4447,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 4424,
											"end": 4484,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "132"
										},
										{
											"begin": 4424,
											"end": 4484,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 4456,
											"end": 4484,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 4456,
											"end": 4484,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 4456,
											"end": 4484,
											"name": "PUSH",
											"source": 9,
											"value": "8F4EB60400000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4456,
											"end": 4484,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4456,
											"end": 4484,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4456,
											"end": 4484,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 4456,
											"end": 4484,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4456,
											"end": 4484,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 4456,
											"end": 4484,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 4456,
											"end": 4484,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4456,
											"end": 4484,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4456,
											"end": 4484,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 4456,
											"end": 4484,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4456,
											"end": 4484,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 4424,
											"end": 4484,
											"name": "tag",
											"source": 9,
											"value": "132"
										},
										{
											"begin": 4424,
											"end": 4484,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4510,
											"end": 4522,
											"name": "PUSH",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 4510,
											"end": 4529,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4523,
											"end": 4528,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 4510,
											"end": 4529,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4510,
											"end": 4529,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4510,
											"end": 4529,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4510,
											"end": 4529,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4510,
											"end": 4529,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4510,
											"end": 4529,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4510,
											"end": 4529,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4510,
											"end": 4529,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4510,
											"end": 4529,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4510,
											"end": 4529,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4510,
											"end": 4529,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4510,
											"end": 4529,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4510,
											"end": 4529,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4510,
											"end": 4529,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4510,
											"end": 4529,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 4510,
											"end": 4537,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4510,
											"end": 4537,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4510,
											"end": 4537,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4510,
											"end": 4537,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4510,
											"end": 4537,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 4510,
											"end": 4537,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4510,
											"end": 4537,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 4510,
											"end": 4537,
											"name": "EXP",
											"source": 9
										},
										{
											"begin": 4510,
											"end": 4537,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4510,
											"end": 4537,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 4510,
											"end": 4537,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4510,
											"end": 4537,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4502,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4502,
											"end": 4538,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4495,
											"end": 4538,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4495,
											"end": 4538,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4340,
											"end": 4546,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4340,
											"end": 4546,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4340,
											"end": 4546,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4340,
											"end": 4546,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 7255,
											"end": 7359,
											"name": "tag",
											"source": 9,
											"value": "66"
										},
										{
											"begin": 7255,
											"end": 7359,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7311,
											"end": 7324,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 7344,
											"end": 7351,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "134"
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "92"
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "tag",
											"source": 9,
											"value": "134"
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "135"
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "92"
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "tag",
											"source": 9,
											"value": "135"
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "136"
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "137"
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "136"
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "tag",
											"source": 9,
											"value": "137"
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "tag",
											"source": 9,
											"value": "138"
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "138"
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "tag",
											"source": 9,
											"value": "136"
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7337,
											"end": 7351,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7255,
											"end": 7359,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7255,
											"end": 7359,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 8947,
											"end": 9234,
											"name": "tag",
											"source": 9,
											"value": "71"
										},
										{
											"begin": 8947,
											"end": 9234,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 9058,
											"end": 9070,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "140"
										},
										{
											"begin": 9058,
											"end": 9068,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "105"
										},
										{
											"begin": 9058,
											"end": 9070,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 9058,
											"end": 9070,
											"name": "tag",
											"source": 9,
											"value": "140"
										},
										{
											"begin": 9058,
											"end": 9070,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 9046,
											"end": 9070,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9046,
											"end": 9070,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 9046,
											"end": 9054,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 9046,
											"end": 9070,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9046,
											"end": 9070,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 9046,
											"end": 9070,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 9042,
											"end": 9096,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "141"
										},
										{
											"begin": 9042,
											"end": 9096,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 9079,
											"end": 9096,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 9079,
											"end": 9096,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 9079,
											"end": 9096,
											"name": "PUSH",
											"source": 9,
											"value": "B06307DB00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 9079,
											"end": 9096,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 9079,
											"end": 9096,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 9079,
											"end": 9096,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 9079,
											"end": 9096,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 9079,
											"end": 9096,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 9079,
											"end": 9096,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 9079,
											"end": 9096,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 9079,
											"end": 9096,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 9079,
											"end": 9096,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 9079,
											"end": 9096,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9079,
											"end": 9096,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 9042,
											"end": 9096,
											"name": "tag",
											"source": 9,
											"value": "141"
										},
										{
											"begin": 9042,
											"end": 9096,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 9154,
											"end": 9162,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 9109,
											"end": 9127,
											"name": "PUSH",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 9109,
											"end": 9141,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 9128,
											"end": 9140,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "142"
										},
										{
											"begin": 9128,
											"end": 9138,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "105"
										},
										{
											"begin": 9128,
											"end": 9140,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 9128,
											"end": 9140,
											"name": "tag",
											"source": 9,
											"value": "142"
										},
										{
											"begin": 9128,
											"end": 9140,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 9109,
											"end": 9141,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9109,
											"end": 9141,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 9109,
											"end": 9141,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9109,
											"end": 9141,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 9109,
											"end": 9141,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 9109,
											"end": 9141,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 9109,
											"end": 9141,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 9109,
											"end": 9141,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 9109,
											"end": 9141,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9109,
											"end": 9141,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 9109,
											"end": 9141,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 9109,
											"end": 9141,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 9109,
											"end": 9141,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 9109,
											"end": 9141,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 9109,
											"end": 9141,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 9109,
											"end": 9151,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 9142,
											"end": 9150,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 9109,
											"end": 9151,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9109,
											"end": 9151,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 9109,
											"end": 9151,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9109,
											"end": 9151,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 9109,
											"end": 9151,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 9109,
											"end": 9151,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 9109,
											"end": 9151,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 9109,
											"end": 9151,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 9109,
											"end": 9151,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9109,
											"end": 9151,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 9109,
											"end": 9151,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 9109,
											"end": 9151,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 9109,
											"end": 9151,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 9109,
											"end": 9151,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 9109,
											"end": 9151,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 9109,
											"end": 9151,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 9109,
											"end": 9162,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 9109,
											"end": 9162,
											"name": "EXP",
											"source": 9
										},
										{
											"begin": 9109,
											"end": 9162,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 9109,
											"end": 9162,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 9109,
											"end": 9162,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 9109,
											"end": 9162,
											"name": "PUSH",
											"source": 9,
											"value": "FF"
										},
										{
											"begin": 9109,
											"end": 9162,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 9109,
											"end": 9162,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 9109,
											"end": 9162,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 9109,
											"end": 9162,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9109,
											"end": 9162,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 9109,
											"end": 9162,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 9109,
											"end": 9162,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 9109,
											"end": 9162,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 9109,
											"end": 9162,
											"name": "OR",
											"source": 9
										},
										{
											"begin": 9109,
											"end": 9162,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9109,
											"end": 9162,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 9109,
											"end": 9162,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 9207,
											"end": 9215,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 9178,
											"end": 9226,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9178,
											"end": 9226,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 9193,
											"end": 9205,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "143"
										},
										{
											"begin": 9193,
											"end": 9203,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "105"
										},
										{
											"begin": 9193,
											"end": 9205,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 9193,
											"end": 9205,
											"name": "tag",
											"source": 9,
											"value": "143"
										},
										{
											"begin": 9193,
											"end": 9205,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 9178,
											"end": 9226,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9178,
											"end": 9226,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 9178,
											"end": 9226,
											"name": "PUSH",
											"source": 9,
											"value": "17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31"
										},
										{
											"begin": 9217,
											"end": 9225,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 9178,
											"end": 9226,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 9178,
											"end": 9226,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 9178,
											"end": 9226,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "144"
										},
										{
											"begin": 9178,
											"end": 9226,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 9178,
											"end": 9226,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9178,
											"end": 9226,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "26"
										},
										{
											"begin": 9178,
											"end": 9226,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 9178,
											"end": 9226,
											"name": "tag",
											"source": 9,
											"value": "144"
										},
										{
											"begin": 9178,
											"end": 9226,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 9178,
											"end": 9226,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 9178,
											"end": 9226,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 9178,
											"end": 9226,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 9178,
											"end": 9226,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 9178,
											"end": 9226,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 9178,
											"end": 9226,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9178,
											"end": 9226,
											"name": "LOG3",
											"source": 9
										},
										{
											"begin": 8947,
											"end": 9234,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 8947,
											"end": 9234,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 8947,
											"end": 9234,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 10033,
											"end": 10403,
											"name": "tag",
											"source": 9,
											"value": "75"
										},
										{
											"begin": 10033,
											"end": 10403,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10200,
											"end": 10228,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "146"
										},
										{
											"begin": 10210,
											"end": 10214,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 10216,
											"end": 10218,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 10220,
											"end": 10227,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 10200,
											"end": 10209,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "117"
										},
										{
											"begin": 10200,
											"end": 10228,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 10200,
											"end": 10228,
											"name": "tag",
											"source": 9,
											"value": "146"
										},
										{
											"begin": 10200,
											"end": 10228,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10243,
											"end": 10258,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "147"
										},
										{
											"begin": 10243,
											"end": 10245,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 10243,
											"end": 10256,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10243,
											"end": 10256,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 10243,
											"end": 10256,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "148"
										},
										{
											"begin": 10243,
											"end": 10258,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 10243,
											"end": 10258,
											"name": "tag",
											"source": 9,
											"value": "147"
										},
										{
											"begin": 10243,
											"end": 10258,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10239,
											"end": 10396,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 10239,
											"end": 10396,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "149"
										},
										{
											"begin": 10239,
											"end": 10396,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 10264,
											"end": 10320,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "150"
										},
										{
											"begin": 10295,
											"end": 10299,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 10301,
											"end": 10303,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 10305,
											"end": 10312,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 10314,
											"end": 10319,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 10264,
											"end": 10294,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "151"
										},
										{
											"begin": 10264,
											"end": 10320,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 10264,
											"end": 10320,
											"name": "tag",
											"source": 9,
											"value": "150"
										},
										{
											"begin": 10264,
											"end": 10320,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10260,
											"end": 10396,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "152"
										},
										{
											"begin": 10260,
											"end": 10396,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 10344,
											"end": 10384,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 10344,
											"end": 10384,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 10344,
											"end": 10384,
											"name": "PUSH",
											"source": 9,
											"value": "D1A57ED600000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 10344,
											"end": 10384,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10344,
											"end": 10384,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 10344,
											"end": 10384,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 10344,
											"end": 10384,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10344,
											"end": 10384,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 10344,
											"end": 10384,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 10344,
											"end": 10384,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 10344,
											"end": 10384,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 10344,
											"end": 10384,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 10344,
											"end": 10384,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10344,
											"end": 10384,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 10260,
											"end": 10396,
											"name": "tag",
											"source": 9,
											"value": "152"
										},
										{
											"begin": 10260,
											"end": 10396,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10239,
											"end": 10396,
											"name": "tag",
											"source": 9,
											"value": "149"
										},
										{
											"begin": 10239,
											"end": 10396,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10033,
											"end": 10403,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 10033,
											"end": 10403,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 10033,
											"end": 10403,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 10033,
											"end": 10403,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 10033,
											"end": 10403,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 7430,
											"end": 7748,
											"name": "tag",
											"source": 9,
											"value": "78"
										},
										{
											"begin": 7430,
											"end": 7748,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7503,
											"end": 7516,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 7534,
											"end": 7550,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "154"
										},
										{
											"begin": 7542,
											"end": 7549,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 7534,
											"end": 7541,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "99"
										},
										{
											"begin": 7534,
											"end": 7550,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 7534,
											"end": 7550,
											"name": "tag",
											"source": 9,
											"value": "154"
										},
										{
											"begin": 7534,
											"end": 7550,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7529,
											"end": 7588,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "155"
										},
										{
											"begin": 7529,
											"end": 7588,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 7559,
											"end": 7588,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 7559,
											"end": 7588,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 7559,
											"end": 7588,
											"name": "PUSH",
											"source": 9,
											"value": "A14C4B5000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7559,
											"end": 7588,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7559,
											"end": 7588,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7559,
											"end": 7588,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 7559,
											"end": 7588,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7559,
											"end": 7588,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 7559,
											"end": 7588,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 7559,
											"end": 7588,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 7559,
											"end": 7588,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 7559,
											"end": 7588,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 7559,
											"end": 7588,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7559,
											"end": 7588,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 7529,
											"end": 7588,
											"name": "tag",
											"source": 9,
											"value": "155"
										},
										{
											"begin": 7529,
											"end": 7588,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7601,
											"end": 7622,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 7625,
											"end": 7635,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "156"
										},
										{
											"begin": 7625,
											"end": 7633,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "157"
										},
										{
											"begin": 7625,
											"end": 7635,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 7625,
											"end": 7635,
											"name": "tag",
											"source": 9,
											"value": "156"
										},
										{
											"begin": 7625,
											"end": 7635,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7601,
											"end": 7635,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7601,
											"end": 7635,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7678,
											"end": 7679,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 7659,
											"end": 7666,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7653,
											"end": 7674,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 7653,
											"end": 7679,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 7653,
											"end": 7740,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "158"
										},
										{
											"begin": 7653,
											"end": 7740,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 7653,
											"end": 7740,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 7653,
											"end": 7740,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 7653,
											"end": 7740,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 7653,
											"end": 7740,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 7653,
											"end": 7740,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7653,
											"end": 7740,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 7653,
											"end": 7740,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7653,
											"end": 7740,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 7653,
											"end": 7740,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 7653,
											"end": 7740,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7653,
											"end": 7740,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7653,
											"end": 7740,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7653,
											"end": 7740,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "159"
										},
										{
											"begin": 7653,
											"end": 7740,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7653,
											"end": 7740,
											"name": "tag",
											"source": 9,
											"value": "158"
										},
										{
											"begin": 7653,
											"end": 7740,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7706,
											"end": 7713,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 7715,
											"end": 7733,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "160"
										},
										{
											"begin": 7715,
											"end": 7722,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 7715,
											"end": 7731,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "161"
										},
										{
											"begin": 7715,
											"end": 7733,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 7715,
											"end": 7733,
											"name": "tag",
											"source": 9,
											"value": "160"
										},
										{
											"begin": 7715,
											"end": 7733,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7689,
											"end": 7734,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 7689,
											"end": 7734,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 7689,
											"end": 7734,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 7689,
											"end": 7734,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7689,
											"end": 7734,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "162"
										},
										{
											"begin": 7689,
											"end": 7734,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 7689,
											"end": 7734,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 7689,
											"end": 7734,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7689,
											"end": 7734,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "163"
										},
										{
											"begin": 7689,
											"end": 7734,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 7689,
											"end": 7734,
											"name": "tag",
											"source": 9,
											"value": "162"
										},
										{
											"begin": 7689,
											"end": 7734,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7689,
											"end": 7734,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 7689,
											"end": 7734,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 7689,
											"end": 7734,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 7689,
											"end": 7734,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7689,
											"end": 7734,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 7689,
											"end": 7734,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 7689,
											"end": 7734,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 7689,
											"end": 7734,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7689,
											"end": 7734,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7689,
											"end": 7734,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7689,
											"end": 7734,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 7689,
											"end": 7734,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7653,
											"end": 7740,
											"name": "tag",
											"source": 9,
											"value": "159"
										},
										{
											"begin": 7653,
											"end": 7740,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7646,
											"end": 7740,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 7646,
											"end": 7740,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7646,
											"end": 7740,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7430,
											"end": 7748,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 7430,
											"end": 7748,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7430,
											"end": 7748,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7430,
											"end": 7748,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 9305,
											"end": 9469,
											"name": "tag",
											"source": 9,
											"value": "83"
										},
										{
											"begin": 9305,
											"end": 9469,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 9402,
											"end": 9406,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 9426,
											"end": 9444,
											"name": "PUSH",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 9426,
											"end": 9451,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 9445,
											"end": 9450,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 9426,
											"end": 9451,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9426,
											"end": 9451,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 9426,
											"end": 9451,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9426,
											"end": 9451,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 9426,
											"end": 9451,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 9426,
											"end": 9451,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 9426,
											"end": 9451,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 9426,
											"end": 9451,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 9426,
											"end": 9451,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9426,
											"end": 9451,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 9426,
											"end": 9451,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 9426,
											"end": 9451,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 9426,
											"end": 9451,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 9426,
											"end": 9451,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 9426,
											"end": 9451,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 9426,
											"end": 9461,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 9452,
											"end": 9460,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 9426,
											"end": 9461,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9426,
											"end": 9461,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 9426,
											"end": 9461,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9426,
											"end": 9461,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 9426,
											"end": 9461,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 9426,
											"end": 9461,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 9426,
											"end": 9461,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 9426,
											"end": 9461,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 9426,
											"end": 9461,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9426,
											"end": 9461,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 9426,
											"end": 9461,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 9426,
											"end": 9461,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 9426,
											"end": 9461,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 9426,
											"end": 9461,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 9426,
											"end": 9461,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 9426,
											"end": 9461,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 9426,
											"end": 9461,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9426,
											"end": 9461,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 9426,
											"end": 9461,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9426,
											"end": 9461,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 9426,
											"end": 9461,
											"name": "EXP",
											"source": 9
										},
										{
											"begin": 9426,
											"end": 9461,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9426,
											"end": 9461,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 9426,
											"end": 9461,
											"name": "PUSH",
											"source": 9,
											"value": "FF"
										},
										{
											"begin": 9426,
											"end": 9461,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 9419,
											"end": 9461,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9419,
											"end": 9461,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 9305,
											"end": 9469,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 9305,
											"end": 9469,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 9305,
											"end": 9469,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 9305,
											"end": 9469,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 9305,
											"end": 9469,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 829,
											"end": 984,
											"name": "tag",
											"source": 6,
											"value": "89"
										},
										{
											"begin": 829,
											"end": 984,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 914,
											"end": 918,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 952,
											"end": 977,
											"name": "PUSH",
											"source": 6,
											"value": "1FFC9A700000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 937,
											"end": 977,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 937,
											"end": 977,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 937,
											"end": 977,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 937,
											"end": 948,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 937,
											"end": 977,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 937,
											"end": 977,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 937,
											"end": 977,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 937,
											"end": 977,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 930,
											"end": 977,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 930,
											"end": 977,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 829,
											"end": 984,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 829,
											"end": 984,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 829,
											"end": 984,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 829,
											"end": 984,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 10658,
											"end": 10832,
											"name": "tag",
											"source": 9,
											"value": "99"
										},
										{
											"begin": 10658,
											"end": 10832,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10715,
											"end": 10719,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 10758,
											"end": 10765,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10739,
											"end": 10754,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "167"
										},
										{
											"begin": 10739,
											"end": 10752,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "114"
										},
										{
											"begin": 10739,
											"end": 10754,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 10739,
											"end": 10754,
											"name": "tag",
											"source": 9,
											"value": "167"
										},
										{
											"begin": 10739,
											"end": 10754,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10739,
											"end": 10765,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 10739,
											"end": 10765,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 10739,
											"end": 10792,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 10739,
											"end": 10792,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 10739,
											"end": 10792,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "168"
										},
										{
											"begin": 10739,
											"end": 10792,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 10739,
											"end": 10792,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 10779,
											"end": 10792,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 10779,
											"end": 10792,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 10769,
											"end": 10776,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 10769,
											"end": 10792,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 10739,
											"end": 10792,
											"name": "tag",
											"source": 9,
											"value": "168"
										},
										{
											"begin": 10739,
											"end": 10792,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10739,
											"end": 10824,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 10739,
											"end": 10824,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 10739,
											"end": 10824,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "169"
										},
										{
											"begin": 10739,
											"end": 10824,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 10739,
											"end": 10824,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 10797,
											"end": 10808,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 10797,
											"end": 10817,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 10809,
											"end": 10816,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 10797,
											"end": 10817,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10797,
											"end": 10817,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 10797,
											"end": 10817,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 10797,
											"end": 10817,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10797,
											"end": 10817,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10797,
											"end": 10817,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 10797,
											"end": 10817,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 10797,
											"end": 10817,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 10797,
											"end": 10817,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10797,
											"end": 10817,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 10797,
											"end": 10817,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 10797,
											"end": 10824,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 10797,
											"end": 10824,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10797,
											"end": 10824,
											"name": "PUSH",
											"source": 9,
											"value": "1C"
										},
										{
											"begin": 10797,
											"end": 10824,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10797,
											"end": 10824,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 10797,
											"end": 10824,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10797,
											"end": 10824,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 10797,
											"end": 10824,
											"name": "EXP",
											"source": 9
										},
										{
											"begin": 10797,
											"end": 10824,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10797,
											"end": 10824,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 10797,
											"end": 10824,
											"name": "PUSH",
											"source": 9,
											"value": "FF"
										},
										{
											"begin": 10797,
											"end": 10824,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 10796,
											"end": 10824,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 10739,
											"end": 10824,
											"name": "tag",
											"source": 9,
											"value": "169"
										},
										{
											"begin": 10739,
											"end": 10824,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 10732,
											"end": 10824,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10732,
											"end": 10824,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 10658,
											"end": 10832,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 10658,
											"end": 10832,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 10658,
											"end": 10832,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 10658,
											"end": 10832,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 640,
											"end": 736,
											"name": "tag",
											"source": 4,
											"value": "105"
										},
										{
											"begin": 640,
											"end": 736,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 693,
											"end": 700,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 712,
											"end": 729,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 712,
											"end": 729,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 640,
											"end": 736,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 640,
											"end": 736,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 19891,
											"end": 20087,
											"name": "tag",
											"source": 9,
											"value": "111"
										},
										{
											"begin": 19891,
											"end": 20087,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 20033,
											"end": 20035,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 20006,
											"end": 20021,
											"name": "PUSH",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 20006,
											"end": 20030,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 20022,
											"end": 20029,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 20006,
											"end": 20030,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 20006,
											"end": 20030,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 20006,
											"end": 20030,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 20006,
											"end": 20030,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 20006,
											"end": 20030,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 20006,
											"end": 20030,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 20006,
											"end": 20030,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 20006,
											"end": 20030,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 20006,
											"end": 20030,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 20006,
											"end": 20030,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 20006,
											"end": 20030,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 20006,
											"end": 20030,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 20006,
											"end": 20035,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 20006,
											"end": 20035,
											"name": "EXP",
											"source": 9
										},
										{
											"begin": 20006,
											"end": 20035,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 20006,
											"end": 20035,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 20006,
											"end": 20035,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 20006,
											"end": 20035,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 20006,
											"end": 20035,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 20006,
											"end": 20035,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 20006,
											"end": 20035,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 20006,
											"end": 20035,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 20006,
											"end": 20035,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 20006,
											"end": 20035,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 20006,
											"end": 20035,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 20006,
											"end": 20035,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 20006,
											"end": 20035,
											"name": "OR",
											"source": 9
										},
										{
											"begin": 20006,
											"end": 20035,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 20006,
											"end": 20035,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 20006,
											"end": 20035,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 20071,
											"end": 20078,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 20067,
											"end": 20069,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 20051,
											"end": 20079,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 20051,
											"end": 20079,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 20060,
											"end": 20065,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 20051,
											"end": 20079,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 20051,
											"end": 20079,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 20051,
											"end": 20079,
											"name": "PUSH",
											"source": 9,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 20051,
											"end": 20079,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 20051,
											"end": 20079,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 20051,
											"end": 20079,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 20051,
											"end": 20079,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 20051,
											"end": 20079,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 20051,
											"end": 20079,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 20051,
											"end": 20079,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 20051,
											"end": 20079,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 20051,
											"end": 20079,
											"name": "LOG4",
											"source": 9
										},
										{
											"begin": 19891,
											"end": 20087,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 19891,
											"end": 20087,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 19891,
											"end": 20087,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 19891,
											"end": 20087,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 2985,
											"end": 3077,
											"name": "tag",
											"source": 9,
											"value": "114"
										},
										{
											"begin": 2985,
											"end": 3077,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3041,
											"end": 3048,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3068,
											"end": 3069,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 3061,
											"end": 3069,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3061,
											"end": 3069,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2985,
											"end": 3077,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2985,
											"end": 3077,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 14839,
											"end": 16969,
											"name": "tag",
											"source": 9,
											"value": "117"
										},
										{
											"begin": 14839,
											"end": 16969,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 14954,
											"end": 14989,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 14992,
											"end": 15013,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "174"
										},
										{
											"begin": 15005,
											"end": 15012,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 14992,
											"end": 15004,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "130"
										},
										{
											"begin": 14992,
											"end": 15013,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 14992,
											"end": 15013,
											"name": "tag",
											"source": 9,
											"value": "174"
										},
										{
											"begin": 14992,
											"end": 15013,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 14954,
											"end": 15013,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 14954,
											"end": 15013,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 15052,
											"end": 15056,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 15030,
											"end": 15056,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 15030,
											"end": 15056,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 15030,
											"end": 15043,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 15030,
											"end": 15048,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 15030,
											"end": 15048,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 15030,
											"end": 15048,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 15030,
											"end": 15056,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 15030,
											"end": 15056,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 15030,
											"end": 15056,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 15026,
											"end": 15093,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "175"
										},
										{
											"begin": 15026,
											"end": 15093,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 15065,
											"end": 15093,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 15065,
											"end": 15093,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 15065,
											"end": 15093,
											"name": "PUSH",
											"source": 9,
											"value": "A114810000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 15065,
											"end": 15093,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 15065,
											"end": 15093,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 15065,
											"end": 15093,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 15065,
											"end": 15093,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 15065,
											"end": 15093,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 15065,
											"end": 15093,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 15065,
											"end": 15093,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 15065,
											"end": 15093,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 15065,
											"end": 15093,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 15065,
											"end": 15093,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 15065,
											"end": 15093,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 15026,
											"end": 15093,
											"name": "tag",
											"source": 9,
											"value": "175"
										},
										{
											"begin": 15026,
											"end": 15093,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 15106,
											"end": 15128,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 15148,
											"end": 15152,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 15132,
											"end": 15152,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 15132,
											"end": 15152,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 15132,
											"end": 15144,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "176"
										},
										{
											"begin": 15132,
											"end": 15142,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "105"
										},
										{
											"begin": 15132,
											"end": 15144,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 15132,
											"end": 15144,
											"name": "tag",
											"source": 9,
											"value": "176"
										},
										{
											"begin": 15132,
											"end": 15144,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 15132,
											"end": 15152,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 15132,
											"end": 15152,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 15132,
											"end": 15152,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 15132,
											"end": 15205,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 15132,
											"end": 15205,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "177"
										},
										{
											"begin": 15132,
											"end": 15205,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 15132,
											"end": 15205,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 15169,
											"end": 15205,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "178"
										},
										{
											"begin": 15186,
											"end": 15190,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 15192,
											"end": 15204,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "179"
										},
										{
											"begin": 15192,
											"end": 15202,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "105"
										},
										{
											"begin": 15192,
											"end": 15204,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 15192,
											"end": 15204,
											"name": "tag",
											"source": 9,
											"value": "179"
										},
										{
											"begin": 15192,
											"end": 15204,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 15169,
											"end": 15185,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "83"
										},
										{
											"begin": 15169,
											"end": 15205,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 15169,
											"end": 15205,
											"name": "tag",
											"source": 9,
											"value": "178"
										},
										{
											"begin": 15169,
											"end": 15205,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 15132,
											"end": 15205,
											"name": "tag",
											"source": 9,
											"value": "177"
										},
										{
											"begin": 15132,
											"end": 15205,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 15132,
											"end": 15258,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 15132,
											"end": 15258,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "180"
										},
										{
											"begin": 15132,
											"end": 15258,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 15132,
											"end": 15258,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 15246,
											"end": 15258,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "181"
										},
										{
											"begin": 15246,
											"end": 15256,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "105"
										},
										{
											"begin": 15246,
											"end": 15258,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 15246,
											"end": 15258,
											"name": "tag",
											"source": 9,
											"value": "181"
										},
										{
											"begin": 15246,
											"end": 15258,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 15222,
											"end": 15258,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 15222,
											"end": 15258,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 15222,
											"end": 15242,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "182"
										},
										{
											"begin": 15234,
											"end": 15241,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 15222,
											"end": 15233,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "34"
										},
										{
											"begin": 15222,
											"end": 15242,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 15222,
											"end": 15242,
											"name": "tag",
											"source": 9,
											"value": "182"
										},
										{
											"begin": 15222,
											"end": 15242,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 15222,
											"end": 15258,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 15222,
											"end": 15258,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 15222,
											"end": 15258,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 15132,
											"end": 15258,
											"name": "tag",
											"source": 9,
											"value": "180"
										},
										{
											"begin": 15132,
											"end": 15258,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 15106,
											"end": 15259,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 15106,
											"end": 15259,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 15277,
											"end": 15294,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 15272,
											"end": 15338,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "183"
										},
										{
											"begin": 15272,
											"end": 15338,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 15303,
											"end": 15338,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 15303,
											"end": 15338,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 15303,
											"end": 15338,
											"name": "PUSH",
											"source": 9,
											"value": "59C896BE00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 15303,
											"end": 15338,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 15303,
											"end": 15338,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 15303,
											"end": 15338,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 15303,
											"end": 15338,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 15303,
											"end": 15338,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 15303,
											"end": 15338,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 15303,
											"end": 15338,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 15303,
											"end": 15338,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 15303,
											"end": 15338,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 15303,
											"end": 15338,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 15303,
											"end": 15338,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 15272,
											"end": 15338,
											"name": "tag",
											"source": 9,
											"value": "183"
										},
										{
											"begin": 15272,
											"end": 15338,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 15367,
											"end": 15368,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 15353,
											"end": 15369,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 15353,
											"end": 15369,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 15353,
											"end": 15355,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 15353,
											"end": 15369,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 15353,
											"end": 15369,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 15353,
											"end": 15369,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 15349,
											"end": 15401,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "184"
										},
										{
											"begin": 15349,
											"end": 15401,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 15378,
											"end": 15401,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 15378,
											"end": 15401,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 15378,
											"end": 15401,
											"name": "PUSH",
											"source": 9,
											"value": "EA553B3400000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 15378,
											"end": 15401,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 15378,
											"end": 15401,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 15378,
											"end": 15401,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 15378,
											"end": 15401,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 15378,
											"end": 15401,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 15378,
											"end": 15401,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 15378,
											"end": 15401,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 15378,
											"end": 15401,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 15378,
											"end": 15401,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 15378,
											"end": 15401,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 15378,
											"end": 15401,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 15349,
											"end": 15401,
											"name": "tag",
											"source": 9,
											"value": "184"
										},
										{
											"begin": 15349,
											"end": 15401,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 15414,
											"end": 15457,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "185"
										},
										{
											"begin": 15436,
											"end": 15440,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 15442,
											"end": 15444,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 15446,
											"end": 15453,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 15455,
											"end": 15456,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 15414,
											"end": 15435,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "186"
										},
										{
											"begin": 15414,
											"end": 15457,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 15414,
											"end": 15457,
											"name": "tag",
											"source": 9,
											"value": "185"
										},
										{
											"begin": 15414,
											"end": 15457,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 15522,
											"end": 15557,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "187"
										},
										{
											"begin": 15539,
											"end": 15540,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 15543,
											"end": 15550,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 15552,
											"end": 15556,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 15522,
											"end": 15530,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "111"
										},
										{
											"begin": 15522,
											"end": 15557,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 15522,
											"end": 15557,
											"name": "tag",
											"source": 9,
											"value": "187"
										},
										{
											"begin": 15522,
											"end": 15557,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 15883,
											"end": 15884,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 15853,
											"end": 15865,
											"name": "PUSH",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 15853,
											"end": 15871,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 15866,
											"end": 15870,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 15853,
											"end": 15871,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 15853,
											"end": 15871,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 15853,
											"end": 15871,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 15853,
											"end": 15871,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 15853,
											"end": 15871,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 15853,
											"end": 15871,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 15853,
											"end": 15871,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 15853,
											"end": 15871,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 15853,
											"end": 15871,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 15853,
											"end": 15871,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 15853,
											"end": 15871,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 15853,
											"end": 15871,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 15853,
											"end": 15871,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 15853,
											"end": 15871,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 15853,
											"end": 15871,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 15853,
											"end": 15879,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 15853,
											"end": 15879,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 15853,
											"end": 15879,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 15853,
											"end": 15884,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 15853,
											"end": 15884,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 15853,
											"end": 15884,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 15853,
											"end": 15884,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 15853,
											"end": 15884,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 15853,
											"end": 15884,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 15853,
											"end": 15884,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 15853,
											"end": 15884,
											"name": "EXP",
											"source": 9
										},
										{
											"begin": 15853,
											"end": 15884,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 15853,
											"end": 15884,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 15853,
											"end": 15884,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 15853,
											"end": 15884,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 15853,
											"end": 15884,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 15853,
											"end": 15884,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 15853,
											"end": 15884,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 15853,
											"end": 15884,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 15853,
											"end": 15884,
											"name": "EXP",
											"source": 9
										},
										{
											"begin": 15853,
											"end": 15884,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 15853,
											"end": 15884,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 15853,
											"end": 15884,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 15853,
											"end": 15884,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 15853,
											"end": 15884,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 15853,
											"end": 15884,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 15853,
											"end": 15884,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 15853,
											"end": 15884,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 15853,
											"end": 15884,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 15853,
											"end": 15884,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 15853,
											"end": 15884,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 15853,
											"end": 15884,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 15853,
											"end": 15884,
											"name": "OR",
											"source": 9
										},
										{
											"begin": 15853,
											"end": 15884,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 15853,
											"end": 15884,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 15853,
											"end": 15884,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 15927,
											"end": 15928,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 15899,
											"end": 15911,
											"name": "PUSH",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 15899,
											"end": 15915,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 15912,
											"end": 15914,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 15899,
											"end": 15915,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 15899,
											"end": 15915,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 15899,
											"end": 15915,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 15899,
											"end": 15915,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 15899,
											"end": 15915,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 15899,
											"end": 15915,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 15899,
											"end": 15915,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 15899,
											"end": 15915,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 15899,
											"end": 15915,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 15899,
											"end": 15915,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 15899,
											"end": 15915,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 15899,
											"end": 15915,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 15899,
											"end": 15915,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 15899,
											"end": 15915,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 15899,
											"end": 15915,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 15899,
											"end": 15923,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 15899,
											"end": 15923,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 15899,
											"end": 15923,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 15899,
											"end": 15928,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 15899,
											"end": 15928,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 15899,
											"end": 15928,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 15899,
											"end": 15928,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 15899,
											"end": 15928,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 15899,
											"end": 15928,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 15899,
											"end": 15928,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 15899,
											"end": 15928,
											"name": "EXP",
											"source": 9
										},
										{
											"begin": 15899,
											"end": 15928,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 15899,
											"end": 15928,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 15899,
											"end": 15928,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 15899,
											"end": 15928,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 15899,
											"end": 15928,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 15899,
											"end": 15928,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 15899,
											"end": 15928,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 15899,
											"end": 15928,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 15899,
											"end": 15928,
											"name": "EXP",
											"source": 9
										},
										{
											"begin": 15899,
											"end": 15928,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 15899,
											"end": 15928,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 15899,
											"end": 15928,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 15899,
											"end": 15928,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 15899,
											"end": 15928,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 15899,
											"end": 15928,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 15899,
											"end": 15928,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 15899,
											"end": 15928,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 15899,
											"end": 15928,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 15899,
											"end": 15928,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 15899,
											"end": 15928,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 15899,
											"end": 15928,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 15899,
											"end": 15928,
											"name": "OR",
											"source": 9
										},
										{
											"begin": 15899,
											"end": 15928,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 15899,
											"end": 15928,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 15899,
											"end": 15928,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 15945,
											"end": 15976,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 15979,
											"end": 15990,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 15979,
											"end": 15999,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 15991,
											"end": 15998,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 15979,
											"end": 15999,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 15979,
											"end": 15999,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 15979,
											"end": 15999,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 15979,
											"end": 15999,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 15979,
											"end": 15999,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 15979,
											"end": 15999,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 15979,
											"end": 15999,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 15979,
											"end": 15999,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 15979,
											"end": 15999,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 15979,
											"end": 15999,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 15979,
											"end": 15999,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 15945,
											"end": 15999,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 15945,
											"end": 15999,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 16030,
											"end": 16032,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 16014,
											"end": 16022,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 16014,
											"end": 16027,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 16014,
											"end": 16027,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 16014,
											"end": 16027,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 16014,
											"end": 16032,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 16014,
											"end": 16032,
											"name": "EXP",
											"source": 9
										},
										{
											"begin": 16014,
											"end": 16032,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 16014,
											"end": 16032,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 16014,
											"end": 16032,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 16014,
											"end": 16032,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 16014,
											"end": 16032,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 16014,
											"end": 16032,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 16014,
											"end": 16032,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 16014,
											"end": 16032,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 16014,
											"end": 16032,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 16014,
											"end": 16032,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 16014,
											"end": 16032,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 16014,
											"end": 16032,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 16014,
											"end": 16032,
											"name": "OR",
											"source": 9
										},
										{
											"begin": 16014,
											"end": 16032,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 16014,
											"end": 16032,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 16014,
											"end": 16032,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 16080,
											"end": 16095,
											"name": "TIMESTAMP",
											"source": 9
										},
										{
											"begin": 16047,
											"end": 16055,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 16047,
											"end": 16070,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 16047,
											"end": 16070,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 16047,
											"end": 16070,
											"name": "PUSH",
											"source": 9,
											"value": "14"
										},
										{
											"begin": 16047,
											"end": 16096,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 16047,
											"end": 16096,
											"name": "EXP",
											"source": 9
										},
										{
											"begin": 16047,
											"end": 16096,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 16047,
											"end": 16096,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 16047,
											"end": 16096,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 16047,
											"end": 16096,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 16047,
											"end": 16096,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 16047,
											"end": 16096,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 16047,
											"end": 16096,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 16047,
											"end": 16096,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 16047,
											"end": 16096,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 16047,
											"end": 16096,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 16047,
											"end": 16096,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 16047,
											"end": 16096,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 16047,
											"end": 16096,
											"name": "OR",
											"source": 9
										},
										{
											"begin": 16047,
											"end": 16096,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 16047,
											"end": 16096,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 16047,
											"end": 16096,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 16348,
											"end": 16367,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 16380,
											"end": 16381,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 16370,
											"end": 16377,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 16370,
											"end": 16381,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 16348,
											"end": 16381,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 16348,
											"end": 16381,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 16396,
											"end": 16427,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 16430,
											"end": 16441,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 16430,
											"end": 16454,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 16442,
											"end": 16453,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 16430,
											"end": 16454,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 16430,
											"end": 16454,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 16430,
											"end": 16454,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 16430,
											"end": 16454,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 16430,
											"end": 16454,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 16430,
											"end": 16454,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 16430,
											"end": 16454,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 16430,
											"end": 16454,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 16430,
											"end": 16454,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 16430,
											"end": 16454,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 16430,
											"end": 16454,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 16396,
											"end": 16454,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 16396,
											"end": 16454,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 16498,
											"end": 16499,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 16473,
											"end": 16500,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 16473,
											"end": 16500,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 16473,
											"end": 16481,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 16473,
											"end": 16486,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 16473,
											"end": 16486,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 16473,
											"end": 16486,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 16473,
											"end": 16486,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 16473,
											"end": 16486,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 16473,
											"end": 16486,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 16473,
											"end": 16486,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 16473,
											"end": 16486,
											"name": "EXP",
											"source": 9
										},
										{
											"begin": 16473,
											"end": 16486,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 16473,
											"end": 16486,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 16473,
											"end": 16486,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 16473,
											"end": 16486,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 16473,
											"end": 16500,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 16473,
											"end": 16500,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 16473,
											"end": 16500,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 16469,
											"end": 16853,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "188"
										},
										{
											"begin": 16469,
											"end": 16853,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 16683,
											"end": 16696,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 16683,
											"end": 16696,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 16668,
											"end": 16679,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 16668,
											"end": 16696,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 16664,
											"end": 16838,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "189"
										},
										{
											"begin": 16664,
											"end": 16838,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 16737,
											"end": 16741,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 16721,
											"end": 16729,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 16721,
											"end": 16734,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 16721,
											"end": 16734,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 16721,
											"end": 16734,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 16721,
											"end": 16741,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 16721,
											"end": 16741,
											"name": "EXP",
											"source": 9
										},
										{
											"begin": 16721,
											"end": 16741,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 16721,
											"end": 16741,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 16721,
											"end": 16741,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 16721,
											"end": 16741,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 16721,
											"end": 16741,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 16721,
											"end": 16741,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 16721,
											"end": 16741,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 16721,
											"end": 16741,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 16721,
											"end": 16741,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 16721,
											"end": 16741,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 16721,
											"end": 16741,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 16721,
											"end": 16741,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 16721,
											"end": 16741,
											"name": "OR",
											"source": 9
										},
										{
											"begin": 16721,
											"end": 16741,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 16721,
											"end": 16741,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 16721,
											"end": 16741,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 16790,
											"end": 16803,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 16790,
											"end": 16818,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 16790,
											"end": 16818,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 16790,
											"end": 16818,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 16764,
											"end": 16772,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 16764,
											"end": 16787,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 16764,
											"end": 16787,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 16764,
											"end": 16787,
											"name": "PUSH",
											"source": 9,
											"value": "14"
										},
										{
											"begin": 16764,
											"end": 16818,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 16764,
											"end": 16818,
											"name": "EXP",
											"source": 9
										},
										{
											"begin": 16764,
											"end": 16818,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 16764,
											"end": 16818,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 16764,
											"end": 16818,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 16764,
											"end": 16818,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 16764,
											"end": 16818,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 16764,
											"end": 16818,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 16764,
											"end": 16818,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 16764,
											"end": 16818,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 16764,
											"end": 16818,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 16764,
											"end": 16818,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 16764,
											"end": 16818,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 16764,
											"end": 16818,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 16764,
											"end": 16818,
											"name": "OR",
											"source": 9
										},
										{
											"begin": 16764,
											"end": 16818,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 16764,
											"end": 16818,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 16764,
											"end": 16818,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 16664,
											"end": 16838,
											"name": "tag",
											"source": 9,
											"value": "189"
										},
										{
											"begin": 16664,
											"end": 16838,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 16469,
											"end": 16853,
											"name": "tag",
											"source": 9,
											"value": "188"
										},
										{
											"begin": 16469,
											"end": 16853,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 15828,
											"end": 16864,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 15828,
											"end": 16864,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 15828,
											"end": 16864,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 16900,
											"end": 16907,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 16896,
											"end": 16898,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 16881,
											"end": 16908,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 16881,
											"end": 16908,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 16890,
											"end": 16894,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 16881,
											"end": 16908,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 16881,
											"end": 16908,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 16881,
											"end": 16908,
											"name": "PUSH",
											"source": 9,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 16881,
											"end": 16908,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 16881,
											"end": 16908,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 16881,
											"end": 16908,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 16881,
											"end": 16908,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 16881,
											"end": 16908,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 16881,
											"end": 16908,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 16881,
											"end": 16908,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 16881,
											"end": 16908,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 16881,
											"end": 16908,
											"name": "LOG4",
											"source": 9
										},
										{
											"begin": 16919,
											"end": 16961,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "190"
										},
										{
											"begin": 16940,
											"end": 16944,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 16946,
											"end": 16948,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 16950,
											"end": 16957,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 16959,
											"end": 16960,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 16919,
											"end": 16939,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "191"
										},
										{
											"begin": 16919,
											"end": 16961,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 16919,
											"end": 16961,
											"name": "tag",
											"source": 9,
											"value": "190"
										},
										{
											"begin": 16919,
											"end": 16961,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 14943,
											"end": 16969,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 14943,
											"end": 16969,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 14839,
											"end": 16969,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 14839,
											"end": 16969,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 14839,
											"end": 16969,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 14839,
											"end": 16969,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 3122,
											"end": 3218,
											"name": "tag",
											"source": 8,
											"value": "120"
										},
										{
											"begin": 3122,
											"end": 3218,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3180,
											"end": 3187,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3210,
											"end": 3211,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3206,
											"end": 3207,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 3206,
											"end": 3211,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "193"
										},
										{
											"begin": 3206,
											"end": 3211,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3206,
											"end": 3211,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3206,
											"end": 3211,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "194"
										},
										{
											"begin": 3206,
											"end": 3211,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 3206,
											"end": 3211,
											"name": "tag",
											"source": 8,
											"value": "193"
										},
										{
											"begin": 3206,
											"end": 3211,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3199,
											"end": 3211,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3199,
											"end": 3211,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3122,
											"end": 3218,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 3122,
											"end": 3218,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3122,
											"end": 3218,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3122,
											"end": 3218,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3122,
											"end": 3218,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 3465,
											"end": 3561,
											"name": "tag",
											"source": 8,
											"value": "123"
										},
										{
											"begin": 3465,
											"end": 3561,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3523,
											"end": 3530,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3553,
											"end": 3554,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3549,
											"end": 3550,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 3549,
											"end": 3554,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "196"
										},
										{
											"begin": 3549,
											"end": 3554,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3549,
											"end": 3554,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3549,
											"end": 3554,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "197"
										},
										{
											"begin": 3549,
											"end": 3554,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 3549,
											"end": 3554,
											"name": "tag",
											"source": 8,
											"value": "196"
										},
										{
											"begin": 3549,
											"end": 3554,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3542,
											"end": 3554,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3542,
											"end": 3554,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3465,
											"end": 3561,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 3465,
											"end": 3561,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3465,
											"end": 3561,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3465,
											"end": 3561,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3465,
											"end": 3561,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 2755,
											"end": 2851,
											"name": "tag",
											"source": 8,
											"value": "125"
										},
										{
											"begin": 2755,
											"end": 2851,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2813,
											"end": 2820,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2843,
											"end": 2844,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2839,
											"end": 2840,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2839,
											"end": 2844,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "199"
										},
										{
											"begin": 2839,
											"end": 2844,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2839,
											"end": 2844,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2839,
											"end": 2844,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "200"
										},
										{
											"begin": 2839,
											"end": 2844,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 2839,
											"end": 2844,
											"name": "tag",
											"source": 8,
											"value": "199"
										},
										{
											"begin": 2839,
											"end": 2844,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2832,
											"end": 2844,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2832,
											"end": 2844,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2755,
											"end": 2851,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 2755,
											"end": 2851,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2755,
											"end": 2851,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2755,
											"end": 2851,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2755,
											"end": 2851,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 5721,
											"end": 6832,
											"name": "tag",
											"source": 9,
											"value": "130"
										},
										{
											"begin": 5721,
											"end": 6832,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5783,
											"end": 5804,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "201"
										},
										{
											"begin": 5783,
											"end": 5804,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "202"
										},
										{
											"begin": 5783,
											"end": 5804,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 5783,
											"end": 5804,
											"name": "tag",
											"source": 9,
											"value": "201"
										},
										{
											"begin": 5783,
											"end": 5804,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5817,
											"end": 5829,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5832,
											"end": 5839,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5817,
											"end": 5839,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5817,
											"end": 5839,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5900,
											"end": 5904,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 5881,
											"end": 5896,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "204"
										},
										{
											"begin": 5881,
											"end": 5894,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "114"
										},
										{
											"begin": 5881,
											"end": 5896,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 5881,
											"end": 5896,
											"name": "tag",
											"source": 9,
											"value": "204"
										},
										{
											"begin": 5881,
											"end": 5896,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5881,
											"end": 5904,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 5877,
											"end": 6765,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "205"
										},
										{
											"begin": 5877,
											"end": 6765,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 5917,
											"end": 5930,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5917,
											"end": 5930,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 5910,
											"end": 5914,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5910,
											"end": 5930,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 5906,
											"end": 6765,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 5906,
											"end": 6765,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "206"
										},
										{
											"begin": 5906,
											"end": 6765,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 5951,
											"end": 5982,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5985,
											"end": 5996,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 5985,
											"end": 6002,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5997,
											"end": 6001,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 5985,
											"end": 6002,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5985,
											"end": 6002,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5985,
											"end": 6002,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 5985,
											"end": 6002,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5985,
											"end": 6002,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5985,
											"end": 6002,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5985,
											"end": 6002,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5985,
											"end": 6002,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 5985,
											"end": 6002,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5985,
											"end": 6002,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5985,
											"end": 6002,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "EXP",
											"source": 9
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "PUSH",
											"source": 9,
											"value": "14"
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "EXP",
											"source": 9
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "PUSH",
											"source": 9,
											"value": "1C"
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "EXP",
											"source": 9
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "PUSH",
											"source": 9,
											"value": "FF"
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5951,
											"end": 6002,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6026,
											"end": 6035,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6026,
											"end": 6042,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 6026,
											"end": 6042,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6026,
											"end": 6042,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 6021,
											"end": 6750,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "207"
										},
										{
											"begin": 6021,
											"end": 6750,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 6097,
											"end": 6098,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6071,
											"end": 6099,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6071,
											"end": 6099,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 6071,
											"end": 6080,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6071,
											"end": 6085,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6071,
											"end": 6085,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6071,
											"end": 6085,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 6071,
											"end": 6099,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6071,
											"end": 6099,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 6071,
											"end": 6099,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 6067,
											"end": 6168,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "208"
										},
										{
											"begin": 6067,
											"end": 6168,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 6135,
											"end": 6144,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6128,
											"end": 6144,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 6128,
											"end": 6144,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6128,
											"end": 6144,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6128,
											"end": 6144,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6128,
											"end": 6144,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "203"
										},
										{
											"begin": 6128,
											"end": 6144,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6067,
											"end": 6168,
											"name": "tag",
											"source": 9,
											"value": "208"
										},
										{
											"begin": 6067,
											"end": 6168,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6470,
											"end": 6731,
											"name": "tag",
											"source": 9,
											"value": "209"
										},
										{
											"begin": 6470,
											"end": 6731,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6477,
											"end": 6481,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 6470,
											"end": 6731,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 6470,
											"end": 6731,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "210"
										},
										{
											"begin": 6470,
											"end": 6731,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 6510,
											"end": 6516,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6510,
											"end": 6516,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6510,
											"end": 6516,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 6510,
											"end": 6516,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6510,
											"end": 6516,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 6510,
											"end": 6516,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 6510,
											"end": 6516,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6510,
											"end": 6516,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6555,
											"end": 6566,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 6555,
											"end": 6572,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6567,
											"end": 6571,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 6555,
											"end": 6572,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6555,
											"end": 6572,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6555,
											"end": 6572,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 6555,
											"end": 6572,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6555,
											"end": 6572,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6555,
											"end": 6572,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6555,
											"end": 6572,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6555,
											"end": 6572,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 6555,
											"end": 6572,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6555,
											"end": 6572,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6555,
											"end": 6572,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "EXP",
											"source": 9
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "PUSH",
											"source": 9,
											"value": "14"
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "EXP",
											"source": 9
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "PUSH",
											"source": 9,
											"value": "1C"
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "EXP",
											"source": 9
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "PUSH",
											"source": 9,
											"value": "FF"
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6543,
											"end": 6572,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6629,
											"end": 6630,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6603,
											"end": 6631,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6603,
											"end": 6631,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 6603,
											"end": 6612,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6603,
											"end": 6617,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6603,
											"end": 6617,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6603,
											"end": 6617,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 6603,
											"end": 6631,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6603,
											"end": 6631,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 6603,
											"end": 6631,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 6599,
											"end": 6708,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "211"
										},
										{
											"begin": 6599,
											"end": 6708,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 6671,
											"end": 6680,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6664,
											"end": 6680,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 6664,
											"end": 6680,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6664,
											"end": 6680,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6664,
											"end": 6680,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6664,
											"end": 6680,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "203"
										},
										{
											"begin": 6664,
											"end": 6680,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6599,
											"end": 6708,
											"name": "tag",
											"source": 9,
											"value": "211"
										},
										{
											"begin": 6599,
											"end": 6708,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6470,
											"end": 6731,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "209"
										},
										{
											"begin": 6470,
											"end": 6731,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6470,
											"end": 6731,
											"name": "tag",
											"source": 9,
											"value": "210"
										},
										{
											"begin": 6470,
											"end": 6731,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6021,
											"end": 6750,
											"name": "tag",
											"source": 9,
											"value": "207"
										},
										{
											"begin": 6021,
											"end": 6750,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5932,
											"end": 6765,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5906,
											"end": 6765,
											"name": "tag",
											"source": 9,
											"value": "206"
										},
										{
											"begin": 5906,
											"end": 6765,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5877,
											"end": 6765,
											"name": "tag",
											"source": 9,
											"value": "205"
										},
										{
											"begin": 5877,
											"end": 6765,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6793,
											"end": 6824,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 6793,
											"end": 6824,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 6793,
											"end": 6824,
											"name": "PUSH",
											"source": 9,
											"value": "DF2D9B4200000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 6793,
											"end": 6824,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6793,
											"end": 6824,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6793,
											"end": 6824,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 6793,
											"end": 6824,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6793,
											"end": 6824,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 6793,
											"end": 6824,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 6793,
											"end": 6824,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6793,
											"end": 6824,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 6793,
											"end": 6824,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 6793,
											"end": 6824,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6793,
											"end": 6824,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 5721,
											"end": 6832,
											"name": "tag",
											"source": 9,
											"value": "203"
										},
										{
											"begin": 5721,
											"end": 6832,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5721,
											"end": 6832,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 5721,
											"end": 6832,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5721,
											"end": 6832,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5721,
											"end": 6832,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 1175,
											"end": 1495,
											"name": "tag",
											"source": 3,
											"value": "148"
										},
										{
											"begin": 1175,
											"end": 1495,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1235,
											"end": 1239,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1487,
											"end": 1488,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1465,
											"end": 1472,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "EXTCODESIZE",
											"source": 3
										},
										{
											"begin": 1465,
											"end": 1488,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 1458,
											"end": 1488,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1458,
											"end": 1488,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1175,
											"end": 1495,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1175,
											"end": 1495,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1175,
											"end": 1495,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1175,
											"end": 1495,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 20579,
											"end": 21246,
											"name": "tag",
											"source": 9,
											"value": "151"
										},
										{
											"begin": 20579,
											"end": 21246,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 20742,
											"end": 20746,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 20779,
											"end": 20781,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 20763,
											"end": 20799,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 20763,
											"end": 20799,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 20763,
											"end": 20799,
											"name": "PUSH",
											"source": 9,
											"value": "150B7A02"
										},
										{
											"begin": 20800,
											"end": 20812,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "214"
										},
										{
											"begin": 20800,
											"end": 20810,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "105"
										},
										{
											"begin": 20800,
											"end": 20812,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 20800,
											"end": 20812,
											"name": "tag",
											"source": 9,
											"value": "214"
										},
										{
											"begin": 20800,
											"end": 20812,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 20814,
											"end": 20818,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 20820,
											"end": 20827,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 20829,
											"end": 20834,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFF"
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "215"
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "216"
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "tag",
											"source": 9,
											"value": "215"
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "GAS",
											"source": 9
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "CALL",
											"source": 9
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "217"
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "218"
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "219"
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "tag",
											"source": 9,
											"value": "218"
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "tag",
											"source": 9,
											"value": "217"
										},
										{
											"begin": 20763,
											"end": 20835,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 20759,
											"end": 21239,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "220"
										},
										{
											"begin": 20759,
											"end": 21239,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 20759,
											"end": 21239,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 20759,
											"end": 21239,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 20759,
											"end": 21239,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 20759,
											"end": 21239,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 20759,
											"end": 21239,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 20759,
											"end": 21239,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "225"
										},
										{
											"begin": 20759,
											"end": 21239,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 20759,
											"end": 21239,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 20759,
											"end": 21239,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 20759,
											"end": 21239,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 20759,
											"end": 21239,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 20759,
											"end": 21239,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 20759,
											"end": 21239,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 20759,
											"end": 21239,
											"name": "PUSH",
											"source": 9,
											"value": "3F"
										},
										{
											"begin": 20759,
											"end": 21239,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 20759,
											"end": 21239,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 20759,
											"end": 21239,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 20759,
											"end": 21239,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 20759,
											"end": 21239,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 20759,
											"end": 21239,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 20759,
											"end": 21239,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 20759,
											"end": 21239,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 20759,
											"end": 21239,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 20759,
											"end": 21239,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 20759,
											"end": 21239,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 20759,
											"end": 21239,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 20759,
											"end": 21239,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 20759,
											"end": 21239,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 20759,
											"end": 21239,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 20759,
											"end": 21239,
											"name": "RETURNDATACOPY",
											"source": 9
										},
										{
											"begin": 20759,
											"end": 21239,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "224"
										},
										{
											"begin": 20759,
											"end": 21239,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 20759,
											"end": 21239,
											"name": "tag",
											"source": 9,
											"value": "225"
										},
										{
											"begin": 20759,
											"end": 21239,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 20759,
											"end": 21239,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 20759,
											"end": 21239,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 20759,
											"end": 21239,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 20759,
											"end": 21239,
											"name": "tag",
											"source": 9,
											"value": "224"
										},
										{
											"begin": 20759,
											"end": 21239,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 20759,
											"end": 21239,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 21014,
											"end": 21015,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 20997,
											"end": 21003,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 20997,
											"end": 21010,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 20997,
											"end": 21015,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 20993,
											"end": 21228,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "226"
										},
										{
											"begin": 20993,
											"end": 21228,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 21043,
											"end": 21083,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 21043,
											"end": 21083,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 21043,
											"end": 21083,
											"name": "PUSH",
											"source": 9,
											"value": "D1A57ED600000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 21043,
											"end": 21083,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 21043,
											"end": 21083,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 21043,
											"end": 21083,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 21043,
											"end": 21083,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 21043,
											"end": 21083,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 21043,
											"end": 21083,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 21043,
											"end": 21083,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 21043,
											"end": 21083,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 21043,
											"end": 21083,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 21043,
											"end": 21083,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 21043,
											"end": 21083,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 20993,
											"end": 21228,
											"name": "tag",
											"source": 9,
											"value": "226"
										},
										{
											"begin": 20993,
											"end": 21228,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 21186,
											"end": 21192,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 21180,
											"end": 21193,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 21171,
											"end": 21177,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 21167,
											"end": 21169,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 21163,
											"end": 21178,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 21156,
											"end": 21194,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 20759,
											"end": 21239,
											"name": "tag",
											"source": 9,
											"value": "220"
										},
										{
											"begin": 20759,
											"end": 21239,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 20892,
											"end": 20937,
											"name": "PUSH",
											"source": 9,
											"value": "150B7A02"
										},
										{
											"begin": 20892,
											"end": 20937,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 20892,
											"end": 20937,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 20882,
											"end": 20937,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 20882,
											"end": 20937,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 20882,
											"end": 20937,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 20882,
											"end": 20888,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 20882,
											"end": 20937,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 20882,
											"end": 20937,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 20882,
											"end": 20937,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 20882,
											"end": 20937,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 20875,
											"end": 20937,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 20875,
											"end": 20937,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 20875,
											"end": 20937,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 20579,
											"end": 21246,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 20579,
											"end": 21246,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 20579,
											"end": 21246,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 20579,
											"end": 21246,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 20579,
											"end": 21246,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 20579,
											"end": 21246,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 20579,
											"end": 21246,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 7996,
											"end": 8171,
											"name": "tag",
											"source": 9,
											"value": "157"
										},
										{
											"begin": 7996,
											"end": 8171,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8047,
											"end": 8060,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 8073,
											"end": 8163,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 8073,
											"end": 8163,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 8073,
											"end": 8163,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 8073,
											"end": 8163,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 8073,
											"end": 8163,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 8073,
											"end": 8163,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 8073,
											"end": 8163,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 8073,
											"end": 8163,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 8073,
											"end": 8163,
											"name": "PUSH",
											"source": 9,
											"value": "51"
										},
										{
											"begin": 8073,
											"end": 8163,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 8073,
											"end": 8163,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 8073,
											"end": 8163,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 8073,
											"end": 8163,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 8073,
											"end": 8163,
											"name": "PUSH data",
											"source": 9,
											"value": "D8BB5093925F17312CCD69C1AD4EEFB61D29F5F451BDF501CEF244662BE1EFAB"
										},
										{
											"begin": 8073,
											"end": 8163,
											"name": "PUSH",
											"source": 9,
											"value": "51"
										},
										{
											"begin": 8073,
											"end": 8163,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 8073,
											"end": 8163,
											"name": "CODECOPY",
											"source": 9
										},
										{
											"begin": 8073,
											"end": 8163,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8073,
											"end": 8163,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7996,
											"end": 8171,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7996,
											"end": 8171,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 328,
											"end": 1031,
											"name": "tag",
											"source": 5,
											"value": "161"
										},
										{
											"begin": 328,
											"end": 1031,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 384,
											"end": 397,
											"name": "PUSH",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 610,
											"end": 611,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 601,
											"end": 606,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 601,
											"end": 611,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 597,
											"end": 648,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "231"
										},
										{
											"begin": 597,
											"end": 648,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 627,
											"end": 637,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 627,
											"end": 637,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 627,
											"end": 637,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 627,
											"end": 637,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 627,
											"end": 637,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 627,
											"end": 637,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 627,
											"end": 637,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 627,
											"end": 637,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 627,
											"end": 637,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 627,
											"end": 637,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 627,
											"end": 637,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 627,
											"end": 637,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 627,
											"end": 637,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 627,
											"end": 637,
											"name": "PUSH",
											"source": 5,
											"value": "3000000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 627,
											"end": 637,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 627,
											"end": 637,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 627,
											"end": 637,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 627,
											"end": 637,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 627,
											"end": 637,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 627,
											"end": 637,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "230"
										},
										{
											"begin": 627,
											"end": 637,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 597,
											"end": 648,
											"name": "tag",
											"source": 5,
											"value": "231"
										},
										{
											"begin": 597,
											"end": 648,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 657,
											"end": 669,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 672,
											"end": 677,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 657,
											"end": 677,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 657,
											"end": 677,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 687,
											"end": 701,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 711,
											"end": 786,
											"name": "tag",
											"source": 5,
											"value": "232"
										},
										{
											"begin": 711,
											"end": 786,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 726,
											"end": 727,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 718,
											"end": 722,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 718,
											"end": 727,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 711,
											"end": 786,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "233"
										},
										{
											"begin": 711,
											"end": 786,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 743,
											"end": 751,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 743,
											"end": 751,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 743,
											"end": 751,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "234"
										},
										{
											"begin": 743,
											"end": 751,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 743,
											"end": 751,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "235"
										},
										{
											"begin": 743,
											"end": 751,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 743,
											"end": 751,
											"name": "tag",
											"source": 5,
											"value": "234"
										},
										{
											"begin": 743,
											"end": 751,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 743,
											"end": 751,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 743,
											"end": 751,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 743,
											"end": 751,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 773,
											"end": 775,
											"name": "PUSH",
											"source": 5,
											"value": "A"
										},
										{
											"begin": 765,
											"end": 775,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 765,
											"end": 775,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "236"
										},
										{
											"begin": 765,
											"end": 775,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 765,
											"end": 775,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 765,
											"end": 775,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "237"
										},
										{
											"begin": 765,
											"end": 775,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 765,
											"end": 775,
											"name": "tag",
											"source": 5,
											"value": "236"
										},
										{
											"begin": 765,
											"end": 775,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 765,
											"end": 775,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 765,
											"end": 775,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 711,
											"end": 786,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "232"
										},
										{
											"begin": 711,
											"end": 786,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 711,
											"end": 786,
											"name": "tag",
											"source": 5,
											"value": "233"
										},
										{
											"begin": 711,
											"end": 786,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 795,
											"end": 814,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 827,
											"end": 833,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 817,
											"end": 834,
											"name": "GT",
											"source": 5
										},
										{
											"begin": 817,
											"end": 834,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "238"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "239"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "240"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "tag",
											"source": 5,
											"value": "239"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 817,
											"end": 834,
											"name": "tag",
											"source": 5,
											"value": "238"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 817,
											"end": 834,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 817,
											"end": 834,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 817,
											"end": 834,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 817,
											"end": 834,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 817,
											"end": 834,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "241"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 817,
											"end": 834,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 817,
											"end": 834,
											"name": "MUL",
											"source": 5
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 817,
											"end": 834,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 817,
											"end": 834,
											"name": "CALLDATACOPY",
											"source": 5
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 817,
											"end": 834,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 817,
											"end": 834,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 817,
											"end": 834,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 817,
											"end": 834,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 817,
											"end": 834,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 817,
											"end": 834,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 817,
											"end": 834,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 817,
											"end": 834,
											"name": "tag",
											"source": 5,
											"value": "241"
										},
										{
											"begin": 817,
											"end": 834,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 817,
											"end": 834,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 795,
											"end": 834,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 795,
											"end": 834,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 844,
											"end": 994,
											"name": "tag",
											"source": 5,
											"value": "242"
										},
										{
											"begin": 844,
											"end": 994,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 860,
											"end": 861,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 851,
											"end": 856,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 851,
											"end": 861,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 844,
											"end": 994,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "243"
										},
										{
											"begin": 844,
											"end": 994,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 887,
											"end": 888,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 877,
											"end": 888,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 877,
											"end": 888,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "244"
										},
										{
											"begin": 877,
											"end": 888,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 877,
											"end": 888,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 877,
											"end": 888,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "194"
										},
										{
											"begin": 877,
											"end": 888,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 877,
											"end": 888,
											"name": "tag",
											"source": 5,
											"value": "244"
										},
										{
											"begin": 877,
											"end": 888,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 877,
											"end": 888,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 877,
											"end": 888,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 953,
											"end": 955,
											"name": "PUSH",
											"source": 5,
											"value": "A"
										},
										{
											"begin": 945,
											"end": 950,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 945,
											"end": 955,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "245"
										},
										{
											"begin": 945,
											"end": 955,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 945,
											"end": 955,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 945,
											"end": 955,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "246"
										},
										{
											"begin": 945,
											"end": 955,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 945,
											"end": 955,
											"name": "tag",
											"source": 5,
											"value": "245"
										},
										{
											"begin": 945,
											"end": 955,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 932,
											"end": 934,
											"name": "PUSH",
											"source": 5,
											"value": "30"
										},
										{
											"begin": 932,
											"end": 956,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "247"
										},
										{
											"begin": 932,
											"end": 956,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 932,
											"end": 956,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 932,
											"end": 956,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "200"
										},
										{
											"begin": 932,
											"end": 956,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 932,
											"end": 956,
											"name": "tag",
											"source": 5,
											"value": "247"
										},
										{
											"begin": 932,
											"end": 956,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 919,
											"end": 958,
											"name": "PUSH",
											"source": 5,
											"value": "F8"
										},
										{
											"begin": 919,
											"end": 958,
											"name": "SHL",
											"source": 5
										},
										{
											"begin": 902,
											"end": 908,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 909,
											"end": 915,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 902,
											"end": 916,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 902,
											"end": 916,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 902,
											"end": 916,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 902,
											"end": 916,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 902,
											"end": 916,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "248"
										},
										{
											"begin": 902,
											"end": 916,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 902,
											"end": 916,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "249"
										},
										{
											"begin": 902,
											"end": 916,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "250"
										},
										{
											"begin": 902,
											"end": 916,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 902,
											"end": 916,
											"name": "tag",
											"source": 5,
											"value": "249"
										},
										{
											"begin": 902,
											"end": 916,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 902,
											"end": 916,
											"name": "tag",
											"source": 5,
											"value": "248"
										},
										{
											"begin": 902,
											"end": 916,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 902,
											"end": 916,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 902,
											"end": 916,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 902,
											"end": 916,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 902,
											"end": 958,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 902,
											"end": 958,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 902,
											"end": 958,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 902,
											"end": 958,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 902,
											"end": 958,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 902,
											"end": 958,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 902,
											"end": 958,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 902,
											"end": 958,
											"name": "BYTE",
											"source": 5
										},
										{
											"begin": 902,
											"end": 958,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 902,
											"end": 958,
											"name": "MSTORE8",
											"source": 5
										},
										{
											"begin": 902,
											"end": 958,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 981,
											"end": 983,
											"name": "PUSH",
											"source": 5,
											"value": "A"
										},
										{
											"begin": 972,
											"end": 983,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 972,
											"end": 983,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "251"
										},
										{
											"begin": 972,
											"end": 983,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 972,
											"end": 983,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 972,
											"end": 983,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "237"
										},
										{
											"begin": 972,
											"end": 983,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 972,
											"end": 983,
											"name": "tag",
											"source": 5,
											"value": "251"
										},
										{
											"begin": 972,
											"end": 983,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 972,
											"end": 983,
											"name": "SWAP5",
											"source": 5
										},
										{
											"begin": 972,
											"end": 983,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 844,
											"end": 994,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "242"
										},
										{
											"begin": 844,
											"end": 994,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 844,
											"end": 994,
											"name": "tag",
											"source": 5,
											"value": "243"
										},
										{
											"begin": 844,
											"end": 994,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1017,
											"end": 1023,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1003,
											"end": 1024,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 1003,
											"end": 1024,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1003,
											"end": 1024,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1003,
											"end": 1024,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1003,
											"end": 1024,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 328,
											"end": 1031,
											"name": "tag",
											"source": 5,
											"value": "230"
										},
										{
											"begin": 328,
											"end": 1031,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 328,
											"end": 1031,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 328,
											"end": 1031,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 328,
											"end": 1031,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 328,
											"end": 1031,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 21894,
											"end": 22053,
											"name": "tag",
											"source": 9,
											"value": "186"
										},
										{
											"begin": 21894,
											"end": 22053,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 21894,
											"end": 22053,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 21894,
											"end": 22053,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 21894,
											"end": 22053,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 21894,
											"end": 22053,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 21894,
											"end": 22053,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 22712,
											"end": 22870,
											"name": "tag",
											"source": 9,
											"value": "191"
										},
										{
											"begin": 22712,
											"end": 22870,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 22712,
											"end": 22870,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 22712,
											"end": 22870,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 22712,
											"end": 22870,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 22712,
											"end": 22870,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 22712,
											"end": 22870,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "202"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "AND",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "AND",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[out]"
										},
										{
											"begin": 7,
											"end": 82,
											"name": "tag",
											"source": 12,
											"value": "254"
										},
										{
											"begin": 7,
											"end": 82,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 40,
											"end": 46,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 73,
											"end": 75,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 67,
											"end": 76,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 57,
											"end": 76,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 57,
											"end": 76,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7,
											"end": 82,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7,
											"end": 82,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 88,
											"end": 205,
											"name": "tag",
											"source": 12,
											"value": "255"
										},
										{
											"begin": 88,
											"end": 205,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 197,
											"end": 198,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 195,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 187,
											"end": 199,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 211,
											"end": 328,
											"name": "tag",
											"source": 12,
											"value": "256"
										},
										{
											"begin": 211,
											"end": 328,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 320,
											"end": 321,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 317,
											"end": 318,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 310,
											"end": 322,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 334,
											"end": 483,
											"name": "tag",
											"source": 12,
											"value": "257"
										},
										{
											"begin": 334,
											"end": 483,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 370,
											"end": 377,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 410,
											"end": 476,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFF00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 403,
											"end": 408,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 399,
											"end": 477,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 388,
											"end": 477,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 388,
											"end": 477,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 334,
											"end": 483,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 334,
											"end": 483,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 334,
											"end": 483,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 334,
											"end": 483,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 489,
											"end": 609,
											"name": "tag",
											"source": 12,
											"value": "258"
										},
										{
											"begin": 489,
											"end": 609,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 561,
											"end": 584,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "301"
										},
										{
											"begin": 578,
											"end": 583,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 561,
											"end": 584,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "257"
										},
										{
											"begin": 561,
											"end": 584,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 561,
											"end": 584,
											"name": "tag",
											"source": 12,
											"value": "301"
										},
										{
											"begin": 561,
											"end": 584,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 554,
											"end": 559,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 551,
											"end": 585,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 541,
											"end": 603,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "302"
										},
										{
											"begin": 541,
											"end": 603,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 599,
											"end": 600,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 596,
											"end": 597,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 589,
											"end": 601,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 541,
											"end": 603,
											"name": "tag",
											"source": 12,
											"value": "302"
										},
										{
											"begin": 541,
											"end": 603,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 489,
											"end": 609,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 489,
											"end": 609,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 615,
											"end": 752,
											"name": "tag",
											"source": 12,
											"value": "259"
										},
										{
											"begin": 615,
											"end": 752,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 660,
											"end": 665,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 698,
											"end": 704,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 685,
											"end": 705,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 676,
											"end": 705,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 676,
											"end": 705,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 714,
											"end": 746,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "304"
										},
										{
											"begin": 740,
											"end": 745,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 714,
											"end": 746,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "258"
										},
										{
											"begin": 714,
											"end": 746,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 714,
											"end": 746,
											"name": "tag",
											"source": 12,
											"value": "304"
										},
										{
											"begin": 714,
											"end": 746,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 615,
											"end": 752,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 615,
											"end": 752,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 615,
											"end": 752,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 615,
											"end": 752,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 615,
											"end": 752,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 758,
											"end": 1085,
											"name": "tag",
											"source": 12,
											"value": "23"
										},
										{
											"begin": 758,
											"end": 1085,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 816,
											"end": 822,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 865,
											"end": 867,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 853,
											"end": 862,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 844,
											"end": 851,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 840,
											"end": 863,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 836,
											"end": 868,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 833,
											"end": 952,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 833,
											"end": 952,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "306"
										},
										{
											"begin": 833,
											"end": 952,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 871,
											"end": 950,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "307"
										},
										{
											"begin": 871,
											"end": 950,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "255"
										},
										{
											"begin": 871,
											"end": 950,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 871,
											"end": 950,
											"name": "tag",
											"source": 12,
											"value": "307"
										},
										{
											"begin": 871,
											"end": 950,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 833,
											"end": 952,
											"name": "tag",
											"source": 12,
											"value": "306"
										},
										{
											"begin": 833,
											"end": 952,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 991,
											"end": 992,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1016,
											"end": 1068,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "308"
										},
										{
											"begin": 1060,
											"end": 1067,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 1051,
											"end": 1057,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 1040,
											"end": 1049,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 1036,
											"end": 1058,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1016,
											"end": 1068,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "259"
										},
										{
											"begin": 1016,
											"end": 1068,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 1016,
											"end": 1068,
											"name": "tag",
											"source": 12,
											"value": "308"
										},
										{
											"begin": 1016,
											"end": 1068,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1006,
											"end": 1068,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1006,
											"end": 1068,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 962,
											"end": 1078,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 758,
											"end": 1085,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 758,
											"end": 1085,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 758,
											"end": 1085,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 758,
											"end": 1085,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 758,
											"end": 1085,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 1091,
											"end": 1181,
											"name": "tag",
											"source": 12,
											"value": "260"
										},
										{
											"begin": 1091,
											"end": 1181,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1125,
											"end": 1132,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1168,
											"end": 1173,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1161,
											"end": 1174,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1154,
											"end": 1175,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1143,
											"end": 1175,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1143,
											"end": 1175,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1091,
											"end": 1181,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1091,
											"end": 1181,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1091,
											"end": 1181,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1091,
											"end": 1181,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 1187,
											"end": 1296,
											"name": "tag",
											"source": 12,
											"value": "261"
										},
										{
											"begin": 1187,
											"end": 1296,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1268,
											"end": 1289,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "311"
										},
										{
											"begin": 1283,
											"end": 1288,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1268,
											"end": 1289,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "260"
										},
										{
											"begin": 1268,
											"end": 1289,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 1268,
											"end": 1289,
											"name": "tag",
											"source": 12,
											"value": "311"
										},
										{
											"begin": 1268,
											"end": 1289,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1263,
											"end": 1266,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 1256,
											"end": 1290,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 1187,
											"end": 1296,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1187,
											"end": 1296,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1187,
											"end": 1296,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 1302,
											"end": 1512,
											"name": "tag",
											"source": 12,
											"value": "26"
										},
										{
											"begin": 1302,
											"end": 1512,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1389,
											"end": 1393,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1427,
											"end": 1429,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1416,
											"end": 1425,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 1412,
											"end": 1430,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1404,
											"end": 1430,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1404,
											"end": 1430,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1440,
											"end": 1505,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "313"
										},
										{
											"begin": 1502,
											"end": 1503,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1491,
											"end": 1500,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 1487,
											"end": 1504,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1478,
											"end": 1484,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 1440,
											"end": 1505,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "261"
										},
										{
											"begin": 1440,
											"end": 1505,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 1440,
											"end": 1505,
											"name": "tag",
											"source": 12,
											"value": "313"
										},
										{
											"begin": 1440,
											"end": 1505,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1302,
											"end": 1512,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 1302,
											"end": 1512,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1302,
											"end": 1512,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1302,
											"end": 1512,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1302,
											"end": 1512,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 1518,
											"end": 1617,
											"name": "tag",
											"source": 12,
											"value": "262"
										},
										{
											"begin": 1518,
											"end": 1617,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1570,
											"end": 1576,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1604,
											"end": 1609,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1598,
											"end": 1610,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 1588,
											"end": 1610,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1588,
											"end": 1610,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1518,
											"end": 1617,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1518,
											"end": 1617,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1518,
											"end": 1617,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1518,
											"end": 1617,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 1623,
											"end": 1792,
											"name": "tag",
											"source": 12,
											"value": "263"
										},
										{
											"begin": 1623,
											"end": 1792,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1707,
											"end": 1718,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1741,
											"end": 1747,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 1736,
											"end": 1739,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 1729,
											"end": 1748,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 1781,
											"end": 1785,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1776,
											"end": 1779,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 1772,
											"end": 1786,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1757,
											"end": 1786,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1757,
											"end": 1786,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1623,
											"end": 1792,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 1623,
											"end": 1792,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1623,
											"end": 1792,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1623,
											"end": 1792,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1623,
											"end": 1792,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 1798,
											"end": 2105,
											"name": "tag",
											"source": 12,
											"value": "264"
										},
										{
											"begin": 1798,
											"end": 2105,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1866,
											"end": 1867,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1876,
											"end": 1989,
											"name": "tag",
											"source": 12,
											"value": "317"
										},
										{
											"begin": 1876,
											"end": 1989,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1890,
											"end": 1896,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 1887,
											"end": 1888,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1884,
											"end": 1897,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 1876,
											"end": 1989,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1876,
											"end": 1989,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "319"
										},
										{
											"begin": 1876,
											"end": 1989,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1975,
											"end": 1976,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1970,
											"end": 1973,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 1966,
											"end": 1977,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1960,
											"end": 1978,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 1956,
											"end": 1957,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1951,
											"end": 1954,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 1947,
											"end": 1958,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1940,
											"end": 1979,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 1912,
											"end": 1914,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1909,
											"end": 1910,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 1905,
											"end": 1915,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1900,
											"end": 1915,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1900,
											"end": 1915,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1876,
											"end": 1989,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "317"
										},
										{
											"begin": 1876,
											"end": 1989,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1876,
											"end": 1989,
											"name": "tag",
											"source": 12,
											"value": "319"
										},
										{
											"begin": 1876,
											"end": 1989,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2007,
											"end": 2013,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 2004,
											"end": 2005,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2001,
											"end": 2014,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 1998,
											"end": 2099,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 1998,
											"end": 2099,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "320"
										},
										{
											"begin": 1998,
											"end": 2099,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 2087,
											"end": 2088,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2078,
											"end": 2084,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 2073,
											"end": 2076,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 2069,
											"end": 2085,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2062,
											"end": 2089,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 1998,
											"end": 2099,
											"name": "tag",
											"source": 12,
											"value": "320"
										},
										{
											"begin": 1998,
											"end": 2099,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1847,
											"end": 2105,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1798,
											"end": 2105,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1798,
											"end": 2105,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1798,
											"end": 2105,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1798,
											"end": 2105,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 2111,
											"end": 2213,
											"name": "tag",
											"source": 12,
											"value": "265"
										},
										{
											"begin": 2111,
											"end": 2213,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2152,
											"end": 2158,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2203,
											"end": 2205,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 2199,
											"end": 2206,
											"name": "NOT",
											"source": 12
										},
										{
											"begin": 2194,
											"end": 2196,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 2187,
											"end": 2192,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 2183,
											"end": 2197,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2179,
											"end": 2207,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 2169,
											"end": 2207,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2169,
											"end": 2207,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2111,
											"end": 2213,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2111,
											"end": 2213,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2111,
											"end": 2213,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2111,
											"end": 2213,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 2219,
											"end": 2583,
											"name": "tag",
											"source": 12,
											"value": "266"
										},
										{
											"begin": 2219,
											"end": 2583,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2307,
											"end": 2310,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2335,
											"end": 2374,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "323"
										},
										{
											"begin": 2368,
											"end": 2373,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2335,
											"end": 2374,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "262"
										},
										{
											"begin": 2335,
											"end": 2374,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 2335,
											"end": 2374,
											"name": "tag",
											"source": 12,
											"value": "323"
										},
										{
											"begin": 2335,
											"end": 2374,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2390,
											"end": 2461,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "324"
										},
										{
											"begin": 2454,
											"end": 2460,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2449,
											"end": 2452,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 2390,
											"end": 2461,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "263"
										},
										{
											"begin": 2390,
											"end": 2461,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 2390,
											"end": 2461,
											"name": "tag",
											"source": 12,
											"value": "324"
										},
										{
											"begin": 2390,
											"end": 2461,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2383,
											"end": 2461,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 2383,
											"end": 2461,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2470,
											"end": 2522,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "325"
										},
										{
											"begin": 2515,
											"end": 2521,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2510,
											"end": 2513,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 2503,
											"end": 2507,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 2496,
											"end": 2501,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 2492,
											"end": 2508,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2470,
											"end": 2522,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "264"
										},
										{
											"begin": 2470,
											"end": 2522,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 2470,
											"end": 2522,
											"name": "tag",
											"source": 12,
											"value": "325"
										},
										{
											"begin": 2470,
											"end": 2522,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2547,
											"end": 2576,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "326"
										},
										{
											"begin": 2569,
											"end": 2575,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2547,
											"end": 2576,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "265"
										},
										{
											"begin": 2547,
											"end": 2576,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 2547,
											"end": 2576,
											"name": "tag",
											"source": 12,
											"value": "326"
										},
										{
											"begin": 2547,
											"end": 2576,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2542,
											"end": 2545,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 2538,
											"end": 2577,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2531,
											"end": 2577,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2531,
											"end": 2577,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2311,
											"end": 2583,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2219,
											"end": 2583,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 2219,
											"end": 2583,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2219,
											"end": 2583,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2219,
											"end": 2583,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2219,
											"end": 2583,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 2589,
											"end": 2902,
											"name": "tag",
											"source": 12,
											"value": "30"
										},
										{
											"begin": 2589,
											"end": 2902,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2702,
											"end": 2706,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2740,
											"end": 2742,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 2729,
											"end": 2738,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2725,
											"end": 2743,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2717,
											"end": 2743,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2717,
											"end": 2743,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2789,
											"end": 2798,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2783,
											"end": 2787,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2779,
											"end": 2799,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 2775,
											"end": 2776,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2764,
											"end": 2773,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 2760,
											"end": 2777,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2753,
											"end": 2800,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 2817,
											"end": 2895,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "328"
										},
										{
											"begin": 2890,
											"end": 2894,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2881,
											"end": 2887,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 2817,
											"end": 2895,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "266"
										},
										{
											"begin": 2817,
											"end": 2895,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 2817,
											"end": 2895,
											"name": "tag",
											"source": 12,
											"value": "328"
										},
										{
											"begin": 2817,
											"end": 2895,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2809,
											"end": 2895,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2809,
											"end": 2895,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2589,
											"end": 2902,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 2589,
											"end": 2902,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2589,
											"end": 2902,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2589,
											"end": 2902,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2589,
											"end": 2902,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 2908,
											"end": 2985,
											"name": "tag",
											"source": 12,
											"value": "267"
										},
										{
											"begin": 2908,
											"end": 2985,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2945,
											"end": 2952,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2974,
											"end": 2979,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2963,
											"end": 2979,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2963,
											"end": 2979,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2908,
											"end": 2985,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2908,
											"end": 2985,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2908,
											"end": 2985,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2908,
											"end": 2985,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 2991,
											"end": 3113,
											"name": "tag",
											"source": 12,
											"value": "268"
										},
										{
											"begin": 2991,
											"end": 3113,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3064,
											"end": 3088,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "331"
										},
										{
											"begin": 3082,
											"end": 3087,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3064,
											"end": 3088,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "267"
										},
										{
											"begin": 3064,
											"end": 3088,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 3064,
											"end": 3088,
											"name": "tag",
											"source": 12,
											"value": "331"
										},
										{
											"begin": 3064,
											"end": 3088,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3057,
											"end": 3062,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3054,
											"end": 3089,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 3044,
											"end": 3107,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "332"
										},
										{
											"begin": 3044,
											"end": 3107,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 3103,
											"end": 3104,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3100,
											"end": 3101,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 3093,
											"end": 3105,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 3044,
											"end": 3107,
											"name": "tag",
											"source": 12,
											"value": "332"
										},
										{
											"begin": 3044,
											"end": 3107,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2991,
											"end": 3113,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2991,
											"end": 3113,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 3119,
											"end": 3258,
											"name": "tag",
											"source": 12,
											"value": "269"
										},
										{
											"begin": 3119,
											"end": 3258,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3165,
											"end": 3170,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3203,
											"end": 3209,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3190,
											"end": 3210,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 3181,
											"end": 3210,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3181,
											"end": 3210,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3219,
											"end": 3252,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "334"
										},
										{
											"begin": 3246,
											"end": 3251,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3219,
											"end": 3252,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "268"
										},
										{
											"begin": 3219,
											"end": 3252,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 3219,
											"end": 3252,
											"name": "tag",
											"source": 12,
											"value": "334"
										},
										{
											"begin": 3219,
											"end": 3252,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3119,
											"end": 3258,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 3119,
											"end": 3258,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 3119,
											"end": 3258,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3119,
											"end": 3258,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3119,
											"end": 3258,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 3264,
											"end": 3593,
											"name": "tag",
											"source": 12,
											"value": "33"
										},
										{
											"begin": 3264,
											"end": 3593,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3323,
											"end": 3329,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3372,
											"end": 3374,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 3360,
											"end": 3369,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 3351,
											"end": 3358,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 3347,
											"end": 3370,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 3343,
											"end": 3375,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 3340,
											"end": 3459,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 3340,
											"end": 3459,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "336"
										},
										{
											"begin": 3340,
											"end": 3459,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 3378,
											"end": 3457,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "337"
										},
										{
											"begin": 3378,
											"end": 3457,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "255"
										},
										{
											"begin": 3378,
											"end": 3457,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 3378,
											"end": 3457,
											"name": "tag",
											"source": 12,
											"value": "337"
										},
										{
											"begin": 3378,
											"end": 3457,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3340,
											"end": 3459,
											"name": "tag",
											"source": 12,
											"value": "336"
										},
										{
											"begin": 3340,
											"end": 3459,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3498,
											"end": 3499,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3523,
											"end": 3576,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "338"
										},
										{
											"begin": 3568,
											"end": 3575,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 3559,
											"end": 3565,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 3548,
											"end": 3557,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 3544,
											"end": 3566,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 3523,
											"end": 3576,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "269"
										},
										{
											"begin": 3523,
											"end": 3576,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 3523,
											"end": 3576,
											"name": "tag",
											"source": 12,
											"value": "338"
										},
										{
											"begin": 3523,
											"end": 3576,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3513,
											"end": 3576,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 3513,
											"end": 3576,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3469,
											"end": 3586,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3264,
											"end": 3593,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 3264,
											"end": 3593,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 3264,
											"end": 3593,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3264,
											"end": 3593,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3264,
											"end": 3593,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 3599,
											"end": 3725,
											"name": "tag",
											"source": 12,
											"value": "270"
										},
										{
											"begin": 3599,
											"end": 3725,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3636,
											"end": 3643,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3676,
											"end": 3718,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3669,
											"end": 3674,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 3665,
											"end": 3719,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 3654,
											"end": 3719,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3654,
											"end": 3719,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3599,
											"end": 3725,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 3599,
											"end": 3725,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3599,
											"end": 3725,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3599,
											"end": 3725,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 3731,
											"end": 3827,
											"name": "tag",
											"source": 12,
											"value": "271"
										},
										{
											"begin": 3731,
											"end": 3827,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3768,
											"end": 3775,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 3797,
											"end": 3821,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "341"
										},
										{
											"begin": 3815,
											"end": 3820,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 3797,
											"end": 3821,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "270"
										},
										{
											"begin": 3797,
											"end": 3821,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 3797,
											"end": 3821,
											"name": "tag",
											"source": 12,
											"value": "341"
										},
										{
											"begin": 3797,
											"end": 3821,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3786,
											"end": 3821,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3786,
											"end": 3821,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3731,
											"end": 3827,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 3731,
											"end": 3827,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3731,
											"end": 3827,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3731,
											"end": 3827,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 3833,
											"end": 3951,
											"name": "tag",
											"source": 12,
											"value": "272"
										},
										{
											"begin": 3833,
											"end": 3951,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3920,
											"end": 3944,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "343"
										},
										{
											"begin": 3938,
											"end": 3943,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3920,
											"end": 3944,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "271"
										},
										{
											"begin": 3920,
											"end": 3944,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 3920,
											"end": 3944,
											"name": "tag",
											"source": 12,
											"value": "343"
										},
										{
											"begin": 3920,
											"end": 3944,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3915,
											"end": 3918,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 3908,
											"end": 3945,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 3833,
											"end": 3951,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3833,
											"end": 3951,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3833,
											"end": 3951,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 3957,
											"end": 4179,
											"name": "tag",
											"source": 12,
											"value": "36"
										},
										{
											"begin": 3957,
											"end": 4179,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4050,
											"end": 4054,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4088,
											"end": 4090,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 4077,
											"end": 4086,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4073,
											"end": 4091,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4065,
											"end": 4091,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4065,
											"end": 4091,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4101,
											"end": 4172,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "345"
										},
										{
											"begin": 4169,
											"end": 4170,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4158,
											"end": 4167,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 4154,
											"end": 4171,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4145,
											"end": 4151,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 4101,
											"end": 4172,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "272"
										},
										{
											"begin": 4101,
											"end": 4172,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4101,
											"end": 4172,
											"name": "tag",
											"source": 12,
											"value": "345"
										},
										{
											"begin": 4101,
											"end": 4172,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3957,
											"end": 4179,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 3957,
											"end": 4179,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 3957,
											"end": 4179,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3957,
											"end": 4179,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 3957,
											"end": 4179,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 4185,
											"end": 4307,
											"name": "tag",
											"source": 12,
											"value": "273"
										},
										{
											"begin": 4185,
											"end": 4307,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4258,
											"end": 4282,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "347"
										},
										{
											"begin": 4276,
											"end": 4281,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4258,
											"end": 4282,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "271"
										},
										{
											"begin": 4258,
											"end": 4282,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4258,
											"end": 4282,
											"name": "tag",
											"source": 12,
											"value": "347"
										},
										{
											"begin": 4258,
											"end": 4282,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4251,
											"end": 4256,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4248,
											"end": 4283,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 4238,
											"end": 4301,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "348"
										},
										{
											"begin": 4238,
											"end": 4301,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 4297,
											"end": 4298,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4294,
											"end": 4295,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4287,
											"end": 4299,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 4238,
											"end": 4301,
											"name": "tag",
											"source": 12,
											"value": "348"
										},
										{
											"begin": 4238,
											"end": 4301,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4185,
											"end": 4307,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4185,
											"end": 4307,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 4313,
											"end": 4452,
											"name": "tag",
											"source": 12,
											"value": "274"
										},
										{
											"begin": 4313,
											"end": 4452,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4359,
											"end": 4364,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4397,
											"end": 4403,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4384,
											"end": 4404,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 4375,
											"end": 4404,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4375,
											"end": 4404,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4413,
											"end": 4446,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "350"
										},
										{
											"begin": 4440,
											"end": 4445,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4413,
											"end": 4446,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "273"
										},
										{
											"begin": 4413,
											"end": 4446,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4413,
											"end": 4446,
											"name": "tag",
											"source": 12,
											"value": "350"
										},
										{
											"begin": 4413,
											"end": 4446,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4313,
											"end": 4452,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 4313,
											"end": 4452,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 4313,
											"end": 4452,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4313,
											"end": 4452,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4313,
											"end": 4452,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 4458,
											"end": 4932,
											"name": "tag",
											"source": 12,
											"value": "39"
										},
										{
											"begin": 4458,
											"end": 4932,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4526,
											"end": 4532,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4534,
											"end": 4540,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4583,
											"end": 4585,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 4571,
											"end": 4580,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 4562,
											"end": 4569,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 4558,
											"end": 4581,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 4554,
											"end": 4586,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 4551,
											"end": 4670,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 4551,
											"end": 4670,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "352"
										},
										{
											"begin": 4551,
											"end": 4670,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 4589,
											"end": 4668,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "353"
										},
										{
											"begin": 4589,
											"end": 4668,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "255"
										},
										{
											"begin": 4589,
											"end": 4668,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4589,
											"end": 4668,
											"name": "tag",
											"source": 12,
											"value": "353"
										},
										{
											"begin": 4589,
											"end": 4668,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4551,
											"end": 4670,
											"name": "tag",
											"source": 12,
											"value": "352"
										},
										{
											"begin": 4551,
											"end": 4670,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4709,
											"end": 4710,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4734,
											"end": 4787,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "354"
										},
										{
											"begin": 4779,
											"end": 4786,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 4770,
											"end": 4776,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4759,
											"end": 4768,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 4755,
											"end": 4777,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4734,
											"end": 4787,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "274"
										},
										{
											"begin": 4734,
											"end": 4787,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4734,
											"end": 4787,
											"name": "tag",
											"source": 12,
											"value": "354"
										},
										{
											"begin": 4734,
											"end": 4787,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4724,
											"end": 4787,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 4724,
											"end": 4787,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4680,
											"end": 4797,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4836,
											"end": 4838,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 4862,
											"end": 4915,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "355"
										},
										{
											"begin": 4907,
											"end": 4914,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 4898,
											"end": 4904,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4887,
											"end": 4896,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 4883,
											"end": 4905,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4862,
											"end": 4915,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "269"
										},
										{
											"begin": 4862,
											"end": 4915,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 4862,
											"end": 4915,
											"name": "tag",
											"source": 12,
											"value": "355"
										},
										{
											"begin": 4862,
											"end": 4915,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4852,
											"end": 4915,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 4852,
											"end": 4915,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4807,
											"end": 4925,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4458,
											"end": 4932,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 4458,
											"end": 4932,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4458,
											"end": 4932,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 4458,
											"end": 4932,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4458,
											"end": 4932,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4458,
											"end": 4932,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 4938,
											"end": 5056,
											"name": "tag",
											"source": 12,
											"value": "275"
										},
										{
											"begin": 4938,
											"end": 5056,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5025,
											"end": 5049,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "357"
										},
										{
											"begin": 5043,
											"end": 5048,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 5025,
											"end": 5049,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "267"
										},
										{
											"begin": 5025,
											"end": 5049,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5025,
											"end": 5049,
											"name": "tag",
											"source": 12,
											"value": "357"
										},
										{
											"begin": 5025,
											"end": 5049,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5020,
											"end": 5023,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 5013,
											"end": 5050,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4938,
											"end": 5056,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4938,
											"end": 5056,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4938,
											"end": 5056,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 5062,
											"end": 5284,
											"name": "tag",
											"source": 12,
											"value": "44"
										},
										{
											"begin": 5062,
											"end": 5284,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5155,
											"end": 5159,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 5193,
											"end": 5195,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 5182,
											"end": 5191,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 5178,
											"end": 5196,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 5170,
											"end": 5196,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 5170,
											"end": 5196,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5206,
											"end": 5277,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "359"
										},
										{
											"begin": 5274,
											"end": 5275,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 5263,
											"end": 5272,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 5259,
											"end": 5276,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 5250,
											"end": 5256,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 5206,
											"end": 5277,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "275"
										},
										{
											"begin": 5206,
											"end": 5277,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5206,
											"end": 5277,
											"name": "tag",
											"source": 12,
											"value": "359"
										},
										{
											"begin": 5206,
											"end": 5277,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5062,
											"end": 5284,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 5062,
											"end": 5284,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 5062,
											"end": 5284,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5062,
											"end": 5284,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5062,
											"end": 5284,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 5290,
											"end": 5909,
											"name": "tag",
											"source": 12,
											"value": "47"
										},
										{
											"begin": 5290,
											"end": 5909,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5367,
											"end": 5373,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 5375,
											"end": 5381,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 5383,
											"end": 5389,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 5432,
											"end": 5434,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 5420,
											"end": 5429,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 5411,
											"end": 5418,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 5407,
											"end": 5430,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 5403,
											"end": 5435,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 5400,
											"end": 5519,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 5400,
											"end": 5519,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "361"
										},
										{
											"begin": 5400,
											"end": 5519,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 5438,
											"end": 5517,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "362"
										},
										{
											"begin": 5438,
											"end": 5517,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "255"
										},
										{
											"begin": 5438,
											"end": 5517,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5438,
											"end": 5517,
											"name": "tag",
											"source": 12,
											"value": "362"
										},
										{
											"begin": 5438,
											"end": 5517,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5400,
											"end": 5519,
											"name": "tag",
											"source": 12,
											"value": "361"
										},
										{
											"begin": 5400,
											"end": 5519,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5558,
											"end": 5559,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 5583,
											"end": 5636,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "363"
										},
										{
											"begin": 5628,
											"end": 5635,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 5619,
											"end": 5625,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 5608,
											"end": 5617,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 5604,
											"end": 5626,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 5583,
											"end": 5636,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "274"
										},
										{
											"begin": 5583,
											"end": 5636,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5583,
											"end": 5636,
											"name": "tag",
											"source": 12,
											"value": "363"
										},
										{
											"begin": 5583,
											"end": 5636,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5573,
											"end": 5636,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 5573,
											"end": 5636,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5529,
											"end": 5646,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5685,
											"end": 5687,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 5711,
											"end": 5764,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "364"
										},
										{
											"begin": 5756,
											"end": 5763,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 5747,
											"end": 5753,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 5736,
											"end": 5745,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 5732,
											"end": 5754,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 5711,
											"end": 5764,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "274"
										},
										{
											"begin": 5711,
											"end": 5764,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5711,
											"end": 5764,
											"name": "tag",
											"source": 12,
											"value": "364"
										},
										{
											"begin": 5711,
											"end": 5764,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5701,
											"end": 5764,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 5701,
											"end": 5764,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5656,
											"end": 5774,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5813,
											"end": 5815,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 5839,
											"end": 5892,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "365"
										},
										{
											"begin": 5884,
											"end": 5891,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 5875,
											"end": 5881,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 5864,
											"end": 5873,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 5860,
											"end": 5882,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 5839,
											"end": 5892,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "269"
										},
										{
											"begin": 5839,
											"end": 5892,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 5839,
											"end": 5892,
											"name": "tag",
											"source": 12,
											"value": "365"
										},
										{
											"begin": 5839,
											"end": 5892,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5829,
											"end": 5892,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 5829,
											"end": 5892,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5784,
											"end": 5902,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5290,
											"end": 5909,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 5290,
											"end": 5909,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5290,
											"end": 5909,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 5290,
											"end": 5909,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5290,
											"end": 5909,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 5290,
											"end": 5909,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 5915,
											"end": 6244,
											"name": "tag",
											"source": 12,
											"value": "51"
										},
										{
											"begin": 5915,
											"end": 6244,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5974,
											"end": 5980,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6023,
											"end": 6025,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 6011,
											"end": 6020,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6002,
											"end": 6009,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 5998,
											"end": 6021,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 5994,
											"end": 6026,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 5991,
											"end": 6110,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 5991,
											"end": 6110,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "367"
										},
										{
											"begin": 5991,
											"end": 6110,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 6029,
											"end": 6108,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "368"
										},
										{
											"begin": 6029,
											"end": 6108,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "255"
										},
										{
											"begin": 6029,
											"end": 6108,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6029,
											"end": 6108,
											"name": "tag",
											"source": 12,
											"value": "368"
										},
										{
											"begin": 6029,
											"end": 6108,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 5991,
											"end": 6110,
											"name": "tag",
											"source": 12,
											"value": "367"
										},
										{
											"begin": 5991,
											"end": 6110,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6149,
											"end": 6150,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6174,
											"end": 6227,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "369"
										},
										{
											"begin": 6219,
											"end": 6226,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 6210,
											"end": 6216,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6199,
											"end": 6208,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 6195,
											"end": 6217,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6174,
											"end": 6227,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "274"
										},
										{
											"begin": 6174,
											"end": 6227,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6174,
											"end": 6227,
											"name": "tag",
											"source": 12,
											"value": "369"
										},
										{
											"begin": 6174,
											"end": 6227,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6164,
											"end": 6227,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6164,
											"end": 6227,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6120,
											"end": 6237,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5915,
											"end": 6244,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 5915,
											"end": 6244,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 5915,
											"end": 6244,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5915,
											"end": 6244,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 5915,
											"end": 6244,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 6250,
											"end": 6366,
											"name": "tag",
											"source": 12,
											"value": "276"
										},
										{
											"begin": 6250,
											"end": 6366,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6320,
											"end": 6341,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "371"
										},
										{
											"begin": 6335,
											"end": 6340,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6320,
											"end": 6341,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "260"
										},
										{
											"begin": 6320,
											"end": 6341,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6320,
											"end": 6341,
											"name": "tag",
											"source": 12,
											"value": "371"
										},
										{
											"begin": 6320,
											"end": 6341,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6313,
											"end": 6318,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6310,
											"end": 6342,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 6300,
											"end": 6360,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "372"
										},
										{
											"begin": 6300,
											"end": 6360,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 6356,
											"end": 6357,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6353,
											"end": 6354,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6346,
											"end": 6358,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 6300,
											"end": 6360,
											"name": "tag",
											"source": 12,
											"value": "372"
										},
										{
											"begin": 6300,
											"end": 6360,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6250,
											"end": 6366,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6250,
											"end": 6366,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 6372,
											"end": 6505,
											"name": "tag",
											"source": 12,
											"value": "277"
										},
										{
											"begin": 6372,
											"end": 6505,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6415,
											"end": 6420,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6453,
											"end": 6459,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6440,
											"end": 6460,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 6431,
											"end": 6460,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6431,
											"end": 6460,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6469,
											"end": 6499,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "374"
										},
										{
											"begin": 6493,
											"end": 6498,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 6469,
											"end": 6499,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "276"
										},
										{
											"begin": 6469,
											"end": 6499,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6469,
											"end": 6499,
											"name": "tag",
											"source": 12,
											"value": "374"
										},
										{
											"begin": 6469,
											"end": 6499,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6372,
											"end": 6505,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 6372,
											"end": 6505,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6372,
											"end": 6505,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6372,
											"end": 6505,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6372,
											"end": 6505,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 6511,
											"end": 6979,
											"name": "tag",
											"source": 12,
											"value": "70"
										},
										{
											"begin": 6511,
											"end": 6979,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6576,
											"end": 6582,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6584,
											"end": 6590,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 6633,
											"end": 6635,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 6621,
											"end": 6630,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 6612,
											"end": 6619,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 6608,
											"end": 6631,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 6604,
											"end": 6636,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 6601,
											"end": 6720,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 6601,
											"end": 6720,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "376"
										},
										{
											"begin": 6601,
											"end": 6720,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 6639,
											"end": 6718,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "377"
										},
										{
											"begin": 6639,
											"end": 6718,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "255"
										},
										{
											"begin": 6639,
											"end": 6718,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6639,
											"end": 6718,
											"name": "tag",
											"source": 12,
											"value": "377"
										},
										{
											"begin": 6639,
											"end": 6718,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6601,
											"end": 6720,
											"name": "tag",
											"source": 12,
											"value": "376"
										},
										{
											"begin": 6601,
											"end": 6720,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6759,
											"end": 6760,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 6784,
											"end": 6837,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "378"
										},
										{
											"begin": 6829,
											"end": 6836,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 6820,
											"end": 6826,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6809,
											"end": 6818,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 6805,
											"end": 6827,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6784,
											"end": 6837,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "274"
										},
										{
											"begin": 6784,
											"end": 6837,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6784,
											"end": 6837,
											"name": "tag",
											"source": 12,
											"value": "378"
										},
										{
											"begin": 6784,
											"end": 6837,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6774,
											"end": 6837,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 6774,
											"end": 6837,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6730,
											"end": 6847,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6886,
											"end": 6888,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 6912,
											"end": 6962,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "379"
										},
										{
											"begin": 6954,
											"end": 6961,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 6945,
											"end": 6951,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 6934,
											"end": 6943,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 6930,
											"end": 6952,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 6912,
											"end": 6962,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "277"
										},
										{
											"begin": 6912,
											"end": 6962,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 6912,
											"end": 6962,
											"name": "tag",
											"source": 12,
											"value": "379"
										},
										{
											"begin": 6912,
											"end": 6962,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 6902,
											"end": 6962,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 6902,
											"end": 6962,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6857,
											"end": 6972,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6511,
											"end": 6979,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 6511,
											"end": 6979,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6511,
											"end": 6979,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 6511,
											"end": 6979,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 6511,
											"end": 6979,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 6511,
											"end": 6979,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 6985,
											"end": 7102,
											"name": "tag",
											"source": 12,
											"value": "278"
										},
										{
											"begin": 6985,
											"end": 7102,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7094,
											"end": 7095,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7091,
											"end": 7092,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7084,
											"end": 7096,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 7108,
											"end": 7225,
											"name": "tag",
											"source": 12,
											"value": "279"
										},
										{
											"begin": 7108,
											"end": 7225,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7217,
											"end": 7218,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7214,
											"end": 7215,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7207,
											"end": 7219,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 7231,
											"end": 7411,
											"name": "tag",
											"source": 12,
											"value": "240"
										},
										{
											"begin": 7231,
											"end": 7411,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7279,
											"end": 7356,
											"name": "PUSH",
											"source": 12,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7276,
											"end": 7277,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7269,
											"end": 7357,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7376,
											"end": 7380,
											"name": "PUSH",
											"source": 12,
											"value": "41"
										},
										{
											"begin": 7373,
											"end": 7374,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 7366,
											"end": 7381,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7400,
											"end": 7404,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 7397,
											"end": 7398,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7390,
											"end": 7405,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 7417,
											"end": 7698,
											"name": "tag",
											"source": 12,
											"value": "280"
										},
										{
											"begin": 7417,
											"end": 7698,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7500,
											"end": 7527,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "384"
										},
										{
											"begin": 7522,
											"end": 7526,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7500,
											"end": 7527,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "265"
										},
										{
											"begin": 7500,
											"end": 7527,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 7500,
											"end": 7527,
											"name": "tag",
											"source": 12,
											"value": "384"
										},
										{
											"begin": 7500,
											"end": 7527,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7492,
											"end": 7498,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7488,
											"end": 7528,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 7630,
											"end": 7636,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7618,
											"end": 7628,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 7615,
											"end": 7637,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 7594,
											"end": 7612,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7582,
											"end": 7592,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7579,
											"end": 7613,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 7576,
											"end": 7638,
											"name": "OR",
											"source": 12
										},
										{
											"begin": 7573,
											"end": 7661,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7573,
											"end": 7661,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "385"
										},
										{
											"begin": 7573,
											"end": 7661,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 7641,
											"end": 7659,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "386"
										},
										{
											"begin": 7641,
											"end": 7659,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "240"
										},
										{
											"begin": 7641,
											"end": 7659,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 7641,
											"end": 7659,
											"name": "tag",
											"source": 12,
											"value": "386"
										},
										{
											"begin": 7641,
											"end": 7659,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7573,
											"end": 7661,
											"name": "tag",
											"source": 12,
											"value": "385"
										},
										{
											"begin": 7573,
											"end": 7661,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7681,
											"end": 7691,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 7677,
											"end": 7679,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 7670,
											"end": 7692,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 7460,
											"end": 7698,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7417,
											"end": 7698,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7417,
											"end": 7698,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7417,
											"end": 7698,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 7704,
											"end": 7833,
											"name": "tag",
											"source": 12,
											"value": "281"
										},
										{
											"begin": 7704,
											"end": 7833,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7738,
											"end": 7744,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "388"
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "254"
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "tag",
											"source": 12,
											"value": "388"
										},
										{
											"begin": 7765,
											"end": 7785,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7755,
											"end": 7785,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7755,
											"end": 7785,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7794,
											"end": 7827,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "389"
										},
										{
											"begin": 7822,
											"end": 7826,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7814,
											"end": 7820,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7794,
											"end": 7827,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "280"
										},
										{
											"begin": 7794,
											"end": 7827,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 7794,
											"end": 7827,
											"name": "tag",
											"source": 12,
											"value": "389"
										},
										{
											"begin": 7794,
											"end": 7827,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7704,
											"end": 7833,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7704,
											"end": 7833,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7704,
											"end": 7833,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7704,
											"end": 7833,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 7839,
											"end": 8146,
											"name": "tag",
											"source": 12,
											"value": "282"
										},
										{
											"begin": 7839,
											"end": 8146,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7900,
											"end": 7904,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 7990,
											"end": 8008,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7982,
											"end": 7988,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 7979,
											"end": 8009,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 7976,
											"end": 8032,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 7976,
											"end": 8032,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "391"
										},
										{
											"begin": 7976,
											"end": 8032,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 8012,
											"end": 8030,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "392"
										},
										{
											"begin": 8012,
											"end": 8030,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "240"
										},
										{
											"begin": 8012,
											"end": 8030,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 8012,
											"end": 8030,
											"name": "tag",
											"source": 12,
											"value": "392"
										},
										{
											"begin": 8012,
											"end": 8030,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 7976,
											"end": 8032,
											"name": "tag",
											"source": 12,
											"value": "391"
										},
										{
											"begin": 7976,
											"end": 8032,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8050,
											"end": 8079,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "393"
										},
										{
											"begin": 8072,
											"end": 8078,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8050,
											"end": 8079,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "265"
										},
										{
											"begin": 8050,
											"end": 8079,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 8050,
											"end": 8079,
											"name": "tag",
											"source": 12,
											"value": "393"
										},
										{
											"begin": 8050,
											"end": 8079,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8042,
											"end": 8079,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8042,
											"end": 8079,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8134,
											"end": 8138,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 8128,
											"end": 8132,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8124,
											"end": 8139,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8116,
											"end": 8139,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8116,
											"end": 8139,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7839,
											"end": 8146,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 7839,
											"end": 8146,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 7839,
											"end": 8146,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 7839,
											"end": 8146,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 8152,
											"end": 8306,
											"name": "tag",
											"source": 12,
											"value": "283"
										},
										{
											"begin": 8152,
											"end": 8306,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8236,
											"end": 8242,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8231,
											"end": 8234,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8226,
											"end": 8229,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 8213,
											"end": 8243,
											"name": "CALLDATACOPY",
											"source": 12
										},
										{
											"begin": 8298,
											"end": 8299,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8289,
											"end": 8295,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 8284,
											"end": 8287,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 8280,
											"end": 8296,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8273,
											"end": 8300,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8152,
											"end": 8306,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8152,
											"end": 8306,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8152,
											"end": 8306,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8152,
											"end": 8306,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 8312,
											"end": 8722,
											"name": "tag",
											"source": 12,
											"value": "284"
										},
										{
											"begin": 8312,
											"end": 8722,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8389,
											"end": 8394,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8414,
											"end": 8479,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "396"
										},
										{
											"begin": 8430,
											"end": 8478,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "397"
										},
										{
											"begin": 8471,
											"end": 8477,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 8430,
											"end": 8478,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "282"
										},
										{
											"begin": 8430,
											"end": 8478,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 8430,
											"end": 8478,
											"name": "tag",
											"source": 12,
											"value": "397"
										},
										{
											"begin": 8430,
											"end": 8478,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8414,
											"end": 8479,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "281"
										},
										{
											"begin": 8414,
											"end": 8479,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 8414,
											"end": 8479,
											"name": "tag",
											"source": 12,
											"value": "396"
										},
										{
											"begin": 8414,
											"end": 8479,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8405,
											"end": 8479,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 8405,
											"end": 8479,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8502,
											"end": 8508,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8495,
											"end": 8500,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8488,
											"end": 8509,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 8540,
											"end": 8544,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 8533,
											"end": 8538,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8529,
											"end": 8545,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8578,
											"end": 8581,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 8569,
											"end": 8575,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 8564,
											"end": 8567,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 8560,
											"end": 8576,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8557,
											"end": 8582,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 8554,
											"end": 8666,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 8554,
											"end": 8666,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "398"
										},
										{
											"begin": 8554,
											"end": 8666,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 8585,
											"end": 8664,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "399"
										},
										{
											"begin": 8585,
											"end": 8664,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "279"
										},
										{
											"begin": 8585,
											"end": 8664,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 8585,
											"end": 8664,
											"name": "tag",
											"source": 12,
											"value": "399"
										},
										{
											"begin": 8585,
											"end": 8664,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8554,
											"end": 8666,
											"name": "tag",
											"source": 12,
											"value": "398"
										},
										{
											"begin": 8554,
											"end": 8666,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8675,
											"end": 8716,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "400"
										},
										{
											"begin": 8709,
											"end": 8715,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 8704,
											"end": 8707,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8699,
											"end": 8702,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 8675,
											"end": 8716,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "283"
										},
										{
											"begin": 8675,
											"end": 8716,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 8675,
											"end": 8716,
											"name": "tag",
											"source": 12,
											"value": "400"
										},
										{
											"begin": 8675,
											"end": 8716,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8395,
											"end": 8722,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8312,
											"end": 8722,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 8312,
											"end": 8722,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 8312,
											"end": 8722,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8312,
											"end": 8722,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8312,
											"end": 8722,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8312,
											"end": 8722,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 8741,
											"end": 9079,
											"name": "tag",
											"source": 12,
											"value": "285"
										},
										{
											"begin": 8741,
											"end": 9079,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8796,
											"end": 8801,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 8845,
											"end": 8848,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 8838,
											"end": 8842,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 8830,
											"end": 8836,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 8826,
											"end": 8843,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8822,
											"end": 8849,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 8812,
											"end": 8934,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "402"
										},
										{
											"begin": 8812,
											"end": 8934,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 8853,
											"end": 8932,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "403"
										},
										{
											"begin": 8853,
											"end": 8932,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "278"
										},
										{
											"begin": 8853,
											"end": 8932,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 8853,
											"end": 8932,
											"name": "tag",
											"source": 12,
											"value": "403"
										},
										{
											"begin": 8853,
											"end": 8932,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8812,
											"end": 8934,
											"name": "tag",
											"source": 12,
											"value": "402"
										},
										{
											"begin": 8812,
											"end": 8934,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8970,
											"end": 8976,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 8957,
											"end": 8977,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 8995,
											"end": 9073,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "404"
										},
										{
											"begin": 9069,
											"end": 9072,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 9061,
											"end": 9067,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 9054,
											"end": 9058,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 9046,
											"end": 9052,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 9042,
											"end": 9059,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 8995,
											"end": 9073,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "284"
										},
										{
											"begin": 8995,
											"end": 9073,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 8995,
											"end": 9073,
											"name": "tag",
											"source": 12,
											"value": "404"
										},
										{
											"begin": 8995,
											"end": 9073,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 8986,
											"end": 9073,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8986,
											"end": 9073,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8802,
											"end": 9079,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8741,
											"end": 9079,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 8741,
											"end": 9079,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 8741,
											"end": 9079,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8741,
											"end": 9079,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 8741,
											"end": 9079,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 9085,
											"end": 10028,
											"name": "tag",
											"source": 12,
											"value": "74"
										},
										{
											"begin": 9085,
											"end": 10028,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9180,
											"end": 9186,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 9188,
											"end": 9194,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 9196,
											"end": 9202,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 9204,
											"end": 9210,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 9253,
											"end": 9256,
											"name": "PUSH",
											"source": 12,
											"value": "80"
										},
										{
											"begin": 9241,
											"end": 9250,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 9232,
											"end": 9239,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 9228,
											"end": 9251,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 9224,
											"end": 9257,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 9221,
											"end": 9341,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 9221,
											"end": 9341,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "406"
										},
										{
											"begin": 9221,
											"end": 9341,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 9260,
											"end": 9339,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "407"
										},
										{
											"begin": 9260,
											"end": 9339,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "255"
										},
										{
											"begin": 9260,
											"end": 9339,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 9260,
											"end": 9339,
											"name": "tag",
											"source": 12,
											"value": "407"
										},
										{
											"begin": 9260,
											"end": 9339,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9221,
											"end": 9341,
											"name": "tag",
											"source": 12,
											"value": "406"
										},
										{
											"begin": 9221,
											"end": 9341,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9380,
											"end": 9381,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 9405,
											"end": 9458,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "408"
										},
										{
											"begin": 9450,
											"end": 9457,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 9441,
											"end": 9447,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 9430,
											"end": 9439,
											"name": "DUP9",
											"source": 12
										},
										{
											"begin": 9426,
											"end": 9448,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9405,
											"end": 9458,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "274"
										},
										{
											"begin": 9405,
											"end": 9458,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 9405,
											"end": 9458,
											"name": "tag",
											"source": 12,
											"value": "408"
										},
										{
											"begin": 9405,
											"end": 9458,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9395,
											"end": 9458,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 9395,
											"end": 9458,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9351,
											"end": 9468,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9507,
											"end": 9509,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 9533,
											"end": 9586,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "409"
										},
										{
											"begin": 9578,
											"end": 9585,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 9569,
											"end": 9575,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 9558,
											"end": 9567,
											"name": "DUP9",
											"source": 12
										},
										{
											"begin": 9554,
											"end": 9576,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9533,
											"end": 9586,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "274"
										},
										{
											"begin": 9533,
											"end": 9586,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 9533,
											"end": 9586,
											"name": "tag",
											"source": 12,
											"value": "409"
										},
										{
											"begin": 9533,
											"end": 9586,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9523,
											"end": 9586,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 9523,
											"end": 9586,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9478,
											"end": 9596,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9635,
											"end": 9637,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 9661,
											"end": 9714,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "410"
										},
										{
											"begin": 9706,
											"end": 9713,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 9697,
											"end": 9703,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 9686,
											"end": 9695,
											"name": "DUP9",
											"source": 12
										},
										{
											"begin": 9682,
											"end": 9704,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9661,
											"end": 9714,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "269"
										},
										{
											"begin": 9661,
											"end": 9714,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 9661,
											"end": 9714,
											"name": "tag",
											"source": 12,
											"value": "410"
										},
										{
											"begin": 9661,
											"end": 9714,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9651,
											"end": 9714,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 9651,
											"end": 9714,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9606,
											"end": 9724,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9791,
											"end": 9793,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 9780,
											"end": 9789,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 9776,
											"end": 9794,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9763,
											"end": 9795,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 9822,
											"end": 9840,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9814,
											"end": 9820,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 9811,
											"end": 9841,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 9808,
											"end": 9925,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 9808,
											"end": 9925,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "411"
										},
										{
											"begin": 9808,
											"end": 9925,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 9844,
											"end": 9923,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "412"
										},
										{
											"begin": 9844,
											"end": 9923,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "256"
										},
										{
											"begin": 9844,
											"end": 9923,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 9844,
											"end": 9923,
											"name": "tag",
											"source": 12,
											"value": "412"
										},
										{
											"begin": 9844,
											"end": 9923,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9808,
											"end": 9925,
											"name": "tag",
											"source": 12,
											"value": "411"
										},
										{
											"begin": 9808,
											"end": 9925,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9949,
											"end": 10011,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "413"
										},
										{
											"begin": 10003,
											"end": 10010,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 9994,
											"end": 10000,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 9983,
											"end": 9992,
											"name": "DUP9",
											"source": 12
										},
										{
											"begin": 9979,
											"end": 10001,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 9949,
											"end": 10011,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "285"
										},
										{
											"begin": 9949,
											"end": 10011,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 9949,
											"end": 10011,
											"name": "tag",
											"source": 12,
											"value": "413"
										},
										{
											"begin": 9949,
											"end": 10011,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 9939,
											"end": 10011,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 9939,
											"end": 10011,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9734,
											"end": 10021,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9085,
											"end": 10028,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 9085,
											"end": 10028,
											"name": "SWAP6",
											"source": 12
										},
										{
											"begin": 9085,
											"end": 10028,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 9085,
											"end": 10028,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 9085,
											"end": 10028,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9085,
											"end": 10028,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 9085,
											"end": 10028,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 9085,
											"end": 10028,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 10034,
											"end": 10508,
											"name": "tag",
											"source": 12,
											"value": "82"
										},
										{
											"begin": 10034,
											"end": 10508,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10102,
											"end": 10108,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 10110,
											"end": 10116,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 10159,
											"end": 10161,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 10147,
											"end": 10156,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 10138,
											"end": 10145,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 10134,
											"end": 10157,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 10130,
											"end": 10162,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 10127,
											"end": 10246,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 10127,
											"end": 10246,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "415"
										},
										{
											"begin": 10127,
											"end": 10246,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 10165,
											"end": 10244,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "416"
										},
										{
											"begin": 10165,
											"end": 10244,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "255"
										},
										{
											"begin": 10165,
											"end": 10244,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 10165,
											"end": 10244,
											"name": "tag",
											"source": 12,
											"value": "416"
										},
										{
											"begin": 10165,
											"end": 10244,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10127,
											"end": 10246,
											"name": "tag",
											"source": 12,
											"value": "415"
										},
										{
											"begin": 10127,
											"end": 10246,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10285,
											"end": 10286,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 10310,
											"end": 10363,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "417"
										},
										{
											"begin": 10355,
											"end": 10362,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 10346,
											"end": 10352,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 10335,
											"end": 10344,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 10331,
											"end": 10353,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 10310,
											"end": 10363,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "274"
										},
										{
											"begin": 10310,
											"end": 10363,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 10310,
											"end": 10363,
											"name": "tag",
											"source": 12,
											"value": "417"
										},
										{
											"begin": 10310,
											"end": 10363,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10300,
											"end": 10363,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 10300,
											"end": 10363,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10256,
											"end": 10373,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10412,
											"end": 10414,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 10438,
											"end": 10491,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "418"
										},
										{
											"begin": 10483,
											"end": 10490,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 10474,
											"end": 10480,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 10463,
											"end": 10472,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 10459,
											"end": 10481,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 10438,
											"end": 10491,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "274"
										},
										{
											"begin": 10438,
											"end": 10491,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 10438,
											"end": 10491,
											"name": "tag",
											"source": 12,
											"value": "418"
										},
										{
											"begin": 10438,
											"end": 10491,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10428,
											"end": 10491,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 10428,
											"end": 10491,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10383,
											"end": 10501,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10034,
											"end": 10508,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 10034,
											"end": 10508,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10034,
											"end": 10508,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 10034,
											"end": 10508,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10034,
											"end": 10508,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10034,
											"end": 10508,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 10514,
											"end": 10694,
											"name": "tag",
											"source": 12,
											"value": "286"
										},
										{
											"begin": 10514,
											"end": 10694,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10562,
											"end": 10639,
											"name": "PUSH",
											"source": 12,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 10559,
											"end": 10560,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 10552,
											"end": 10640,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 10659,
											"end": 10663,
											"name": "PUSH",
											"source": 12,
											"value": "22"
										},
										{
											"begin": 10656,
											"end": 10657,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 10649,
											"end": 10664,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 10683,
											"end": 10687,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 10680,
											"end": 10681,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 10673,
											"end": 10688,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 10700,
											"end": 11020,
											"name": "tag",
											"source": 12,
											"value": "92"
										},
										{
											"begin": 10700,
											"end": 11020,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10744,
											"end": 10750,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 10781,
											"end": 10782,
											"name": "PUSH",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 10775,
											"end": 10779,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 10771,
											"end": 10783,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 10761,
											"end": 10783,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10761,
											"end": 10783,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10828,
											"end": 10829,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 10822,
											"end": 10826,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 10818,
											"end": 10830,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 10849,
											"end": 10867,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 10839,
											"end": 10920,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "421"
										},
										{
											"begin": 10839,
											"end": 10920,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 10905,
											"end": 10909,
											"name": "PUSH",
											"source": 12,
											"value": "7F"
										},
										{
											"begin": 10897,
											"end": 10903,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 10893,
											"end": 10910,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 10883,
											"end": 10910,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 10883,
											"end": 10910,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10839,
											"end": 10920,
											"name": "tag",
											"source": 12,
											"value": "421"
										},
										{
											"begin": 10839,
											"end": 10920,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10967,
											"end": 10969,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 10959,
											"end": 10965,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 10956,
											"end": 10970,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 10936,
											"end": 10954,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 10933,
											"end": 10971,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 10930,
											"end": 11014,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "422"
										},
										{
											"begin": 10930,
											"end": 11014,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 10986,
											"end": 11004,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "423"
										},
										{
											"begin": 10986,
											"end": 11004,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "286"
										},
										{
											"begin": 10986,
											"end": 11004,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 10986,
											"end": 11004,
											"name": "tag",
											"source": 12,
											"value": "423"
										},
										{
											"begin": 10986,
											"end": 11004,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10930,
											"end": 11014,
											"name": "tag",
											"source": 12,
											"value": "422"
										},
										{
											"begin": 10930,
											"end": 11014,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 10751,
											"end": 11020,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10700,
											"end": 11020,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 10700,
											"end": 11020,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 10700,
											"end": 11020,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 10700,
											"end": 11020,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 11026,
											"end": 11174,
											"name": "tag",
											"source": 12,
											"value": "287"
										},
										{
											"begin": 11026,
											"end": 11174,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 11128,
											"end": 11139,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 11165,
											"end": 11168,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 11150,
											"end": 11168,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 11150,
											"end": 11168,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11026,
											"end": 11174,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 11026,
											"end": 11174,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 11026,
											"end": 11174,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11026,
											"end": 11174,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11026,
											"end": 11174,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 11180,
											"end": 11557,
											"name": "tag",
											"source": 12,
											"value": "288"
										},
										{
											"begin": 11180,
											"end": 11557,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 11286,
											"end": 11289,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 11314,
											"end": 11353,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "426"
										},
										{
											"begin": 11347,
											"end": 11352,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 11314,
											"end": 11353,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "262"
										},
										{
											"begin": 11314,
											"end": 11353,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 11314,
											"end": 11353,
											"name": "tag",
											"source": 12,
											"value": "426"
										},
										{
											"begin": 11314,
											"end": 11353,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 11369,
											"end": 11458,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "427"
										},
										{
											"begin": 11451,
											"end": 11457,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 11446,
											"end": 11449,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 11369,
											"end": 11458,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "287"
										},
										{
											"begin": 11369,
											"end": 11458,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 11369,
											"end": 11458,
											"name": "tag",
											"source": 12,
											"value": "427"
										},
										{
											"begin": 11369,
											"end": 11458,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 11362,
											"end": 11458,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 11362,
											"end": 11458,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11467,
											"end": 11519,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "428"
										},
										{
											"begin": 11512,
											"end": 11518,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 11507,
											"end": 11510,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 11500,
											"end": 11504,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 11493,
											"end": 11498,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 11489,
											"end": 11505,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 11467,
											"end": 11519,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "264"
										},
										{
											"begin": 11467,
											"end": 11519,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 11467,
											"end": 11519,
											"name": "tag",
											"source": 12,
											"value": "428"
										},
										{
											"begin": 11467,
											"end": 11519,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 11544,
											"end": 11550,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 11539,
											"end": 11542,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 11535,
											"end": 11551,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 11528,
											"end": 11551,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 11528,
											"end": 11551,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11290,
											"end": 11557,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11180,
											"end": 11557,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 11180,
											"end": 11557,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 11180,
											"end": 11557,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11180,
											"end": 11557,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11180,
											"end": 11557,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 11563,
											"end": 11998,
											"name": "tag",
											"source": 12,
											"value": "163"
										},
										{
											"begin": 11563,
											"end": 11998,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 11743,
											"end": 11746,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 11765,
											"end": 11860,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "430"
										},
										{
											"begin": 11856,
											"end": 11859,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 11847,
											"end": 11853,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 11765,
											"end": 11860,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "288"
										},
										{
											"begin": 11765,
											"end": 11860,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 11765,
											"end": 11860,
											"name": "tag",
											"source": 12,
											"value": "430"
										},
										{
											"begin": 11765,
											"end": 11860,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 11758,
											"end": 11860,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 11758,
											"end": 11860,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11877,
											"end": 11972,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "431"
										},
										{
											"begin": 11968,
											"end": 11971,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 11959,
											"end": 11965,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 11877,
											"end": 11972,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "288"
										},
										{
											"begin": 11877,
											"end": 11972,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 11877,
											"end": 11972,
											"name": "tag",
											"source": 12,
											"value": "431"
										},
										{
											"begin": 11877,
											"end": 11972,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 11870,
											"end": 11972,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 11870,
											"end": 11972,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11989,
											"end": 11992,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 11982,
											"end": 11992,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 11982,
											"end": 11992,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11563,
											"end": 11998,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 11563,
											"end": 11998,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 11563,
											"end": 11998,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11563,
											"end": 11998,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11563,
											"end": 11998,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 11563,
											"end": 11998,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 12004,
											"end": 12184,
											"name": "tag",
											"source": 12,
											"value": "289"
										},
										{
											"begin": 12004,
											"end": 12184,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 12052,
											"end": 12129,
											"name": "PUSH",
											"source": 12,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 12049,
											"end": 12050,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 12042,
											"end": 12130,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 12149,
											"end": 12153,
											"name": "PUSH",
											"source": 12,
											"value": "11"
										},
										{
											"begin": 12146,
											"end": 12147,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 12139,
											"end": 12154,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 12173,
											"end": 12177,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 12170,
											"end": 12171,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 12163,
											"end": 12178,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 12190,
											"end": 12381,
											"name": "tag",
											"source": 12,
											"value": "194"
										},
										{
											"begin": 12190,
											"end": 12381,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 12230,
											"end": 12234,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 12250,
											"end": 12270,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "434"
										},
										{
											"begin": 12268,
											"end": 12269,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 12250,
											"end": 12270,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "267"
										},
										{
											"begin": 12250,
											"end": 12270,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 12250,
											"end": 12270,
											"name": "tag",
											"source": 12,
											"value": "434"
										},
										{
											"begin": 12250,
											"end": 12270,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 12245,
											"end": 12270,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 12245,
											"end": 12270,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 12284,
											"end": 12304,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "435"
										},
										{
											"begin": 12302,
											"end": 12303,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 12284,
											"end": 12304,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "267"
										},
										{
											"begin": 12284,
											"end": 12304,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 12284,
											"end": 12304,
											"name": "tag",
											"source": 12,
											"value": "435"
										},
										{
											"begin": 12284,
											"end": 12304,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 12279,
											"end": 12304,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 12279,
											"end": 12304,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 12323,
											"end": 12324,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 12320,
											"end": 12321,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 12317,
											"end": 12325,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 12314,
											"end": 12348,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 12314,
											"end": 12348,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "436"
										},
										{
											"begin": 12314,
											"end": 12348,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 12328,
											"end": 12346,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "437"
										},
										{
											"begin": 12328,
											"end": 12346,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "289"
										},
										{
											"begin": 12328,
											"end": 12346,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 12328,
											"end": 12346,
											"name": "tag",
											"source": 12,
											"value": "437"
										},
										{
											"begin": 12328,
											"end": 12346,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 12314,
											"end": 12348,
											"name": "tag",
											"source": 12,
											"value": "436"
										},
										{
											"begin": 12314,
											"end": 12348,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 12373,
											"end": 12374,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 12370,
											"end": 12371,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 12366,
											"end": 12375,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 12358,
											"end": 12375,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 12358,
											"end": 12375,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 12190,
											"end": 12381,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 12190,
											"end": 12381,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 12190,
											"end": 12381,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 12190,
											"end": 12381,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 12190,
											"end": 12381,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 12387,
											"end": 12735,
											"name": "tag",
											"source": 12,
											"value": "197"
										},
										{
											"begin": 12387,
											"end": 12735,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 12427,
											"end": 12434,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 12450,
											"end": 12470,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "439"
										},
										{
											"begin": 12468,
											"end": 12469,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 12450,
											"end": 12470,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "267"
										},
										{
											"begin": 12450,
											"end": 12470,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 12450,
											"end": 12470,
											"name": "tag",
											"source": 12,
											"value": "439"
										},
										{
											"begin": 12450,
											"end": 12470,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 12445,
											"end": 12470,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 12445,
											"end": 12470,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 12484,
											"end": 12504,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "440"
										},
										{
											"begin": 12502,
											"end": 12503,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 12484,
											"end": 12504,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "267"
										},
										{
											"begin": 12484,
											"end": 12504,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 12484,
											"end": 12504,
											"name": "tag",
											"source": 12,
											"value": "440"
										},
										{
											"begin": 12484,
											"end": 12504,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 12479,
											"end": 12504,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 12479,
											"end": 12504,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 12672,
											"end": 12673,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 12604,
											"end": 12670,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12600,
											"end": 12674,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 12597,
											"end": 12598,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 12594,
											"end": 12675,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 12589,
											"end": 12590,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 12582,
											"end": 12591,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 12575,
											"end": 12592,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 12571,
											"end": 12676,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 12568,
											"end": 12699,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 12568,
											"end": 12699,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "441"
										},
										{
											"begin": 12568,
											"end": 12699,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 12679,
											"end": 12697,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "442"
										},
										{
											"begin": 12679,
											"end": 12697,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "289"
										},
										{
											"begin": 12679,
											"end": 12697,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 12679,
											"end": 12697,
											"name": "tag",
											"source": 12,
											"value": "442"
										},
										{
											"begin": 12679,
											"end": 12697,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 12568,
											"end": 12699,
											"name": "tag",
											"source": 12,
											"value": "441"
										},
										{
											"begin": 12568,
											"end": 12699,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 12727,
											"end": 12728,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 12724,
											"end": 12725,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 12720,
											"end": 12729,
											"name": "MUL",
											"source": 12
										},
										{
											"begin": 12709,
											"end": 12729,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 12709,
											"end": 12729,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 12387,
											"end": 12735,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 12387,
											"end": 12735,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 12387,
											"end": 12735,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 12387,
											"end": 12735,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 12387,
											"end": 12735,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 12741,
											"end": 13046,
											"name": "tag",
											"source": 12,
											"value": "200"
										},
										{
											"begin": 12741,
											"end": 13046,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 12781,
											"end": 12784,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 12800,
											"end": 12820,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "444"
										},
										{
											"begin": 12818,
											"end": 12819,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 12800,
											"end": 12820,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "267"
										},
										{
											"begin": 12800,
											"end": 12820,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 12800,
											"end": 12820,
											"name": "tag",
											"source": 12,
											"value": "444"
										},
										{
											"begin": 12800,
											"end": 12820,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 12795,
											"end": 12820,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 12795,
											"end": 12820,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 12834,
											"end": 12854,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "445"
										},
										{
											"begin": 12852,
											"end": 12853,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 12834,
											"end": 12854,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "267"
										},
										{
											"begin": 12834,
											"end": 12854,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 12834,
											"end": 12854,
											"name": "tag",
											"source": 12,
											"value": "445"
										},
										{
											"begin": 12834,
											"end": 12854,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 12829,
											"end": 12854,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 12829,
											"end": 12854,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 12988,
											"end": 12989,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 12920,
											"end": 12986,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12916,
											"end": 12990,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 12913,
											"end": 12914,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 12910,
											"end": 12991,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 12907,
											"end": 13014,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 12907,
											"end": 13014,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "446"
										},
										{
											"begin": 12907,
											"end": 13014,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 12994,
											"end": 13012,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "447"
										},
										{
											"begin": 12994,
											"end": 13012,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "289"
										},
										{
											"begin": 12994,
											"end": 13012,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 12994,
											"end": 13012,
											"name": "tag",
											"source": 12,
											"value": "447"
										},
										{
											"begin": 12994,
											"end": 13012,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 12907,
											"end": 13014,
											"name": "tag",
											"source": 12,
											"value": "446"
										},
										{
											"begin": 12907,
											"end": 13014,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 13038,
											"end": 13039,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 13035,
											"end": 13036,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 13031,
											"end": 13040,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 13024,
											"end": 13040,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 13024,
											"end": 13040,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 12741,
											"end": 13046,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 12741,
											"end": 13046,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 12741,
											"end": 13046,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 12741,
											"end": 13046,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 12741,
											"end": 13046,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 13052,
											"end": 13150,
											"name": "tag",
											"source": 12,
											"value": "290"
										},
										{
											"begin": 13052,
											"end": 13150,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 13103,
											"end": 13109,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 13137,
											"end": 13142,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 13131,
											"end": 13143,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 13121,
											"end": 13143,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 13121,
											"end": 13143,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 13052,
											"end": 13150,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 13052,
											"end": 13150,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 13052,
											"end": 13150,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 13052,
											"end": 13150,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 13156,
											"end": 13324,
											"name": "tag",
											"source": 12,
											"value": "291"
										},
										{
											"begin": 13156,
											"end": 13324,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 13239,
											"end": 13250,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 13273,
											"end": 13279,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 13268,
											"end": 13271,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 13261,
											"end": 13280,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 13313,
											"end": 13317,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 13308,
											"end": 13311,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 13304,
											"end": 13318,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 13289,
											"end": 13318,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 13289,
											"end": 13318,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 13156,
											"end": 13324,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 13156,
											"end": 13324,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 13156,
											"end": 13324,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 13156,
											"end": 13324,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 13156,
											"end": 13324,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 13330,
											"end": 13690,
											"name": "tag",
											"source": 12,
											"value": "292"
										},
										{
											"begin": 13330,
											"end": 13690,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 13416,
											"end": 13419,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 13444,
											"end": 13482,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "451"
										},
										{
											"begin": 13476,
											"end": 13481,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 13444,
											"end": 13482,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "290"
										},
										{
											"begin": 13444,
											"end": 13482,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 13444,
											"end": 13482,
											"name": "tag",
											"source": 12,
											"value": "451"
										},
										{
											"begin": 13444,
											"end": 13482,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 13498,
											"end": 13568,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "452"
										},
										{
											"begin": 13561,
											"end": 13567,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 13556,
											"end": 13559,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 13498,
											"end": 13568,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "291"
										},
										{
											"begin": 13498,
											"end": 13568,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 13498,
											"end": 13568,
											"name": "tag",
											"source": 12,
											"value": "452"
										},
										{
											"begin": 13498,
											"end": 13568,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 13491,
											"end": 13568,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 13491,
											"end": 13568,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 13577,
											"end": 13629,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "453"
										},
										{
											"begin": 13622,
											"end": 13628,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 13617,
											"end": 13620,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 13610,
											"end": 13614,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 13603,
											"end": 13608,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 13599,
											"end": 13615,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 13577,
											"end": 13629,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "264"
										},
										{
											"begin": 13577,
											"end": 13629,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 13577,
											"end": 13629,
											"name": "tag",
											"source": 12,
											"value": "453"
										},
										{
											"begin": 13577,
											"end": 13629,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 13654,
											"end": 13683,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "454"
										},
										{
											"begin": 13676,
											"end": 13682,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 13654,
											"end": 13683,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "265"
										},
										{
											"begin": 13654,
											"end": 13683,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 13654,
											"end": 13683,
											"name": "tag",
											"source": 12,
											"value": "454"
										},
										{
											"begin": 13654,
											"end": 13683,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 13649,
											"end": 13652,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 13645,
											"end": 13684,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 13638,
											"end": 13684,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 13638,
											"end": 13684,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 13420,
											"end": 13690,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 13330,
											"end": 13690,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 13330,
											"end": 13690,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 13330,
											"end": 13690,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 13330,
											"end": 13690,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 13330,
											"end": 13690,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 13696,
											"end": 14336,
											"name": "tag",
											"source": 12,
											"value": "216"
										},
										{
											"begin": 13696,
											"end": 14336,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 13891,
											"end": 13895,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 13929,
											"end": 13932,
											"name": "PUSH",
											"source": 12,
											"value": "80"
										},
										{
											"begin": 13918,
											"end": 13927,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 13914,
											"end": 13933,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 13906,
											"end": 13933,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 13906,
											"end": 13933,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 13943,
											"end": 14014,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "456"
										},
										{
											"begin": 14011,
											"end": 14012,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 14000,
											"end": 14009,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 13996,
											"end": 14013,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 13987,
											"end": 13993,
											"name": "DUP8",
											"source": 12
										},
										{
											"begin": 13943,
											"end": 14014,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "272"
										},
										{
											"begin": 13943,
											"end": 14014,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 13943,
											"end": 14014,
											"name": "tag",
											"source": 12,
											"value": "456"
										},
										{
											"begin": 13943,
											"end": 14014,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 14024,
											"end": 14096,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "457"
										},
										{
											"begin": 14092,
											"end": 14094,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 14081,
											"end": 14090,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 14077,
											"end": 14095,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 14068,
											"end": 14074,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 14024,
											"end": 14096,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "272"
										},
										{
											"begin": 14024,
											"end": 14096,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 14024,
											"end": 14096,
											"name": "tag",
											"source": 12,
											"value": "457"
										},
										{
											"begin": 14024,
											"end": 14096,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 14106,
											"end": 14178,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "458"
										},
										{
											"begin": 14174,
											"end": 14176,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 14163,
											"end": 14172,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 14159,
											"end": 14177,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 14150,
											"end": 14156,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 14106,
											"end": 14178,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "275"
										},
										{
											"begin": 14106,
											"end": 14178,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 14106,
											"end": 14178,
											"name": "tag",
											"source": 12,
											"value": "458"
										},
										{
											"begin": 14106,
											"end": 14178,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 14225,
											"end": 14234,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 14219,
											"end": 14223,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 14215,
											"end": 14235,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 14210,
											"end": 14212,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 14199,
											"end": 14208,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 14195,
											"end": 14213,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 14188,
											"end": 14236,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 14253,
											"end": 14329,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "459"
										},
										{
											"begin": 14324,
											"end": 14328,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 14315,
											"end": 14321,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 14253,
											"end": 14329,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "292"
										},
										{
											"begin": 14253,
											"end": 14329,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 14253,
											"end": 14329,
											"name": "tag",
											"source": 12,
											"value": "459"
										},
										{
											"begin": 14253,
											"end": 14329,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 14245,
											"end": 14329,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 14245,
											"end": 14329,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 13696,
											"end": 14336,
											"name": "SWAP6",
											"source": 12
										},
										{
											"begin": 13696,
											"end": 14336,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 13696,
											"end": 14336,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 13696,
											"end": 14336,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 13696,
											"end": 14336,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 13696,
											"end": 14336,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 13696,
											"end": 14336,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 13696,
											"end": 14336,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 14342,
											"end": 14483,
											"name": "tag",
											"source": 12,
											"value": "293"
										},
										{
											"begin": 14342,
											"end": 14483,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 14398,
											"end": 14403,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 14429,
											"end": 14435,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 14423,
											"end": 14436,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 14414,
											"end": 14436,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 14414,
											"end": 14436,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14445,
											"end": 14477,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "461"
										},
										{
											"begin": 14471,
											"end": 14476,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 14445,
											"end": 14477,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "258"
										},
										{
											"begin": 14445,
											"end": 14477,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 14445,
											"end": 14477,
											"name": "tag",
											"source": 12,
											"value": "461"
										},
										{
											"begin": 14445,
											"end": 14477,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 14342,
											"end": 14483,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 14342,
											"end": 14483,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 14342,
											"end": 14483,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14342,
											"end": 14483,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14342,
											"end": 14483,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 14489,
											"end": 14838,
											"name": "tag",
											"source": 12,
											"value": "219"
										},
										{
											"begin": 14489,
											"end": 14838,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 14558,
											"end": 14564,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 14607,
											"end": 14609,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 14595,
											"end": 14604,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 14586,
											"end": 14593,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 14582,
											"end": 14605,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 14578,
											"end": 14610,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 14575,
											"end": 14694,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 14575,
											"end": 14694,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "463"
										},
										{
											"begin": 14575,
											"end": 14694,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 14613,
											"end": 14692,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "464"
										},
										{
											"begin": 14613,
											"end": 14692,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "255"
										},
										{
											"begin": 14613,
											"end": 14692,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 14613,
											"end": 14692,
											"name": "tag",
											"source": 12,
											"value": "464"
										},
										{
											"begin": 14613,
											"end": 14692,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 14575,
											"end": 14694,
											"name": "tag",
											"source": 12,
											"value": "463"
										},
										{
											"begin": 14575,
											"end": 14694,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 14733,
											"end": 14734,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 14758,
											"end": 14821,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "465"
										},
										{
											"begin": 14813,
											"end": 14820,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 14804,
											"end": 14810,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 14793,
											"end": 14802,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 14789,
											"end": 14811,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 14758,
											"end": 14821,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "293"
										},
										{
											"begin": 14758,
											"end": 14821,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 14758,
											"end": 14821,
											"name": "tag",
											"source": 12,
											"value": "465"
										},
										{
											"begin": 14758,
											"end": 14821,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 14748,
											"end": 14821,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 14748,
											"end": 14821,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14704,
											"end": 14831,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14489,
											"end": 14838,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 14489,
											"end": 14838,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 14489,
											"end": 14838,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14489,
											"end": 14838,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14489,
											"end": 14838,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 14844,
											"end": 15077,
											"name": "tag",
											"source": 12,
											"value": "235"
										},
										{
											"begin": 14844,
											"end": 15077,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 14883,
											"end": 14886,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 14906,
											"end": 14930,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "467"
										},
										{
											"begin": 14924,
											"end": 14929,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 14906,
											"end": 14930,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "267"
										},
										{
											"begin": 14906,
											"end": 14930,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 14906,
											"end": 14930,
											"name": "tag",
											"source": 12,
											"value": "467"
										},
										{
											"begin": 14906,
											"end": 14930,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 14897,
											"end": 14930,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 14897,
											"end": 14930,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14952,
											"end": 15018,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 14945,
											"end": 14950,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 14942,
											"end": 15019,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 14939,
											"end": 15042,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "468"
										},
										{
											"begin": 14939,
											"end": 15042,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 15022,
											"end": 15040,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "469"
										},
										{
											"begin": 15022,
											"end": 15040,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "289"
										},
										{
											"begin": 15022,
											"end": 15040,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 15022,
											"end": 15040,
											"name": "tag",
											"source": 12,
											"value": "469"
										},
										{
											"begin": 15022,
											"end": 15040,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 14939,
											"end": 15042,
											"name": "tag",
											"source": 12,
											"value": "468"
										},
										{
											"begin": 14939,
											"end": 15042,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 15069,
											"end": 15070,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 15062,
											"end": 15067,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 15058,
											"end": 15071,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 15051,
											"end": 15071,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15051,
											"end": 15071,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14844,
											"end": 15077,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 14844,
											"end": 15077,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 14844,
											"end": 15077,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 14844,
											"end": 15077,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 15083,
											"end": 15263,
											"name": "tag",
											"source": 12,
											"value": "294"
										},
										{
											"begin": 15083,
											"end": 15263,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 15131,
											"end": 15208,
											"name": "PUSH",
											"source": 12,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 15128,
											"end": 15129,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 15121,
											"end": 15209,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 15228,
											"end": 15232,
											"name": "PUSH",
											"source": 12,
											"value": "12"
										},
										{
											"begin": 15225,
											"end": 15226,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 15218,
											"end": 15233,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 15252,
											"end": 15256,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 15249,
											"end": 15250,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 15242,
											"end": 15257,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 15269,
											"end": 15454,
											"name": "tag",
											"source": 12,
											"value": "237"
										},
										{
											"begin": 15269,
											"end": 15454,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 15309,
											"end": 15310,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 15326,
											"end": 15346,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "472"
										},
										{
											"begin": 15344,
											"end": 15345,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 15326,
											"end": 15346,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "267"
										},
										{
											"begin": 15326,
											"end": 15346,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 15326,
											"end": 15346,
											"name": "tag",
											"source": 12,
											"value": "472"
										},
										{
											"begin": 15326,
											"end": 15346,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 15321,
											"end": 15346,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 15321,
											"end": 15346,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 15360,
											"end": 15380,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "473"
										},
										{
											"begin": 15378,
											"end": 15379,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 15360,
											"end": 15380,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "267"
										},
										{
											"begin": 15360,
											"end": 15380,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 15360,
											"end": 15380,
											"name": "tag",
											"source": 12,
											"value": "473"
										},
										{
											"begin": 15360,
											"end": 15380,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 15355,
											"end": 15380,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 15355,
											"end": 15380,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 15399,
											"end": 15400,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 15389,
											"end": 15424,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "474"
										},
										{
											"begin": 15389,
											"end": 15424,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 15404,
											"end": 15422,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "475"
										},
										{
											"begin": 15404,
											"end": 15422,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "294"
										},
										{
											"begin": 15404,
											"end": 15422,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 15404,
											"end": 15422,
											"name": "tag",
											"source": 12,
											"value": "475"
										},
										{
											"begin": 15404,
											"end": 15422,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 15389,
											"end": 15424,
											"name": "tag",
											"source": 12,
											"value": "474"
										},
										{
											"begin": 15389,
											"end": 15424,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 15446,
											"end": 15447,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 15443,
											"end": 15444,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 15439,
											"end": 15448,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 15434,
											"end": 15448,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15434,
											"end": 15448,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 15269,
											"end": 15454,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 15269,
											"end": 15454,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 15269,
											"end": 15454,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 15269,
											"end": 15454,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 15269,
											"end": 15454,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 15460,
											"end": 15636,
											"name": "tag",
											"source": 12,
											"value": "246"
										},
										{
											"begin": 15460,
											"end": 15636,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 15492,
											"end": 15493,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 15509,
											"end": 15529,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "477"
										},
										{
											"begin": 15527,
											"end": 15528,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 15509,
											"end": 15529,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "267"
										},
										{
											"begin": 15509,
											"end": 15529,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 15509,
											"end": 15529,
											"name": "tag",
											"source": 12,
											"value": "477"
										},
										{
											"begin": 15509,
											"end": 15529,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 15504,
											"end": 15529,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 15504,
											"end": 15529,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 15543,
											"end": 15563,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "478"
										},
										{
											"begin": 15561,
											"end": 15562,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 15543,
											"end": 15563,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "267"
										},
										{
											"begin": 15543,
											"end": 15563,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 15543,
											"end": 15563,
											"name": "tag",
											"source": 12,
											"value": "478"
										},
										{
											"begin": 15543,
											"end": 15563,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 15538,
											"end": 15563,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 15538,
											"end": 15563,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 15582,
											"end": 15583,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 15572,
											"end": 15607,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "479"
										},
										{
											"begin": 15572,
											"end": 15607,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 15587,
											"end": 15605,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "480"
										},
										{
											"begin": 15587,
											"end": 15605,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "294"
										},
										{
											"begin": 15587,
											"end": 15605,
											"name": "JUMP",
											"source": 12,
											"value": "[in]"
										},
										{
											"begin": 15587,
											"end": 15605,
											"name": "tag",
											"source": 12,
											"value": "480"
										},
										{
											"begin": 15587,
											"end": 15605,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 15572,
											"end": 15607,
											"name": "tag",
											"source": 12,
											"value": "479"
										},
										{
											"begin": 15572,
											"end": 15607,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 15628,
											"end": 15629,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 15625,
											"end": 15626,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 15621,
											"end": 15630,
											"name": "MOD",
											"source": 12
										},
										{
											"begin": 15616,
											"end": 15630,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 15616,
											"end": 15630,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 15460,
											"end": 15636,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 15460,
											"end": 15636,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 15460,
											"end": 15636,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 15460,
											"end": 15636,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 15460,
											"end": 15636,
											"name": "JUMP",
											"source": 12,
											"value": "[out]"
										},
										{
											"begin": 15642,
											"end": 15822,
											"name": "tag",
											"source": 12,
											"value": "250"
										},
										{
											"begin": 15642,
											"end": 15822,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 15690,
											"end": 15767,
											"name": "PUSH",
											"source": 12,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 15687,
											"end": 15688,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 15680,
											"end": 15768,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 15787,
											"end": 15791,
											"name": "PUSH",
											"source": 12,
											"value": "32"
										},
										{
											"begin": 15784,
											"end": 15785,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 15777,
											"end": 15792,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 15811,
											"end": 15815,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 15808,
											"end": 15809,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 15801,
											"end": 15816,
											"name": "REVERT",
											"source": 12
										}
									],
									".data": {
										"D8BB5093925F17312CCD69C1AD4EEFB61D29F5F451BDF501CEF244662BE1EFAB": "68747470733a2f2f676174657761792e70696e6174612e636c6f75642f697066732f516d6648576b7454625354424e4c7777385a446832716335444b71695a63696b6e6f7137365a665872736f5231762f"
									}
								}
							}
						},
						"methodIdentifiers": {
							"BlockScore(address)": "325b272a",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"totalSupply()": "18160ddd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"BlockScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension. Built to optimize for lower gas during batch mints. Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..). Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply. Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"ApprovalCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"ApprovalQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"ApprovalToCurrentOwner()\":[{\"notice\":\"The caller cannot approve to the current owner.\"}],\"ApproveToCaller()\":[{\"notice\":\"The caller cannot approve to their own address.\"}],\"BalanceQueryForZeroAddress()\":[{\"notice\":\"Cannot query the balance for the zero address.\"}],\"MintToZeroAddress()\":[{\"notice\":\"Cannot mint to the zero address.\"}],\"MintZeroQuantity()\":[{\"notice\":\"The quantity of tokens minted must be more than zero.\"}],\"OwnerQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"TransferCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"TransferFromIncorrectOwner()\":[{\"notice\":\"The token must be owned by `from`.\"}],\"TransferToNonERC721ReceiverImplementer()\":[{\"notice\":\"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"notice\":\"Cannot transfer to the zero address.\"}],\"URIQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"ERC721A/ERC721A.sol\":\"ERC721A\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://77724cecdfba8814632ab58737c2b0f2d4ad2d532bc614aee559b5593c1152f0\",\"dweb:/ipfs/QmUcE6gXyv7CQh4sUdcDABYKGTovTe1zLMZSEq95nkc3ph\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e75cf83beb757b8855791088546b8337e9d4684e169400c20d44a515353b708\",\"dweb:/ipfs/QmYvPafLfoquiDMEj7CKHtvbgHu7TJNPSVPSCjrtjV8HjV\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3a57d0854b2fdce6ebff933a48dca2445643d1eccfc27f00292e937f26c6a58\",\"dweb:/ipfs/QmW45rZooS9TqR4YXUbjRbtf2Bpb5ouSarBvfW1LdGprvV\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8179c356adb19e70d6b31a1eedc8c5c7f0c00e669e2540f4099e3844c6074d30\",\"dweb:/ipfs/QmWFbivarEobbqhS1go64ootVuHfVohBseerYy9FTEd1W2\"]},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d\",\"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://864a40efcffdf408044c332a5aa38ec5618ed7b4eecb8f65faf45671bd6cdc65\",\"dweb:/ipfs/QmQJquTMtc6fgm5JQzGdsGpA2fqBe3MHWEdt2qzaLySMdN\"]},\"ERC721A/ERC721A.sol\":{\"keccak256\":\"0x962d6cd04f9869291fd7750fd18b2f3ce05b414c84274cfb03067ac6cb96ff9d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ae9210d4b20653c3367feeae5a61d5c8a80dbc1b7a35ec3079582d1879ebe3fd\",\"dweb:/ipfs/QmUbQhBiLKjUDRHnS7ipSWjtuyDg4EKhd1vKBfYwzbZw9r\"]},\"ERC721A/IDCF.sol\":{\"keccak256\":\"0x46f37359686638f9b09b85b67546f013da80a49dcbf195b3d27d0462cfacf135\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://715b10cc638500e1a1755f8612a35d906e2cf5a919629926ae43d51bace05911\",\"dweb:/ipfs/Qmb2Nxbut2U6yrr1hoqWj28VFPE7sGvG3BHbTfNnAkuVkM\"]},\"ERC721A/IERC721A.sol\":{\"keccak256\":\"0xca8c9d61fe7834faa521c8e7b0ec0a4a8e60dd6c7ce4aa08736d218faac54627\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e6889de7b7f8e67e6465c4a7e5feb2bfbeb4a8059b931ae593d7d243e1cf77c8\",\"dweb:/ipfs/QmSZjGpy2D7dtSmePGtx7KgDYmcE6BDLK9PresvS5467Dm\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 1058,
								"contract": "ERC721A/ERC721A.sol:ERC721A",
								"label": "_currentIndex",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							},
							{
								"astId": 1060,
								"contract": "ERC721A/ERC721A.sol:ERC721A",
								"label": "_burnCounter",
								"offset": 0,
								"slot": "1",
								"type": "t_uint256"
							},
							{
								"astId": 1062,
								"contract": "ERC721A/ERC721A.sol:ERC721A",
								"label": "_name",
								"offset": 0,
								"slot": "2",
								"type": "t_string_storage"
							},
							{
								"astId": 1064,
								"contract": "ERC721A/ERC721A.sol:ERC721A",
								"label": "_symbol",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 1069,
								"contract": "ERC721A/ERC721A.sol:ERC721A",
								"label": "_ownerships",
								"offset": 0,
								"slot": "4",
								"type": "t_mapping(t_uint256,t_struct(TokenOwnership)2562_storage)"
							},
							{
								"astId": 1074,
								"contract": "ERC721A/ERC721A.sol:ERC721A",
								"label": "_addressData",
								"offset": 0,
								"slot": "5",
								"type": "t_mapping(t_address,t_struct(AddressData)2571_storage)"
							},
							{
								"astId": 1078,
								"contract": "ERC721A/ERC721A.sol:ERC721A",
								"label": "_tokenApprovals",
								"offset": 0,
								"slot": "6",
								"type": "t_mapping(t_uint256,t_address)"
							},
							{
								"astId": 1084,
								"contract": "ERC721A/ERC721A.sol:ERC721A",
								"label": "_operatorApprovals",
								"offset": 0,
								"slot": "7",
								"type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
							},
							{
								"astId": 1091,
								"contract": "ERC721A/ERC721A.sol:ERC721A",
								"label": "_BlockScore",
								"offset": 0,
								"slot": "8",
								"type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_bool)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_mapping(t_address,t_mapping(t_address,t_bool))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => bool))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_bool)"
							},
							"t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(uint256 => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_uint256,t_uint256)"
							},
							"t_mapping(t_address,t_struct(AddressData)2571_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct IERC721A.AddressData)",
								"numberOfBytes": "32",
								"value": "t_struct(AddressData)2571_storage"
							},
							"t_mapping(t_uint256,t_address)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => address)",
								"numberOfBytes": "32",
								"value": "t_address"
							},
							"t_mapping(t_uint256,t_struct(TokenOwnership)2562_storage)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => struct IERC721A.TokenOwnership)",
								"numberOfBytes": "32",
								"value": "t_struct(TokenOwnership)2562_storage"
							},
							"t_mapping(t_uint256,t_uint256)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_struct(AddressData)2571_storage": {
								"encoding": "inplace",
								"label": "struct IERC721A.AddressData",
								"members": [
									{
										"astId": 2564,
										"contract": "ERC721A/ERC721A.sol:ERC721A",
										"label": "balance",
										"offset": 0,
										"slot": "0",
										"type": "t_uint64"
									},
									{
										"astId": 2566,
										"contract": "ERC721A/ERC721A.sol:ERC721A",
										"label": "numberMinted",
										"offset": 8,
										"slot": "0",
										"type": "t_uint64"
									},
									{
										"astId": 2568,
										"contract": "ERC721A/ERC721A.sol:ERC721A",
										"label": "numberBurned",
										"offset": 16,
										"slot": "0",
										"type": "t_uint64"
									},
									{
										"astId": 2570,
										"contract": "ERC721A/ERC721A.sol:ERC721A",
										"label": "aux",
										"offset": 24,
										"slot": "0",
										"type": "t_uint64"
									}
								],
								"numberOfBytes": "32"
							},
							"t_struct(TokenOwnership)2562_storage": {
								"encoding": "inplace",
								"label": "struct IERC721A.TokenOwnership",
								"members": [
									{
										"astId": 2557,
										"contract": "ERC721A/ERC721A.sol:ERC721A",
										"label": "addr",
										"offset": 0,
										"slot": "0",
										"type": "t_address"
									},
									{
										"astId": 2559,
										"contract": "ERC721A/ERC721A.sol:ERC721A",
										"label": "startTimestamp",
										"offset": 20,
										"slot": "0",
										"type": "t_uint64"
									},
									{
										"astId": 2561,
										"contract": "ERC721A/ERC721A.sol:ERC721A",
										"label": "burned",
										"offset": 28,
										"slot": "0",
										"type": "t_bool"
									}
								],
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint64": {
								"encoding": "inplace",
								"label": "uint64",
								"numberOfBytes": "8"
							}
						}
					},
					"userdoc": {
						"errors": {
							"ApprovalCallerNotOwnerNorApproved()": [
								{
									"notice": "The caller must own the token or be an approved operator."
								}
							],
							"ApprovalQueryForNonexistentToken()": [
								{
									"notice": "The token does not exist."
								}
							],
							"ApprovalToCurrentOwner()": [
								{
									"notice": "The caller cannot approve to the current owner."
								}
							],
							"ApproveToCaller()": [
								{
									"notice": "The caller cannot approve to their own address."
								}
							],
							"BalanceQueryForZeroAddress()": [
								{
									"notice": "Cannot query the balance for the zero address."
								}
							],
							"MintToZeroAddress()": [
								{
									"notice": "Cannot mint to the zero address."
								}
							],
							"MintZeroQuantity()": [
								{
									"notice": "The quantity of tokens minted must be more than zero."
								}
							],
							"OwnerQueryForNonexistentToken()": [
								{
									"notice": "The token does not exist."
								}
							],
							"TransferCallerNotOwnerNorApproved()": [
								{
									"notice": "The caller must own the token or be an approved operator."
								}
							],
							"TransferFromIncorrectOwner()": [
								{
									"notice": "The token must be owned by `from`."
								}
							],
							"TransferToNonERC721ReceiverImplementer()": [
								{
									"notice": "Cannot safely transfer to a contract that does not implement the ERC721Receiver interface."
								}
							],
							"TransferToZeroAddress()": [
								{
									"notice": "Cannot transfer to the zero address."
								}
							],
							"URIQueryForNonexistentToken()": [
								{
									"notice": "The token does not exist."
								}
							]
						},
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"ERC721A/IDCF.sol": {
				"IDCF": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								}
							],
							"name": "BlockScore",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of an ERC721A compliant contract.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"BlockScore(address)": "325b272a"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"BlockScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of an ERC721A compliant contract.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"ERC721A/IDCF.sol\":\"IDCF\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"ERC721A/IDCF.sol\":{\"keccak256\":\"0x46f37359686638f9b09b85b67546f013da80a49dcbf195b3d27d0462cfacf135\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://715b10cc638500e1a1755f8612a35d906e2cf5a919629926ae43d51bace05911\",\"dweb:/ipfs/Qmb2Nxbut2U6yrr1hoqWj28VFPE7sGvG3BHbTfNnAkuVkM\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"ERC721A/IERC721A.sol": {
				"IERC721A": {
					"abi": [
						{
							"inputs": [],
							"name": "ApprovalCallerNotOwnerNorApproved",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ApprovalQueryForNonexistentToken",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ApprovalToCurrentOwner",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ApproveToCaller",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "BalanceQueryForZeroAddress",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "MintToZeroAddress",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "MintZeroQuantity",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "OwnerQueryForNonexistentToken",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferCallerNotOwnerNorApproved",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferFromIncorrectOwner",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferToNonERC721ReceiverImplementer",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferToZeroAddress",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "URIQueryForNonexistentToken",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of an ERC721A compliant contract.",
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"name()": {
								"details": "Returns the token collection name."
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"symbol()": {
								"details": "Returns the token collection symbol."
							},
							"tokenURI(uint256)": {
								"details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
							},
							"totalSupply()": {
								"details": "Returns the total amount of tokens stored by the contract.  Burned tokens are calculated here, use `_totalMinted()` if you want to count just minted tokens."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"totalSupply()": "18160ddd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of an ERC721A compliant contract.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"totalSupply()\":{\"details\":\"Returns the total amount of tokens stored by the contract.  Burned tokens are calculated here, use `_totalMinted()` if you want to count just minted tokens.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"ApprovalCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"ApprovalQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"ApprovalToCurrentOwner()\":[{\"notice\":\"The caller cannot approve to the current owner.\"}],\"ApproveToCaller()\":[{\"notice\":\"The caller cannot approve to their own address.\"}],\"BalanceQueryForZeroAddress()\":[{\"notice\":\"Cannot query the balance for the zero address.\"}],\"MintToZeroAddress()\":[{\"notice\":\"Cannot mint to the zero address.\"}],\"MintZeroQuantity()\":[{\"notice\":\"The quantity of tokens minted must be more than zero.\"}],\"OwnerQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"TransferCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"TransferFromIncorrectOwner()\":[{\"notice\":\"The token must be owned by `from`.\"}],\"TransferToNonERC721ReceiverImplementer()\":[{\"notice\":\"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"notice\":\"Cannot transfer to the zero address.\"}],\"URIQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"ERC721A/IERC721A.sol\":\"IERC721A\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://77724cecdfba8814632ab58737c2b0f2d4ad2d532bc614aee559b5593c1152f0\",\"dweb:/ipfs/QmUcE6gXyv7CQh4sUdcDABYKGTovTe1zLMZSEq95nkc3ph\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"ERC721A/IERC721A.sol\":{\"keccak256\":\"0xca8c9d61fe7834faa521c8e7b0ec0a4a8e60dd6c7ce4aa08736d218faac54627\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e6889de7b7f8e67e6465c4a7e5feb2bfbeb4a8059b931ae593d7d243e1cf77c8\",\"dweb:/ipfs/QmSZjGpy2D7dtSmePGtx7KgDYmcE6BDLK9PresvS5467Dm\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"errors": {
							"ApprovalCallerNotOwnerNorApproved()": [
								{
									"notice": "The caller must own the token or be an approved operator."
								}
							],
							"ApprovalQueryForNonexistentToken()": [
								{
									"notice": "The token does not exist."
								}
							],
							"ApprovalToCurrentOwner()": [
								{
									"notice": "The caller cannot approve to the current owner."
								}
							],
							"ApproveToCaller()": [
								{
									"notice": "The caller cannot approve to their own address."
								}
							],
							"BalanceQueryForZeroAddress()": [
								{
									"notice": "Cannot query the balance for the zero address."
								}
							],
							"MintToZeroAddress()": [
								{
									"notice": "Cannot mint to the zero address."
								}
							],
							"MintZeroQuantity()": [
								{
									"notice": "The quantity of tokens minted must be more than zero."
								}
							],
							"OwnerQueryForNonexistentToken()": [
								{
									"notice": "The token does not exist."
								}
							],
							"TransferCallerNotOwnerNorApproved()": [
								{
									"notice": "The caller must own the token or be an approved operator."
								}
							],
							"TransferFromIncorrectOwner()": [
								{
									"notice": "The token must be owned by `from`."
								}
							],
							"TransferToNonERC721ReceiverImplementer()": [
								{
									"notice": "Cannot safely transfer to a contract that does not implement the ERC721Receiver interface."
								}
							],
							"TransferToZeroAddress()": [
								{
									"notice": "Cannot transfer to the zero address."
								}
							],
							"URIQueryForNonexistentToken()": [
								{
									"notice": "The token does not exist."
								}
							]
						},
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
					"exportedSymbols": {
						"IERC165": [
							716
						],
						"IERC721": [
							115
						]
					},
					"id": 116,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "108:23:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"file": "../../utils/introspection/IERC165.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 116,
							"sourceUnit": 717,
							"src": "133:47:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 4,
										"name": "IERC165",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 716,
										"src": "271:7:0"
									},
									"id": 5,
									"nodeType": "InheritanceSpecifier",
									"src": "271:7:0"
								}
							],
							"canonicalName": "IERC721",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 3,
								"nodeType": "StructuredDocumentation",
								"src": "182:67:0",
								"text": " @dev Required interface of an ERC721 compliant contract."
							},
							"fullyImplemented": false,
							"id": 115,
							"linearizedBaseContracts": [
								115,
								716
							],
							"name": "IERC721",
							"nameLocation": "260:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 6,
										"nodeType": "StructuredDocumentation",
										"src": "285:88:0",
										"text": " @dev Emitted when `tokenId` token is transferred from `from` to `to`."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 14,
									"name": "Transfer",
									"nameLocation": "384:8:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 13,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 8,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "409:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 14,
												"src": "393:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 7,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "393:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 10,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "431:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 14,
												"src": "415:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 9,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "415:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 12,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "451:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 14,
												"src": "435:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 11,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "435:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "392:67:0"
									},
									"src": "378:82:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 15,
										"nodeType": "StructuredDocumentation",
										"src": "466:94:0",
										"text": " @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 23,
									"name": "Approval",
									"nameLocation": "571:8:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 22,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 17,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "596:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 23,
												"src": "580:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 16,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "580:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 19,
												"indexed": true,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "619:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 23,
												"src": "603:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 18,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "603:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 21,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "645:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 23,
												"src": "629:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 20,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "629:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "579:74:0"
									},
									"src": "565:89:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 24,
										"nodeType": "StructuredDocumentation",
										"src": "660:117:0",
										"text": " @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
									},
									"eventSelector": "17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31",
									"id": 32,
									"name": "ApprovalForAll",
									"nameLocation": "788:14:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 31,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 26,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "819:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "803:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 25,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "803:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 28,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "842:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "826:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 27,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "826:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 30,
												"indexed": false,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "857:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "852:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 29,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "852:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "802:64:0"
									},
									"src": "782:85:0"
								},
								{
									"documentation": {
										"id": 33,
										"nodeType": "StructuredDocumentation",
										"src": "873:76:0",
										"text": " @dev Returns the number of tokens in ``owner``'s account."
									},
									"functionSelector": "70a08231",
									"id": 40,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "963:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 36,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 35,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "981:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 40,
												"src": "973:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 34,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "973:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "972:15:0"
									},
									"returnParameters": {
										"id": 39,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 38,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "1019:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 40,
												"src": "1011:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 37,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1011:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1010:17:0"
									},
									"scope": 115,
									"src": "954:74:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 41,
										"nodeType": "StructuredDocumentation",
										"src": "1034:131:0",
										"text": " @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "6352211e",
									"id": 48,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ownerOf",
									"nameLocation": "1179:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 44,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 43,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1195:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 48,
												"src": "1187:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 42,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1187:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1186:17:0"
									},
									"returnParameters": {
										"id": 47,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 46,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1235:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 48,
												"src": "1227:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 45,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1227:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1226:15:0"
									},
									"scope": 115,
									"src": "1170:72:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 49,
										"nodeType": "StructuredDocumentation",
										"src": "1248:556:0",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "b88d4fde",
									"id": 60,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "1818:16:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 58,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 51,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1852:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 60,
												"src": "1844:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 50,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1844:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 53,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1874:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 60,
												"src": "1866:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 52,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1866:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 55,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1894:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 60,
												"src": "1886:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 54,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1886:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 57,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1926:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 60,
												"src": "1911:19:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 56,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1911:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1834:102:0"
									},
									"returnParameters": {
										"id": 59,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1945:0:0"
									},
									"scope": 115,
									"src": "1809:137:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 61,
										"nodeType": "StructuredDocumentation",
										"src": "1952:690:0",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "42842e0e",
									"id": 70,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "2656:16:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 68,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 63,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2690:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 70,
												"src": "2682:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 62,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2682:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 65,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2712:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 70,
												"src": "2704:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 64,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2704:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 67,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2732:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 70,
												"src": "2724:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 66,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2724:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2672:73:0"
									},
									"returnParameters": {
										"id": 69,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2754:0:0"
									},
									"scope": 115,
									"src": "2647:108:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 71,
										"nodeType": "StructuredDocumentation",
										"src": "2761:504:0",
										"text": " @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 80,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "3279:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 78,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 73,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "3309:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 80,
												"src": "3301:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 72,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3301:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 75,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3331:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 80,
												"src": "3323:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 74,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3323:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 77,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3351:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 80,
												"src": "3343:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 76,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3343:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3291:73:0"
									},
									"returnParameters": {
										"id": 79,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3373:0:0"
									},
									"scope": 115,
									"src": "3270:104:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 81,
										"nodeType": "StructuredDocumentation",
										"src": "3380:452:0",
										"text": " @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 88,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "3846:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 86,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 83,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3862:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 88,
												"src": "3854:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 82,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3854:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 85,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3874:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 88,
												"src": "3866:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 84,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3866:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3853:29:0"
									},
									"returnParameters": {
										"id": 87,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3891:0:0"
									},
									"scope": 115,
									"src": "3837:55:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 89,
										"nodeType": "StructuredDocumentation",
										"src": "3898:309:0",
										"text": " @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."
									},
									"functionSelector": "a22cb465",
									"id": 96,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nameLocation": "4221:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 94,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 91,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4247:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 96,
												"src": "4239:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 90,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4239:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 93,
												"mutability": "mutable",
												"name": "_approved",
												"nameLocation": "4262:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 96,
												"src": "4257:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 92,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4257:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4238:34:0"
									},
									"returnParameters": {
										"id": 95,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4281:0:0"
									},
									"scope": 115,
									"src": "4212:70:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 97,
										"nodeType": "StructuredDocumentation",
										"src": "4288:139:0",
										"text": " @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "081812fc",
									"id": 104,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getApproved",
									"nameLocation": "4441:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 100,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 99,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4461:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 104,
												"src": "4453:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 98,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4453:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4452:17:0"
									},
									"returnParameters": {
										"id": 103,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 102,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4501:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 104,
												"src": "4493:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 101,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4493:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4492:18:0"
									},
									"scope": 115,
									"src": "4432:79:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 105,
										"nodeType": "StructuredDocumentation",
										"src": "4517:138:0",
										"text": " @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"
									},
									"functionSelector": "e985e9c5",
									"id": 114,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nameLocation": "4669:16:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 110,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 107,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4694:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 114,
												"src": "4686:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 106,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4686:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 109,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4709:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 114,
												"src": "4701:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 108,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4701:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4685:33:0"
									},
									"returnParameters": {
										"id": 113,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 112,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 114,
												"src": "4742:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 111,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4742:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4741:6:0"
									},
									"scope": 115,
									"src": "4660:88:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 116,
							"src": "250:4500:0",
							"usedErrors": []
						}
					],
					"src": "108:4643:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol",
					"exportedSymbols": {
						"IERC721Receiver": [
							133
						]
					},
					"id": 134,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 117,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "116:23:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC721Receiver",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 118,
								"nodeType": "StructuredDocumentation",
								"src": "141:152:1",
								"text": " @title ERC721 token receiver interface\n @dev Interface for any contract that wants to support safeTransfers\n from ERC721 asset contracts."
							},
							"fullyImplemented": false,
							"id": 133,
							"linearizedBaseContracts": [
								133
							],
							"name": "IERC721Receiver",
							"nameLocation": "304:15:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 119,
										"nodeType": "StructuredDocumentation",
										"src": "326:493:1",
										"text": " @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n by `operator` from `from`, this function is called.\n It must return its Solidity selector to confirm the token transfer.\n If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."
									},
									"functionSelector": "150b7a02",
									"id": 132,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "onERC721Received",
									"nameLocation": "833:16:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 128,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 121,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "867:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 132,
												"src": "859:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 120,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "859:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 123,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "893:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 132,
												"src": "885:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 122,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "885:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 125,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "915:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 132,
												"src": "907:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 124,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "907:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 127,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "947:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 132,
												"src": "932:19:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 126,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "932:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "849:108:1"
									},
									"returnParameters": {
										"id": 131,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 130,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 132,
												"src": "976:6:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 129,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "976:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "975:8:1"
									},
									"scope": 133,
									"src": "824:160:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 134,
							"src": "294:692:1",
							"usedErrors": []
						}
					],
					"src": "116:871:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
					"exportedSymbols": {
						"IERC165": [
							716
						],
						"IERC721": [
							115
						],
						"IERC721Metadata": [
							160
						]
					},
					"id": 161,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 135,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "112:23:2"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"file": "../IERC721.sol",
							"id": 136,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 161,
							"sourceUnit": 116,
							"src": "137:24:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 138,
										"name": "IERC721",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 115,
										"src": "326:7:2"
									},
									"id": 139,
									"nodeType": "InheritanceSpecifier",
									"src": "326:7:2"
								}
							],
							"canonicalName": "IERC721Metadata",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 137,
								"nodeType": "StructuredDocumentation",
								"src": "163:133:2",
								"text": " @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"
							},
							"fullyImplemented": false,
							"id": 160,
							"linearizedBaseContracts": [
								160,
								115,
								716
							],
							"name": "IERC721Metadata",
							"nameLocation": "307:15:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 140,
										"nodeType": "StructuredDocumentation",
										"src": "340:58:2",
										"text": " @dev Returns the token collection name."
									},
									"functionSelector": "06fdde03",
									"id": 145,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "412:4:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 141,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "416:2:2"
									},
									"returnParameters": {
										"id": 144,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 143,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 145,
												"src": "442:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 142,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "442:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "441:15:2"
									},
									"scope": 160,
									"src": "403:54:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 146,
										"nodeType": "StructuredDocumentation",
										"src": "463:60:2",
										"text": " @dev Returns the token collection symbol."
									},
									"functionSelector": "95d89b41",
									"id": 151,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "537:6:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 147,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "543:2:2"
									},
									"returnParameters": {
										"id": 150,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 149,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 151,
												"src": "569:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 148,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "569:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "568:15:2"
									},
									"scope": 160,
									"src": "528:56:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 152,
										"nodeType": "StructuredDocumentation",
										"src": "590:90:2",
										"text": " @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."
									},
									"functionSelector": "c87b56dd",
									"id": 159,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenURI",
									"nameLocation": "694:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 155,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 154,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "711:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 159,
												"src": "703:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 153,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "703:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "702:17:2"
									},
									"returnParameters": {
										"id": 158,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 157,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 159,
												"src": "743:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 156,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "743:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "742:15:2"
									},
									"scope": 160,
									"src": "685:73:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 161,
							"src": "297:463:2",
							"usedErrors": []
						}
					],
					"src": "112:649:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
					"exportedSymbols": {
						"Address": [
							455
						]
					},
					"id": 456,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 162,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".1"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Address",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 163,
								"nodeType": "StructuredDocumentation",
								"src": "126:67:3",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 455,
							"linearizedBaseContracts": [
								455
							],
							"name": "Address",
							"nameLocation": "202:7:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 177,
										"nodeType": "Block",
										"src": "1241:254:3",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 175,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 171,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 166,
																"src": "1465:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 172,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "1465:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 173,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1465:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 174,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1487:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1465:23:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 170,
												"id": 176,
												"nodeType": "Return",
												"src": "1458:30:3"
											}
										]
									},
									"documentation": {
										"id": 164,
										"nodeType": "StructuredDocumentation",
										"src": "216:954:3",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="
									},
									"id": 178,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nameLocation": "1184:10:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 167,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 166,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1203:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 178,
												"src": "1195:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 165,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1195:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1194:17:3"
									},
									"returnParameters": {
										"id": 170,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 169,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 178,
												"src": "1235:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 168,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1235:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1234:6:3"
									},
									"scope": 455,
									"src": "1175:320:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 211,
										"nodeType": "Block",
										"src": "2483:241:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 193,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 189,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2509:4:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$455",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$455",
																				"typeString": "library Address"
																			}
																		],
																		"id": 188,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2501:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 187,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2501:7:3",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 190,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2501:13:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 191,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2501:21:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 192,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 183,
																"src": "2526:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2501:31:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 194,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2534:31:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 186,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2493:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 195,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2493:73:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 196,
												"nodeType": "ExpressionStatement",
												"src": "2493:73:3"
											},
											{
												"assignments": [
													198,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 198,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "2583:7:3",
														"nodeType": "VariableDeclaration",
														"scope": 211,
														"src": "2578:12:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 197,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2578:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 205,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 203,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2626:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 199,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 181,
																"src": "2596:9:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 200,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2596:14:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 202,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 201,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 183,
																"src": "2618:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2596:29:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 204,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2596:33:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2577:52:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 207,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 198,
															"src": "2647:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 208,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2656:60:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 206,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2639:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 209,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2639:78:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 210,
												"nodeType": "ExpressionStatement",
												"src": "2639:78:3"
											}
										]
									},
									"documentation": {
										"id": 179,
										"nodeType": "StructuredDocumentation",
										"src": "1501:906:3",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 212,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nameLocation": "2421:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 184,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 181,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2447:9:3",
												"nodeType": "VariableDeclaration",
												"scope": 212,
												"src": "2431:25:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 180,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2431:15:3",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 183,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2466:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 212,
												"src": "2458:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 182,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2458:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2430:43:3"
									},
									"returnParameters": {
										"id": 185,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2483:0:3"
									},
									"scope": 455,
									"src": "2412:312:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 228,
										"nodeType": "Block",
										"src": "3555:84:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 223,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 215,
															"src": "3585:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 224,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 217,
															"src": "3593:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 225,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3599:32:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 222,
														"name": "functionCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															229,
															249
														],
														"referencedDeclaration": 249,
														"src": "3572:12:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 226,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3572:60:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 221,
												"id": 227,
												"nodeType": "Return",
												"src": "3565:67:3"
											}
										]
									},
									"documentation": {
										"id": 213,
										"nodeType": "StructuredDocumentation",
										"src": "2730:731:3",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 229,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3475:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 218,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 215,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3496:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 229,
												"src": "3488:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 214,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3488:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 217,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3517:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 229,
												"src": "3504:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 216,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3504:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3487:35:3"
									},
									"returnParameters": {
										"id": 221,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 220,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 229,
												"src": "3541:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 219,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3541:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3540:14:3"
									},
									"scope": 455,
									"src": "3466:173:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 248,
										"nodeType": "Block",
										"src": "4008:76:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 242,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 232,
															"src": "4047:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 243,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 234,
															"src": "4055:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 244,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4061:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 245,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 236,
															"src": "4064:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 241,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															269,
															319
														],
														"referencedDeclaration": 319,
														"src": "4025:21:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 246,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4025:52:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 240,
												"id": 247,
												"nodeType": "Return",
												"src": "4018:59:3"
											}
										]
									},
									"documentation": {
										"id": 230,
										"nodeType": "StructuredDocumentation",
										"src": "3645:211:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 249,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3870:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 237,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 232,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3900:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 249,
												"src": "3892:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 231,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3892:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 234,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3929:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 249,
												"src": "3916:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 233,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3916:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 236,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "3957:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 249,
												"src": "3943:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 235,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3943:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3882:93:3"
									},
									"returnParameters": {
										"id": 240,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 239,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 249,
												"src": "3994:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 238,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3994:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3993:14:3"
									},
									"scope": 455,
									"src": "3861:223:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 268,
										"nodeType": "Block",
										"src": "4589:111:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 262,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 252,
															"src": "4628:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 263,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 254,
															"src": "4636:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 264,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 256,
															"src": "4642:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 265,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4649:43:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 261,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															269,
															319
														],
														"referencedDeclaration": 319,
														"src": "4606:21:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 266,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4606:87:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 260,
												"id": 267,
												"nodeType": "Return",
												"src": "4599:94:3"
											}
										]
									},
									"documentation": {
										"id": 250,
										"nodeType": "StructuredDocumentation",
										"src": "4090:351:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 269,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4455:21:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 257,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 252,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4494:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 269,
												"src": "4486:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 251,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4486:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 254,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4523:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 269,
												"src": "4510:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 253,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4510:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 256,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4545:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 269,
												"src": "4537:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 255,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4537:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4476:80:3"
									},
									"returnParameters": {
										"id": 260,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 259,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 269,
												"src": "4575:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 258,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4575:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4574:14:3"
									},
									"scope": 455,
									"src": "4446:254:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 318,
										"nodeType": "Block",
										"src": "5127:320:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 290,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 286,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "5153:4:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$455",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$455",
																				"typeString": "library Address"
																			}
																		],
																		"id": 285,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5145:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 284,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5145:7:3",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 287,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5145:13:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 288,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "5145:21:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 289,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 276,
																"src": "5170:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5145:30:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 291,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5177:40:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 283,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5137:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 292,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5137:81:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 293,
												"nodeType": "ExpressionStatement",
												"src": "5137:81:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 296,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 272,
																	"src": "5247:6:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 295,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 178,
																"src": "5236:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 297,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5236:18:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 298,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5256:31:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															},
															"value": "Address: call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															}
														],
														"id": 294,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5228:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 299,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5228:60:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 300,
												"nodeType": "ExpressionStatement",
												"src": "5228:60:3"
											},
											{
												"assignments": [
													302,
													304
												],
												"declarations": [
													{
														"constant": false,
														"id": 302,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "5305:7:3",
														"nodeType": "VariableDeclaration",
														"scope": 318,
														"src": "5300:12:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 301,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5300:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 304,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5327:10:3",
														"nodeType": "VariableDeclaration",
														"scope": 318,
														"src": "5314:23:3",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 303,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5314:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 311,
												"initialValue": {
													"arguments": [
														{
															"id": 309,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 274,
															"src": "5367:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 305,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 272,
																"src": "5341:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 306,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "5341:11:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 308,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 307,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 276,
																"src": "5360:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5341:25:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 310,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5341:31:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5299:73:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 313,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 302,
															"src": "5406:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 314,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 304,
															"src": "5415:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 315,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 278,
															"src": "5427:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 312,
														"name": "verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 454,
														"src": "5389:16:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 316,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5389:51:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 282,
												"id": 317,
												"nodeType": "Return",
												"src": "5382:58:3"
											}
										]
									},
									"documentation": {
										"id": 270,
										"nodeType": "StructuredDocumentation",
										"src": "4706:237:3",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 319,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4957:21:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 279,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 272,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4996:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 319,
												"src": "4988:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 271,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4988:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 274,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5025:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 319,
												"src": "5012:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 273,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5012:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 276,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5047:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 319,
												"src": "5039:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 275,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5039:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 278,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5076:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 319,
												"src": "5062:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 277,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5062:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4978:116:3"
									},
									"returnParameters": {
										"id": 282,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 281,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 319,
												"src": "5113:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 280,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5113:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5112:14:3"
									},
									"scope": 455,
									"src": "4948:499:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 335,
										"nodeType": "Block",
										"src": "5724:97:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 330,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 322,
															"src": "5760:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 331,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 324,
															"src": "5768:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 332,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5774:39:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 329,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															336,
															371
														],
														"referencedDeclaration": 371,
														"src": "5741:18:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 333,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5741:73:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 328,
												"id": 334,
												"nodeType": "Return",
												"src": "5734:80:3"
											}
										]
									},
									"documentation": {
										"id": 320,
										"nodeType": "StructuredDocumentation",
										"src": "5453:166:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 336,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5633:18:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 325,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 322,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5660:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 336,
												"src": "5652:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 321,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5652:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 324,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5681:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 336,
												"src": "5668:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 323,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5668:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5651:35:3"
									},
									"returnParameters": {
										"id": 328,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 327,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 336,
												"src": "5710:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 326,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5710:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5709:14:3"
									},
									"scope": 455,
									"src": "5624:197:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 370,
										"nodeType": "Block",
										"src": "6163:228:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 350,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 339,
																	"src": "6192:6:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 349,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 178,
																"src": "6181:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 351,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6181:18:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 352,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6201:38:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															},
															"value": "Address: static call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															}
														],
														"id": 348,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6173:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 353,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6173:67:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 354,
												"nodeType": "ExpressionStatement",
												"src": "6173:67:3"
											},
											{
												"assignments": [
													356,
													358
												],
												"declarations": [
													{
														"constant": false,
														"id": 356,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "6257:7:3",
														"nodeType": "VariableDeclaration",
														"scope": 370,
														"src": "6252:12:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 355,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6252:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 358,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "6279:10:3",
														"nodeType": "VariableDeclaration",
														"scope": 370,
														"src": "6266:23:3",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 357,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6266:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 363,
												"initialValue": {
													"arguments": [
														{
															"id": 361,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 341,
															"src": "6311:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 359,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 339,
															"src": "6293:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 360,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "6293:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 362,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6293:23:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6251:65:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 365,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 356,
															"src": "6350:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 366,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 358,
															"src": "6359:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 367,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 343,
															"src": "6371:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 364,
														"name": "verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 454,
														"src": "6333:16:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 368,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6333:51:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 347,
												"id": 369,
												"nodeType": "Return",
												"src": "6326:58:3"
											}
										]
									},
									"documentation": {
										"id": 337,
										"nodeType": "StructuredDocumentation",
										"src": "5827:173:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 371,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "6014:18:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 344,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 339,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6050:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 371,
												"src": "6042:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 338,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6042:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 341,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6079:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 371,
												"src": "6066:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 340,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6066:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 343,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6107:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 371,
												"src": "6093:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 342,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6093:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6032:93:3"
									},
									"returnParameters": {
										"id": 347,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 346,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 371,
												"src": "6149:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 345,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6149:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6148:14:3"
									},
									"scope": 455,
									"src": "6005:386:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 387,
										"nodeType": "Block",
										"src": "6667:101:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 382,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 374,
															"src": "6705:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 383,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 376,
															"src": "6713:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
															"id": 384,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6719:41:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															},
															"value": "Address: low-level delegate call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															}
														],
														"id": 381,
														"name": "functionDelegateCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															388,
															423
														],
														"referencedDeclaration": 423,
														"src": "6684:20:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 385,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6684:77:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 380,
												"id": 386,
												"nodeType": "Return",
												"src": "6677:84:3"
											}
										]
									},
									"documentation": {
										"id": 372,
										"nodeType": "StructuredDocumentation",
										"src": "6397:168:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 388,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6579:20:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 377,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 374,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6608:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 388,
												"src": "6600:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 373,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6600:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 376,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6629:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 388,
												"src": "6616:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 375,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6616:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6599:35:3"
									},
									"returnParameters": {
										"id": 380,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 379,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 388,
												"src": "6653:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 378,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6653:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6652:14:3"
									},
									"scope": 455,
									"src": "6570:198:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 422,
										"nodeType": "Block",
										"src": "7109:232:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 402,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 391,
																	"src": "7138:6:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 401,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 178,
																"src": "7127:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 403,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7127:18:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 404,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7147:40:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520",
																"typeString": "literal_string \"Address: delegate call to non-contract\""
															},
															"value": "Address: delegate call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520",
																"typeString": "literal_string \"Address: delegate call to non-contract\""
															}
														],
														"id": 400,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7119:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 405,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7119:69:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 406,
												"nodeType": "ExpressionStatement",
												"src": "7119:69:3"
											},
											{
												"assignments": [
													408,
													410
												],
												"declarations": [
													{
														"constant": false,
														"id": 408,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "7205:7:3",
														"nodeType": "VariableDeclaration",
														"scope": 422,
														"src": "7200:12:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 407,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "7200:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 410,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "7227:10:3",
														"nodeType": "VariableDeclaration",
														"scope": 422,
														"src": "7214:23:3",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 409,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "7214:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 415,
												"initialValue": {
													"arguments": [
														{
															"id": 413,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 393,
															"src": "7261:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 411,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 391,
															"src": "7241:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 412,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "delegatecall",
														"nodeType": "MemberAccess",
														"src": "7241:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) returns (bool,bytes memory)"
														}
													},
													"id": 414,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7241:25:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7199:67:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 417,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 408,
															"src": "7300:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 418,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 410,
															"src": "7309:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 419,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 395,
															"src": "7321:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 416,
														"name": "verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 454,
														"src": "7283:16:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 420,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7283:51:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 399,
												"id": 421,
												"nodeType": "Return",
												"src": "7276:58:3"
											}
										]
									},
									"documentation": {
										"id": 389,
										"nodeType": "StructuredDocumentation",
										"src": "6774:175:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 423,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6963:20:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 396,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 391,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "7001:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 423,
												"src": "6993:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 390,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6993:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 393,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "7030:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 423,
												"src": "7017:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 392,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7017:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 395,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7058:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 423,
												"src": "7044:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 394,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7044:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6983:93:3"
									},
									"returnParameters": {
										"id": 399,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 398,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 423,
												"src": "7095:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 397,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7095:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7094:14:3"
									},
									"scope": 455,
									"src": "6954:387:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 453,
										"nodeType": "Block",
										"src": "7721:532:3",
										"statements": [
											{
												"condition": {
													"id": 435,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 426,
													"src": "7735:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 451,
													"nodeType": "Block",
													"src": "7792:455:3",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 442,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 439,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 428,
																		"src": "7876:10:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 440,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "7876:17:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 441,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7896:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "7876:21:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 449,
																"nodeType": "Block",
																"src": "8184:53:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 446,
																					"name": "errorMessage",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 430,
																					"src": "8209:12:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				],
																				"id": 445,
																				"name": "revert",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967277,
																					4294967277
																				],
																				"referencedDeclaration": 4294967277,
																				"src": "8202:6:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (string memory) pure"
																				}
																			},
																			"id": 447,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8202:20:3",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 448,
																		"nodeType": "ExpressionStatement",
																		"src": "8202:20:3"
																	}
																]
															},
															"id": 450,
															"nodeType": "IfStatement",
															"src": "7872:365:3",
															"trueBody": {
																"id": 444,
																"nodeType": "Block",
																"src": "7899:279:3",
																"statements": [
																	{
																		"AST": {
																			"nodeType": "YulBlock",
																			"src": "8019:145:3",
																			"statements": [
																				{
																					"nodeType": "YulVariableDeclaration",
																					"src": "8041:40:3",
																					"value": {
																						"arguments": [
																							{
																								"name": "returndata",
																								"nodeType": "YulIdentifier",
																								"src": "8070:10:3"
																							}
																						],
																						"functionName": {
																							"name": "mload",
																							"nodeType": "YulIdentifier",
																							"src": "8064:5:3"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "8064:17:3"
																					},
																					"variables": [
																						{
																							"name": "returndata_size",
																							"nodeType": "YulTypedName",
																							"src": "8045:15:3",
																							"type": ""
																						}
																					]
																				},
																				{
																					"expression": {
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "8113:2:3",
																										"type": "",
																										"value": "32"
																									},
																									{
																										"name": "returndata",
																										"nodeType": "YulIdentifier",
																										"src": "8117:10:3"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "8109:3:3"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "8109:19:3"
																							},
																							{
																								"name": "returndata_size",
																								"nodeType": "YulIdentifier",
																								"src": "8130:15:3"
																							}
																						],
																						"functionName": {
																							"name": "revert",
																							"nodeType": "YulIdentifier",
																							"src": "8102:6:3"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "8102:44:3"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "8102:44:3"
																				}
																			]
																		},
																		"evmVersion": "london",
																		"externalReferences": [
																			{
																				"declaration": 428,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "8070:10:3",
																				"valueSize": 1
																			},
																			{
																				"declaration": 428,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "8117:10:3",
																				"valueSize": 1
																			}
																		],
																		"id": 443,
																		"nodeType": "InlineAssembly",
																		"src": "8010:154:3"
																	}
																]
															}
														}
													]
												},
												"id": 452,
												"nodeType": "IfStatement",
												"src": "7731:516:3",
												"trueBody": {
													"id": 438,
													"nodeType": "Block",
													"src": "7744:42:3",
													"statements": [
														{
															"expression": {
																"id": 436,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 428,
																"src": "7765:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 434,
															"id": 437,
															"nodeType": "Return",
															"src": "7758:17:3"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 424,
										"nodeType": "StructuredDocumentation",
										"src": "7347:209:3",
										"text": " @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason using the provided one.\n _Available since v4.3._"
									},
									"id": 454,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nameLocation": "7570:16:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 431,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 426,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "7601:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 454,
												"src": "7596:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 425,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7596:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 428,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "7631:10:3",
												"nodeType": "VariableDeclaration",
												"scope": 454,
												"src": "7618:23:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 427,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7618:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 430,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7665:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 454,
												"src": "7651:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 429,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7651:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7586:97:3"
									},
									"returnParameters": {
										"id": 434,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 433,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 454,
												"src": "7707:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 432,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7707:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7706:14:3"
									},
									"scope": 455,
									"src": "7561:692:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 456,
							"src": "194:8061:3",
							"usedErrors": []
						}
					],
					"src": "101:8155:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							477
						]
					},
					"id": 478,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 457,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:4"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 458,
								"nodeType": "StructuredDocumentation",
								"src": "111:496:4",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 477,
							"linearizedBaseContracts": [
								477
							],
							"name": "Context",
							"nameLocation": "626:7:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 466,
										"nodeType": "Block",
										"src": "702:34:4",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 463,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "719:3:4",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 464,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "719:10:4",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 462,
												"id": 465,
												"nodeType": "Return",
												"src": "712:17:4"
											}
										]
									},
									"id": 467,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "649:10:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 459,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "659:2:4"
									},
									"returnParameters": {
										"id": 462,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 461,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 467,
												"src": "693:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 460,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "692:9:4"
									},
									"scope": 477,
									"src": "640:96:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 475,
										"nodeType": "Block",
										"src": "809:32:4",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 472,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "826:3:4",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 473,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "826:8:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 471,
												"id": 474,
												"nodeType": "Return",
												"src": "819:15:4"
											}
										]
									},
									"id": 476,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "751:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 468,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "759:2:4"
									},
									"returnParameters": {
										"id": 471,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 470,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 476,
												"src": "793:14:4",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 469,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "793:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "792:16:4"
									},
									"scope": 477,
									"src": "742:99:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 478,
							"src": "608:235:4",
							"usedErrors": []
						}
					],
					"src": "86:758:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Strings.sol",
					"exportedSymbols": {
						"Strings": [
							680
						]
					},
					"id": 681,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 479,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Strings",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 480,
								"nodeType": "StructuredDocumentation",
								"src": "111:34:5",
								"text": " @dev String operations."
							},
							"fullyImplemented": true,
							"id": 680,
							"linearizedBaseContracts": [
								680
							],
							"name": "Strings",
							"nameLocation": "154:7:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 483,
									"mutability": "constant",
									"name": "_HEX_SYMBOLS",
									"nameLocation": "193:12:5",
									"nodeType": "VariableDeclaration",
									"scope": 680,
									"src": "168:58:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes16",
										"typeString": "bytes16"
									},
									"typeName": {
										"id": 481,
										"name": "bytes16",
										"nodeType": "ElementaryTypeName",
										"src": "168:7:5",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes16",
											"typeString": "bytes16"
										}
									},
									"value": {
										"hexValue": "30313233343536373839616263646566",
										"id": 482,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "string",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "208:18:5",
										"typeDescriptions": {
											"typeIdentifier": "t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f",
											"typeString": "literal_string \"0123456789abcdef\""
										},
										"value": "0123456789abcdef"
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 561,
										"nodeType": "Block",
										"src": "399:632:5",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 493,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 491,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 486,
														"src": "601:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 492,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "610:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "601:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 497,
												"nodeType": "IfStatement",
												"src": "597:51:5",
												"trueBody": {
													"id": 496,
													"nodeType": "Block",
													"src": "613:35:5",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 494,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "634:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
																	"typeString": "literal_string \"0\""
																},
																"value": "0"
															},
															"functionReturnParameters": 490,
															"id": 495,
															"nodeType": "Return",
															"src": "627:10:5"
														}
													]
												}
											},
											{
												"assignments": [
													499
												],
												"declarations": [
													{
														"constant": false,
														"id": 499,
														"mutability": "mutable",
														"name": "temp",
														"nameLocation": "665:4:5",
														"nodeType": "VariableDeclaration",
														"scope": 561,
														"src": "657:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 498,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "657:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 501,
												"initialValue": {
													"id": 500,
													"name": "value",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 486,
													"src": "672:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "657:20:5"
											},
											{
												"assignments": [
													503
												],
												"declarations": [
													{
														"constant": false,
														"id": 503,
														"mutability": "mutable",
														"name": "digits",
														"nameLocation": "695:6:5",
														"nodeType": "VariableDeclaration",
														"scope": 561,
														"src": "687:14:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 502,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "687:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 504,
												"nodeType": "VariableDeclarationStatement",
												"src": "687:14:5"
											},
											{
												"body": {
													"id": 515,
													"nodeType": "Block",
													"src": "729:57:5",
													"statements": [
														{
															"expression": {
																"id": 509,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "++",
																"prefix": false,
																"src": "743:8:5",
																"subExpression": {
																	"id": 508,
																	"name": "digits",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 503,
																	"src": "743:6:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 510,
															"nodeType": "ExpressionStatement",
															"src": "743:8:5"
														},
														{
															"expression": {
																"id": 513,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 511,
																	"name": "temp",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 499,
																	"src": "765:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "/=",
																"rightHandSide": {
																	"hexValue": "3130",
																	"id": 512,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "773:2:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"src": "765:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 514,
															"nodeType": "ExpressionStatement",
															"src": "765:10:5"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 507,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 505,
														"name": "temp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 499,
														"src": "718:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 506,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "726:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "718:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 516,
												"nodeType": "WhileStatement",
												"src": "711:75:5"
											},
											{
												"assignments": [
													518
												],
												"declarations": [
													{
														"constant": false,
														"id": 518,
														"mutability": "mutable",
														"name": "buffer",
														"nameLocation": "808:6:5",
														"nodeType": "VariableDeclaration",
														"scope": 561,
														"src": "795:19:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 517,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "795:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 523,
												"initialValue": {
													"arguments": [
														{
															"id": 521,
															"name": "digits",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 503,
															"src": "827:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 520,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "817:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 519,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "821:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 522,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "817:17:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "795:39:5"
											},
											{
												"body": {
													"id": 554,
													"nodeType": "Block",
													"src": "863:131:5",
													"statements": [
														{
															"expression": {
																"id": 529,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 527,
																	"name": "digits",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 503,
																	"src": "877:6:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "-=",
																"rightHandSide": {
																	"hexValue": "31",
																	"id": 528,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "887:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "877:11:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 530,
															"nodeType": "ExpressionStatement",
															"src": "877:11:5"
														},
														{
															"expression": {
																"id": 548,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 531,
																		"name": "buffer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 518,
																		"src": "902:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 533,
																	"indexExpression": {
																		"id": 532,
																		"name": "digits",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 503,
																		"src": "909:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "902:14:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 545,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "3438",
																						"id": 538,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "932:2:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_48_by_1",
																							"typeString": "int_const 48"
																						},
																						"value": "48"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "+",
																					"rightExpression": {
																						"arguments": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 543,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 541,
																									"name": "value",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 486,
																									"src": "945:5:5",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "%",
																								"rightExpression": {
																									"hexValue": "3130",
																									"id": 542,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "953:2:5",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_10_by_1",
																										"typeString": "int_const 10"
																									},
																									"value": "10"
																								},
																								"src": "945:10:5",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							],
																							"id": 540,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "937:7:5",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_uint256_$",
																								"typeString": "type(uint256)"
																							},
																							"typeName": {
																								"id": 539,
																								"name": "uint256",
																								"nodeType": "ElementaryTypeName",
																								"src": "937:7:5",
																								"typeDescriptions": {}
																							}
																						},
																						"id": 544,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "typeConversion",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "937:19:5",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "932:24:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 537,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "926:5:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint8_$",
																					"typeString": "type(uint8)"
																				},
																				"typeName": {
																					"id": 536,
																					"name": "uint8",
																					"nodeType": "ElementaryTypeName",
																					"src": "926:5:5",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 546,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "926:31:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		],
																		"id": 535,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "919:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes1_$",
																			"typeString": "type(bytes1)"
																		},
																		"typeName": {
																			"id": 534,
																			"name": "bytes1",
																			"nodeType": "ElementaryTypeName",
																			"src": "919:6:5",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 547,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "919:39:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"src": "902:56:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"id": 549,
															"nodeType": "ExpressionStatement",
															"src": "902:56:5"
														},
														{
															"expression": {
																"id": 552,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 550,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 486,
																	"src": "972:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "/=",
																"rightHandSide": {
																	"hexValue": "3130",
																	"id": 551,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "981:2:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"src": "972:11:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 553,
															"nodeType": "ExpressionStatement",
															"src": "972:11:5"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 526,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 524,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 486,
														"src": "851:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 525,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "860:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "851:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 555,
												"nodeType": "WhileStatement",
												"src": "844:150:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 558,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 518,
															"src": "1017:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 557,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "1010:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": {
															"id": 556,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "1010:6:5",
															"typeDescriptions": {}
														}
													},
													"id": 559,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1010:14:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 490,
												"id": 560,
												"nodeType": "Return",
												"src": "1003:21:5"
											}
										]
									},
									"documentation": {
										"id": 484,
										"nodeType": "StructuredDocumentation",
										"src": "233:90:5",
										"text": " @dev Converts a `uint256` to its ASCII `string` decimal representation."
									},
									"id": 562,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toString",
									"nameLocation": "337:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 487,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 486,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "354:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 562,
												"src": "346:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 485,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "346:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "345:15:5"
									},
									"returnParameters": {
										"id": 490,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 489,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 562,
												"src": "384:13:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 488,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "384:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "383:15:5"
									},
									"scope": 680,
									"src": "328:703:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 602,
										"nodeType": "Block",
										"src": "1210:255:5",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 572,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 570,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 565,
														"src": "1224:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 571,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1233:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1224:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 576,
												"nodeType": "IfStatement",
												"src": "1220:54:5",
												"trueBody": {
													"id": 575,
													"nodeType": "Block",
													"src": "1236:38:5",
													"statements": [
														{
															"expression": {
																"hexValue": "30783030",
																"id": 573,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1257:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_27489e20a0060b723a1748bdff5e44570ee9fae64141728105692eac6031e8a4",
																	"typeString": "literal_string \"0x00\""
																},
																"value": "0x00"
															},
															"functionReturnParameters": 569,
															"id": 574,
															"nodeType": "Return",
															"src": "1250:13:5"
														}
													]
												}
											},
											{
												"assignments": [
													578
												],
												"declarations": [
													{
														"constant": false,
														"id": 578,
														"mutability": "mutable",
														"name": "temp",
														"nameLocation": "1291:4:5",
														"nodeType": "VariableDeclaration",
														"scope": 602,
														"src": "1283:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 577,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1283:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 580,
												"initialValue": {
													"id": 579,
													"name": "value",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 565,
													"src": "1298:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1283:20:5"
											},
											{
												"assignments": [
													582
												],
												"declarations": [
													{
														"constant": false,
														"id": 582,
														"mutability": "mutable",
														"name": "length",
														"nameLocation": "1321:6:5",
														"nodeType": "VariableDeclaration",
														"scope": 602,
														"src": "1313:14:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 581,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1313:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 584,
												"initialValue": {
													"hexValue": "30",
													"id": 583,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1330:1:5",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1313:18:5"
											},
											{
												"body": {
													"id": 595,
													"nodeType": "Block",
													"src": "1359:57:5",
													"statements": [
														{
															"expression": {
																"id": 589,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "++",
																"prefix": false,
																"src": "1373:8:5",
																"subExpression": {
																	"id": 588,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 582,
																	"src": "1373:6:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 590,
															"nodeType": "ExpressionStatement",
															"src": "1373:8:5"
														},
														{
															"expression": {
																"id": 593,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 591,
																	"name": "temp",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 578,
																	"src": "1395:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "38",
																	"id": 592,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1404:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "1395:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 594,
															"nodeType": "ExpressionStatement",
															"src": "1395:10:5"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 587,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 585,
														"name": "temp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 578,
														"src": "1348:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 586,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1356:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1348:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 596,
												"nodeType": "WhileStatement",
												"src": "1341:75:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 598,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 565,
															"src": "1444:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 599,
															"name": "length",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 582,
															"src": "1451:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 597,
														"name": "toHexString",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															603,
															679
														],
														"referencedDeclaration": 679,
														"src": "1432:11:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
															"typeString": "function (uint256,uint256) pure returns (string memory)"
														}
													},
													"id": 600,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1432:26:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 569,
												"id": 601,
												"nodeType": "Return",
												"src": "1425:33:5"
											}
										]
									},
									"documentation": {
										"id": 563,
										"nodeType": "StructuredDocumentation",
										"src": "1037:94:5",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."
									},
									"id": 603,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "1145:11:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 566,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 565,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1165:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 603,
												"src": "1157:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 564,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1157:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1156:15:5"
									},
									"returnParameters": {
										"id": 569,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 568,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 603,
												"src": "1195:13:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 567,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1195:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1194:15:5"
									},
									"scope": 680,
									"src": "1136:329:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 678,
										"nodeType": "Block",
										"src": "1678:351:5",
										"statements": [
											{
												"assignments": [
													614
												],
												"declarations": [
													{
														"constant": false,
														"id": 614,
														"mutability": "mutable",
														"name": "buffer",
														"nameLocation": "1701:6:5",
														"nodeType": "VariableDeclaration",
														"scope": 678,
														"src": "1688:19:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 613,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1688:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 623,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 621,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 619,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 617,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1720:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 618,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 608,
																	"src": "1724:6:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1720:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "32",
																"id": 620,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1733:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "1720:14:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 616,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "1710:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 615,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1714:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 622,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1710:25:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1688:47:5"
											},
											{
												"expression": {
													"id": 628,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 624,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 614,
															"src": "1745:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 626,
														"indexExpression": {
															"hexValue": "30",
															"id": 625,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1752:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1745:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 627,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1757:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
															"typeString": "literal_string \"0\""
														},
														"value": "0"
													},
													"src": "1745:15:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 629,
												"nodeType": "ExpressionStatement",
												"src": "1745:15:5"
											},
											{
												"expression": {
													"id": 634,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 630,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 614,
															"src": "1770:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 632,
														"indexExpression": {
															"hexValue": "31",
															"id": 631,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1777:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1770:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "78",
														"id": 633,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1782:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83",
															"typeString": "literal_string \"x\""
														},
														"value": "x"
													},
													"src": "1770:15:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 635,
												"nodeType": "ExpressionStatement",
												"src": "1770:15:5"
											},
											{
												"body": {
													"id": 664,
													"nodeType": "Block",
													"src": "1840:87:5",
													"statements": [
														{
															"expression": {
																"id": 658,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 650,
																		"name": "buffer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 614,
																		"src": "1854:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 652,
																	"indexExpression": {
																		"id": 651,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 637,
																		"src": "1861:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "1854:9:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"baseExpression": {
																		"id": 653,
																		"name": "_HEX_SYMBOLS",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 483,
																		"src": "1866:12:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes16",
																			"typeString": "bytes16"
																		}
																	},
																	"id": 657,
																	"indexExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 656,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 654,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 606,
																			"src": "1879:5:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&",
																		"rightExpression": {
																			"hexValue": "307866",
																			"id": 655,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1887:3:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_15_by_1",
																				"typeString": "int_const 15"
																			},
																			"value": "0xf"
																		},
																		"src": "1879:11:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "1866:25:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"src": "1854:37:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"id": 659,
															"nodeType": "ExpressionStatement",
															"src": "1854:37:5"
														},
														{
															"expression": {
																"id": 662,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 660,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 606,
																	"src": "1905:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "34",
																	"id": 661,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1915:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "1905:11:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 663,
															"nodeType": "ExpressionStatement",
															"src": "1905:11:5"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 646,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 644,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 637,
														"src": "1828:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "31",
														"id": 645,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1832:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "1828:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 665,
												"initializationExpression": {
													"assignments": [
														637
													],
													"declarations": [
														{
															"constant": false,
															"id": 637,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "1808:1:5",
															"nodeType": "VariableDeclaration",
															"scope": 665,
															"src": "1800:9:5",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 636,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "1800:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 643,
													"initialValue": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 642,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 640,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "32",
																"id": 638,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1812:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 639,
																"name": "length",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 608,
																"src": "1816:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1812:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 641,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1825:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "1812:14:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "1800:26:5"
												},
												"loopExpression": {
													"expression": {
														"id": 648,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "--",
														"prefix": true,
														"src": "1835:3:5",
														"subExpression": {
															"id": 647,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 637,
															"src": "1837:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 649,
													"nodeType": "ExpressionStatement",
													"src": "1835:3:5"
												},
												"nodeType": "ForStatement",
												"src": "1795:132:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 669,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 667,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 606,
																"src": "1944:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 668,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1953:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1944:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "537472696e67733a20686578206c656e67746820696e73756666696369656e74",
															"id": 670,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1956:34:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2",
																"typeString": "literal_string \"Strings: hex length insufficient\""
															},
															"value": "Strings: hex length insufficient"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2",
																"typeString": "literal_string \"Strings: hex length insufficient\""
															}
														],
														"id": 666,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1936:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 671,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1936:55:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 672,
												"nodeType": "ExpressionStatement",
												"src": "1936:55:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 675,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 614,
															"src": "2015:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 674,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "2008:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": {
															"id": 673,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "2008:6:5",
															"typeDescriptions": {}
														}
													},
													"id": 676,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2008:14:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 612,
												"id": 677,
												"nodeType": "Return",
												"src": "2001:21:5"
											}
										]
									},
									"documentation": {
										"id": 604,
										"nodeType": "StructuredDocumentation",
										"src": "1471:112:5",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."
									},
									"id": 679,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "1597:11:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 609,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 606,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1617:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 679,
												"src": "1609:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 605,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1609:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 608,
												"mutability": "mutable",
												"name": "length",
												"nameLocation": "1632:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 679,
												"src": "1624:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 607,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1624:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1608:31:5"
									},
									"returnParameters": {
										"id": 612,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 611,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 679,
												"src": "1663:13:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 610,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1663:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1662:15:5"
									},
									"scope": 680,
									"src": "1588:441:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 681,
							"src": "146:1885:5",
							"usedErrors": []
						}
					],
					"src": "86:1946:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/introspection/ERC165.sol",
					"exportedSymbols": {
						"ERC165": [
							704
						],
						"IERC165": [
							716
						]
					},
					"id": 705,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 682,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "99:23:6"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"file": "./IERC165.sol",
							"id": 683,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 705,
							"sourceUnit": 717,
							"src": "124:23:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 685,
										"name": "IERC165",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 716,
										"src": "754:7:6"
									},
									"id": 686,
									"nodeType": "InheritanceSpecifier",
									"src": "754:7:6"
								}
							],
							"canonicalName": "ERC165",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 684,
								"nodeType": "StructuredDocumentation",
								"src": "149:576:6",
								"text": " @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."
							},
							"fullyImplemented": true,
							"id": 704,
							"linearizedBaseContracts": [
								704,
								716
							],
							"name": "ERC165",
							"nameLocation": "744:6:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"baseFunctions": [
										715
									],
									"body": {
										"id": 702,
										"nodeType": "Block",
										"src": "920:64:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													},
													"id": 700,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 695,
														"name": "interfaceId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 689,
														"src": "937:11:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes4",
															"typeString": "bytes4"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 697,
																	"name": "IERC165",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 716,
																	"src": "957:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_IERC165_$716_$",
																		"typeString": "type(contract IERC165)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_contract$_IERC165_$716_$",
																		"typeString": "type(contract IERC165)"
																	}
																],
																"id": 696,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "952:4:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 698,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "952:13:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_contract$_IERC165_$716",
																"typeString": "type(contract IERC165)"
															}
														},
														"id": 699,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "interfaceId",
														"nodeType": "MemberAccess",
														"src": "952:25:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes4",
															"typeString": "bytes4"
														}
													},
													"src": "937:40:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 694,
												"id": 701,
												"nodeType": "Return",
												"src": "930:47:6"
											}
										]
									},
									"documentation": {
										"id": 687,
										"nodeType": "StructuredDocumentation",
										"src": "768:56:6",
										"text": " @dev See {IERC165-supportsInterface}."
									},
									"functionSelector": "01ffc9a7",
									"id": 703,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "838:17:6",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 691,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "896:8:6"
									},
									"parameters": {
										"id": 690,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 689,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "863:11:6",
												"nodeType": "VariableDeclaration",
												"scope": 703,
												"src": "856:18:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 688,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "856:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "855:20:6"
									},
									"returnParameters": {
										"id": 694,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 693,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 703,
												"src": "914:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 692,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "914:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "913:6:6"
									},
									"scope": 704,
									"src": "829:155:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								}
							],
							"scope": 705,
							"src": "726:260:6",
							"usedErrors": []
						}
					],
					"src": "99:888:6"
				},
				"id": 6
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							716
						]
					},
					"id": 717,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 706,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "100:23:7"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC165",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 707,
								"nodeType": "StructuredDocumentation",
								"src": "125:279:7",
								"text": " @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
							},
							"fullyImplemented": false,
							"id": 716,
							"linearizedBaseContracts": [
								716
							],
							"name": "IERC165",
							"nameLocation": "415:7:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 708,
										"nodeType": "StructuredDocumentation",
										"src": "429:340:7",
										"text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
									},
									"functionSelector": "01ffc9a7",
									"id": 715,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "783:17:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 711,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 710,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "808:11:7",
												"nodeType": "VariableDeclaration",
												"scope": 715,
												"src": "801:18:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 709,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "801:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "800:20:7"
									},
									"returnParameters": {
										"id": 714,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 713,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 715,
												"src": "844:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 712,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "844:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "843:6:7"
									},
									"scope": 716,
									"src": "774:76:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 717,
							"src": "405:447:7",
							"usedErrors": []
						}
					],
					"src": "100:753:7"
				},
				"id": 7
			},
			"@openzeppelin/contracts/utils/math/SafeMath.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/math/SafeMath.sol",
					"exportedSymbols": {
						"SafeMath": [
							1028
						]
					},
					"id": 1029,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 718,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "107:23:8"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SafeMath",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 719,
								"nodeType": "StructuredDocumentation",
								"src": "285:196:8",
								"text": " @dev Wrappers over Solidity's arithmetic operations.\n NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n now has built in overflow checking."
							},
							"fullyImplemented": true,
							"id": 1028,
							"linearizedBaseContracts": [
								1028
							],
							"name": "SafeMath",
							"nameLocation": "490:8:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 750,
										"nodeType": "Block",
										"src": "717:140:8",
										"statements": [
											{
												"id": 749,
												"nodeType": "UncheckedBlock",
												"src": "727:124:8",
												"statements": [
													{
														"assignments": [
															732
														],
														"declarations": [
															{
																"constant": false,
																"id": 732,
																"mutability": "mutable",
																"name": "c",
																"nameLocation": "759:1:8",
																"nodeType": "VariableDeclaration",
																"scope": 749,
																"src": "751:9:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 731,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "751:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 736,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 735,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 733,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 722,
																"src": "763:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 734,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 724,
																"src": "767:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "763:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "751:17:8"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 739,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 737,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 732,
																"src": "786:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 738,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 722,
																"src": "790:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "786:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 744,
														"nodeType": "IfStatement",
														"src": "782:28:8",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 740,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "801:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 741,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "808:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 742,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "800:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 730,
															"id": 743,
															"nodeType": "Return",
															"src": "793:17:8"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 745,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "832:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 746,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 732,
																	"src": "838:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 747,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "831:9:8",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 730,
														"id": 748,
														"nodeType": "Return",
														"src": "824:16:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 720,
										"nodeType": "StructuredDocumentation",
										"src": "505:131:8",
										"text": " @dev Returns the addition of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 751,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryAdd",
									"nameLocation": "650:6:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 725,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 722,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "665:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 751,
												"src": "657:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 721,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "657:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 724,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "676:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 751,
												"src": "668:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 723,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "668:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "656:22:8"
									},
									"returnParameters": {
										"id": 730,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 727,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 751,
												"src": "702:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 726,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "702:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 729,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 751,
												"src": "708:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 728,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "708:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "701:15:8"
									},
									"scope": 1028,
									"src": "641:216:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 778,
										"nodeType": "Block",
										"src": "1078:113:8",
										"statements": [
											{
												"id": 777,
												"nodeType": "UncheckedBlock",
												"src": "1088:97:8",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 765,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 763,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 756,
																"src": "1116:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"id": 764,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 754,
																"src": "1120:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1116:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 770,
														"nodeType": "IfStatement",
														"src": "1112:28:8",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 766,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1131:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 767,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1138:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 768,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1130:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 762,
															"id": 769,
															"nodeType": "Return",
															"src": "1123:17:8"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 771,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1162:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 774,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 772,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 754,
																		"src": "1168:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 773,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 756,
																		"src": "1172:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1168:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 775,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1161:13:8",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 762,
														"id": 776,
														"nodeType": "Return",
														"src": "1154:20:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 752,
										"nodeType": "StructuredDocumentation",
										"src": "863:134:8",
										"text": " @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 779,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySub",
									"nameLocation": "1011:6:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 757,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 754,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1026:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 779,
												"src": "1018:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 753,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1018:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 756,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1037:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 779,
												"src": "1029:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 755,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1029:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1017:22:8"
									},
									"returnParameters": {
										"id": 762,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 759,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 779,
												"src": "1063:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 758,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1063:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 761,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 779,
												"src": "1069:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 760,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1069:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1062:15:8"
									},
									"scope": 1028,
									"src": "1002:189:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 820,
										"nodeType": "Block",
										"src": "1415:417:8",
										"statements": [
											{
												"id": 819,
												"nodeType": "UncheckedBlock",
												"src": "1425:401:8",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 793,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 791,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 782,
																"src": "1683:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 792,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1688:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1683:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 798,
														"nodeType": "IfStatement",
														"src": "1679:28:8",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "74727565",
																		"id": 794,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1699:4:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "true"
																	},
																	{
																		"hexValue": "30",
																		"id": 795,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1705:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 796,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1698:9:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 790,
															"id": 797,
															"nodeType": "Return",
															"src": "1691:16:8"
														}
													},
													{
														"assignments": [
															800
														],
														"declarations": [
															{
																"constant": false,
																"id": 800,
																"mutability": "mutable",
																"name": "c",
																"nameLocation": "1729:1:8",
																"nodeType": "VariableDeclaration",
																"scope": 819,
																"src": "1721:9:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 799,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1721:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 804,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 803,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 801,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 782,
																"src": "1733:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 802,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 784,
																"src": "1737:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1733:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "1721:17:8"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 809,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 807,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 805,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 800,
																	"src": "1756:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 806,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 782,
																	"src": "1760:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1756:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 808,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 784,
																"src": "1765:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1756:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 814,
														"nodeType": "IfStatement",
														"src": "1752:33:8",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 810,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1776:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 811,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1783:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 812,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1775:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 790,
															"id": 813,
															"nodeType": "Return",
															"src": "1768:17:8"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 815,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1807:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 816,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 800,
																	"src": "1813:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 817,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1806:9:8",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 790,
														"id": 818,
														"nodeType": "Return",
														"src": "1799:16:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 780,
										"nodeType": "StructuredDocumentation",
										"src": "1197:137:8",
										"text": " @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 821,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMul",
									"nameLocation": "1348:6:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 785,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 782,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1363:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 821,
												"src": "1355:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 781,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1355:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 784,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1374:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 821,
												"src": "1366:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 783,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1366:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1354:22:8"
									},
									"returnParameters": {
										"id": 790,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 787,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 821,
												"src": "1400:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 786,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1400:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 789,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 821,
												"src": "1406:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 788,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1406:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1399:15:8"
									},
									"scope": 1028,
									"src": "1339:493:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 848,
										"nodeType": "Block",
										"src": "2057:114:8",
										"statements": [
											{
												"id": 847,
												"nodeType": "UncheckedBlock",
												"src": "2067:98:8",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 835,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 833,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 826,
																"src": "2095:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 834,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2100:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2095:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 840,
														"nodeType": "IfStatement",
														"src": "2091:29:8",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 836,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2111:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 837,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2118:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 838,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2110:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 832,
															"id": 839,
															"nodeType": "Return",
															"src": "2103:17:8"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 841,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2142:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 844,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 842,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 824,
																		"src": "2148:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 843,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 826,
																		"src": "2152:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2148:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 845,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2141:13:8",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 832,
														"id": 846,
														"nodeType": "Return",
														"src": "2134:20:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 822,
										"nodeType": "StructuredDocumentation",
										"src": "1838:138:8",
										"text": " @dev Returns the division of two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 849,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryDiv",
									"nameLocation": "1990:6:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 827,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 824,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2005:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 849,
												"src": "1997:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 823,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1997:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 826,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2016:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 849,
												"src": "2008:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 825,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2008:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1996:22:8"
									},
									"returnParameters": {
										"id": 832,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 829,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 849,
												"src": "2042:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 828,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2042:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 831,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 849,
												"src": "2048:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 830,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2048:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2041:15:8"
									},
									"scope": 1028,
									"src": "1981:190:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 876,
										"nodeType": "Block",
										"src": "2406:114:8",
										"statements": [
											{
												"id": 875,
												"nodeType": "UncheckedBlock",
												"src": "2416:98:8",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 863,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 861,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 854,
																"src": "2444:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 862,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2449:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2444:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 868,
														"nodeType": "IfStatement",
														"src": "2440:29:8",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 864,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2460:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 865,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2467:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 866,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2459:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 860,
															"id": 867,
															"nodeType": "Return",
															"src": "2452:17:8"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 869,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2491:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 872,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 870,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 852,
																		"src": "2497:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "%",
																	"rightExpression": {
																		"id": 871,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 854,
																		"src": "2501:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2497:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 873,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2490:13:8",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 860,
														"id": 874,
														"nodeType": "Return",
														"src": "2483:20:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 850,
										"nodeType": "StructuredDocumentation",
										"src": "2177:148:8",
										"text": " @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 877,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMod",
									"nameLocation": "2339:6:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 855,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 852,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2354:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 877,
												"src": "2346:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 851,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2346:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 854,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2365:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 877,
												"src": "2357:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 853,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2357:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2345:22:8"
									},
									"returnParameters": {
										"id": 860,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 857,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 877,
												"src": "2391:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 856,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2391:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 859,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 877,
												"src": "2397:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 858,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2397:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2390:15:8"
									},
									"scope": 1028,
									"src": "2330:190:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 891,
										"nodeType": "Block",
										"src": "2822:29:8",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 889,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 887,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 880,
														"src": "2839:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 888,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 882,
														"src": "2843:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2839:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 886,
												"id": 890,
												"nodeType": "Return",
												"src": "2832:12:8"
											}
										]
									},
									"documentation": {
										"id": 878,
										"nodeType": "StructuredDocumentation",
										"src": "2526:224:8",
										"text": " @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."
									},
									"id": 892,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nameLocation": "2764:3:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 883,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 880,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2776:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 892,
												"src": "2768:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 879,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2768:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 882,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2787:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 892,
												"src": "2779:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 881,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2779:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2767:22:8"
									},
									"returnParameters": {
										"id": 886,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 885,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 892,
												"src": "2813:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 884,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2813:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2812:9:8"
									},
									"scope": 1028,
									"src": "2755:96:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 906,
										"nodeType": "Block",
										"src": "3189:29:8",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 904,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 902,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 895,
														"src": "3206:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"id": 903,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 897,
														"src": "3210:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3206:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 901,
												"id": 905,
												"nodeType": "Return",
												"src": "3199:12:8"
											}
										]
									},
									"documentation": {
										"id": 893,
										"nodeType": "StructuredDocumentation",
										"src": "2857:260:8",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 907,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nameLocation": "3131:3:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 898,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 895,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "3143:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 907,
												"src": "3135:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 894,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3135:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 897,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "3154:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 907,
												"src": "3146:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 896,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3146:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3134:22:8"
									},
									"returnParameters": {
										"id": 901,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 900,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 907,
												"src": "3180:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 899,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3180:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3179:9:8"
									},
									"scope": 1028,
									"src": "3122:96:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 921,
										"nodeType": "Block",
										"src": "3532:29:8",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 919,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 917,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 910,
														"src": "3549:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"id": 918,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 912,
														"src": "3553:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3549:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 916,
												"id": 920,
												"nodeType": "Return",
												"src": "3542:12:8"
											}
										]
									},
									"documentation": {
										"id": 908,
										"nodeType": "StructuredDocumentation",
										"src": "3224:236:8",
										"text": " @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."
									},
									"id": 922,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mul",
									"nameLocation": "3474:3:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 913,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 910,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "3486:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 922,
												"src": "3478:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 909,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3478:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 912,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "3497:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 922,
												"src": "3489:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 911,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3489:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3477:22:8"
									},
									"returnParameters": {
										"id": 916,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 915,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 922,
												"src": "3523:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 914,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3523:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3522:9:8"
									},
									"scope": 1028,
									"src": "3465:96:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 936,
										"nodeType": "Block",
										"src": "3917:29:8",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 934,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 932,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 925,
														"src": "3934:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"id": 933,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 927,
														"src": "3938:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3934:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 931,
												"id": 935,
												"nodeType": "Return",
												"src": "3927:12:8"
											}
										]
									},
									"documentation": {
										"id": 923,
										"nodeType": "StructuredDocumentation",
										"src": "3567:278:8",
										"text": " @dev Returns the integer division of two unsigned integers, reverting on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator.\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 937,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nameLocation": "3859:3:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 928,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 925,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "3871:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 937,
												"src": "3863:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 924,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3863:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 927,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "3882:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 937,
												"src": "3874:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 926,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3874:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3862:22:8"
									},
									"returnParameters": {
										"id": 931,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 930,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 937,
												"src": "3908:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 929,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3908:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3907:9:8"
									},
									"scope": 1028,
									"src": "3850:96:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 951,
										"nodeType": "Block",
										"src": "4466:29:8",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 949,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 947,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 940,
														"src": "4483:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"id": 948,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 942,
														"src": "4487:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4483:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 946,
												"id": 950,
												"nodeType": "Return",
												"src": "4476:12:8"
											}
										]
									},
									"documentation": {
										"id": 938,
										"nodeType": "StructuredDocumentation",
										"src": "3952:442:8",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 952,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nameLocation": "4408:3:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 943,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 940,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "4420:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 952,
												"src": "4412:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 939,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4412:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 942,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "4431:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 952,
												"src": "4423:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 941,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4423:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4411:22:8"
									},
									"returnParameters": {
										"id": 946,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 945,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 952,
												"src": "4457:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 944,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4457:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4456:9:8"
									},
									"scope": 1028,
									"src": "4399:96:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 976,
										"nodeType": "Block",
										"src": "5084:106:8",
										"statements": [
											{
												"id": 975,
												"nodeType": "UncheckedBlock",
												"src": "5094:90:8",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 967,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 965,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 957,
																		"src": "5126:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "<=",
																	"rightExpression": {
																		"id": 966,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 955,
																		"src": "5131:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5126:6:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 968,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 959,
																	"src": "5134:12:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 964,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "5118:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 969,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5118:29:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 970,
														"nodeType": "ExpressionStatement",
														"src": "5118:29:8"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 973,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 971,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 955,
																"src": "5168:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 972,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 957,
																"src": "5172:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5168:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 963,
														"id": 974,
														"nodeType": "Return",
														"src": "5161:12:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 953,
										"nodeType": "StructuredDocumentation",
										"src": "4501:453:8",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {trySub}.\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 977,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nameLocation": "4968:3:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 960,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 955,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "4989:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 977,
												"src": "4981:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 954,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4981:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 957,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "5008:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 977,
												"src": "5000:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 956,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5000:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 959,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5033:12:8",
												"nodeType": "VariableDeclaration",
												"scope": 977,
												"src": "5019:26:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 958,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5019:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4971:80:8"
									},
									"returnParameters": {
										"id": 963,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 962,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 977,
												"src": "5075:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 961,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5075:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5074:9:8"
									},
									"scope": 1028,
									"src": "4959:231:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1001,
										"nodeType": "Block",
										"src": "5799:105:8",
										"statements": [
											{
												"id": 1000,
												"nodeType": "UncheckedBlock",
												"src": "5809:89:8",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 992,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 990,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 982,
																		"src": "5841:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 991,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5845:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "5841:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 993,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 984,
																	"src": "5848:12:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 989,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "5833:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 994,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5833:28:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 995,
														"nodeType": "ExpressionStatement",
														"src": "5833:28:8"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 998,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 996,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 980,
																"src": "5882:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 997,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 982,
																"src": "5886:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5882:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 988,
														"id": 999,
														"nodeType": "Return",
														"src": "5875:12:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 978,
										"nodeType": "StructuredDocumentation",
										"src": "5196:473:8",
										"text": " @dev Returns the integer division of two unsigned integers, reverting with custom message on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 1002,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nameLocation": "5683:3:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 985,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 980,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "5704:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 1002,
												"src": "5696:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 979,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5696:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 982,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "5723:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 1002,
												"src": "5715:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 981,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5715:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 984,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5748:12:8",
												"nodeType": "VariableDeclaration",
												"scope": 1002,
												"src": "5734:26:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 983,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5734:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5686:80:8"
									},
									"returnParameters": {
										"id": 988,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 987,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1002,
												"src": "5790:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 986,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5790:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5789:9:8"
									},
									"scope": 1028,
									"src": "5674:230:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1026,
										"nodeType": "Block",
										"src": "6675:105:8",
										"statements": [
											{
												"id": 1025,
												"nodeType": "UncheckedBlock",
												"src": "6685:89:8",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1017,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1015,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1007,
																		"src": "6717:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 1016,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "6721:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "6717:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 1018,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1009,
																	"src": "6724:12:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 1014,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "6709:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 1019,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6709:28:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 1020,
														"nodeType": "ExpressionStatement",
														"src": "6709:28:8"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1023,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1021,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1005,
																"src": "6758:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "%",
															"rightExpression": {
																"id": 1022,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1007,
																"src": "6762:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6758:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1013,
														"id": 1024,
														"nodeType": "Return",
														"src": "6751:12:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1003,
										"nodeType": "StructuredDocumentation",
										"src": "5910:635:8",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting with custom message when dividing by zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryMod}.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 1027,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nameLocation": "6559:3:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1010,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1005,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "6580:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 1027,
												"src": "6572:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1004,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6572:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1007,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "6599:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 1027,
												"src": "6591:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1006,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6591:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1009,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6624:12:8",
												"nodeType": "VariableDeclaration",
												"scope": 1027,
												"src": "6610:26:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1008,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6610:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6562:80:8"
									},
									"returnParameters": {
										"id": 1013,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1012,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1027,
												"src": "6666:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1011,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6666:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6665:9:8"
									},
									"scope": 1028,
									"src": "6550:230:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1029,
							"src": "482:6300:8",
							"usedErrors": []
						}
					],
					"src": "107:6676:8"
				},
				"id": 8
			},
			"ERC721A/ERC721A.sol": {
				"ast": {
					"absolutePath": "ERC721A/ERC721A.sol",
					"exportedSymbols": {
						"Address": [
							455
						],
						"Context": [
							477
						],
						"ERC165": [
							704
						],
						"ERC721A": [
							2496
						],
						"IDCF": [
							2507
						],
						"IERC165": [
							716
						],
						"IERC721": [
							115
						],
						"IERC721A": [
							2578
						],
						"IERC721Metadata": [
							160
						],
						"IERC721Receiver": [
							133
						],
						"SafeMath": [
							1028
						],
						"Strings": [
							680
						]
					},
					"id": 2497,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1030,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "88:23:9"
						},
						{
							"absolutePath": "ERC721A/IERC721A.sol",
							"file": "./IERC721A.sol",
							"id": 1031,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2497,
							"sourceUnit": 2579,
							"src": "115:24:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "ERC721A/IDCF.sol",
							"file": "./IDCF.sol",
							"id": 1032,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2497,
							"sourceUnit": 2508,
							"src": "141:20:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol",
							"file": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol",
							"id": 1033,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2497,
							"sourceUnit": 134,
							"src": "163:66:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
							"file": "@openzeppelin/contracts/utils/Address.sol",
							"id": 1034,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2497,
							"sourceUnit": 456,
							"src": "231:51:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "@openzeppelin/contracts/utils/Context.sol",
							"id": 1035,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2497,
							"sourceUnit": 478,
							"src": "284:51:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Strings.sol",
							"file": "@openzeppelin/contracts/utils/Strings.sol",
							"id": 1036,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2497,
							"sourceUnit": 681,
							"src": "337:51:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/ERC165.sol",
							"file": "@openzeppelin/contracts/utils/introspection/ERC165.sol",
							"id": 1037,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2497,
							"sourceUnit": 705,
							"src": "390:64:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/math/SafeMath.sol",
							"file": "@openzeppelin/contracts/utils/math/SafeMath.sol",
							"id": 1038,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2497,
							"sourceUnit": 1029,
							"src": "456:57:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1040,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 477,
										"src": "1038:7:9"
									},
									"id": 1041,
									"nodeType": "InheritanceSpecifier",
									"src": "1038:7:9"
								},
								{
									"baseName": {
										"id": 1042,
										"name": "ERC165",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 704,
										"src": "1047:6:9"
									},
									"id": 1043,
									"nodeType": "InheritanceSpecifier",
									"src": "1047:6:9"
								},
								{
									"baseName": {
										"id": 1044,
										"name": "IERC721A",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2578,
										"src": "1055:8:9"
									},
									"id": 1045,
									"nodeType": "InheritanceSpecifier",
									"src": "1055:8:9"
								},
								{
									"baseName": {
										"id": 1046,
										"name": "IDCF",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2507,
										"src": "1065:4:9"
									},
									"id": 1047,
									"nodeType": "InheritanceSpecifier",
									"src": "1065:4:9"
								}
							],
							"canonicalName": "ERC721A",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1039,
								"nodeType": "StructuredDocumentation",
								"src": "517:499:9",
								"text": " @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n the Metadata extension. Built to optimize for lower gas during batch mints.\n Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\n Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\n Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256)."
							},
							"fullyImplemented": true,
							"id": 2496,
							"linearizedBaseContracts": [
								2496,
								2507,
								2578,
								160,
								115,
								704,
								716,
								477
							],
							"name": "ERC721A",
							"nameLocation": "1027:7:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 1050,
									"libraryName": {
										"id": 1048,
										"name": "SafeMath",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1028,
										"src": "1083:8:9"
									},
									"nodeType": "UsingForDirective",
									"src": "1077:24:9",
									"typeName": {
										"id": 1049,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "1096:4:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"global": false,
									"id": 1053,
									"libraryName": {
										"id": 1051,
										"name": "Address",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 455,
										"src": "1113:7:9"
									},
									"nodeType": "UsingForDirective",
									"src": "1107:26:9",
									"typeName": {
										"id": 1052,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1125:7:9",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									}
								},
								{
									"global": false,
									"id": 1056,
									"libraryName": {
										"id": 1054,
										"name": "Strings",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 680,
										"src": "1145:7:9"
									},
									"nodeType": "UsingForDirective",
									"src": "1139:26:9",
									"typeName": {
										"id": 1055,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1157:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"constant": false,
									"id": 1058,
									"mutability": "mutable",
									"name": "_currentIndex",
									"nameLocation": "1242:13:9",
									"nodeType": "VariableDeclaration",
									"scope": 2496,
									"src": "1225:30:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1057,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1225:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 1060,
									"mutability": "mutable",
									"name": "_burnCounter",
									"nameLocation": "1318:12:9",
									"nodeType": "VariableDeclaration",
									"scope": 2496,
									"src": "1301:29:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1059,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1301:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 1062,
									"mutability": "mutable",
									"name": "_name",
									"nameLocation": "1373:5:9",
									"nodeType": "VariableDeclaration",
									"scope": 2496,
									"src": "1358:20:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 1061,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1358:6:9",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1064,
									"mutability": "mutable",
									"name": "_symbol",
									"nameLocation": "1423:7:9",
									"nodeType": "VariableDeclaration",
									"scope": 2496,
									"src": "1408:22:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 1063,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1408:6:9",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1069,
									"mutability": "mutable",
									"name": "_ownerships",
									"nameLocation": "1657:11:9",
									"nodeType": "VariableDeclaration",
									"scope": 2496,
									"src": "1613:55:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$2562_storage_$",
										"typeString": "mapping(uint256 => struct IERC721A.TokenOwnership)"
									},
									"typeName": {
										"id": 1068,
										"keyType": {
											"id": 1065,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1621:7:9",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "1613:34:9",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$2562_storage_$",
											"typeString": "mapping(uint256 => struct IERC721A.TokenOwnership)"
										},
										"valueType": {
											"id": 1067,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 1066,
												"name": "TokenOwnership",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 2562,
												"src": "1632:14:9"
											},
											"referencedDeclaration": 2562,
											"src": "1632:14:9",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_TokenOwnership_$2562_storage_ptr",
												"typeString": "struct IERC721A.TokenOwnership"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 1074,
									"mutability": "mutable",
									"name": "_addressData",
									"nameLocation": "1763:12:9",
									"nodeType": "VariableDeclaration",
									"scope": 2496,
									"src": "1723:52:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$2571_storage_$",
										"typeString": "mapping(address => struct IERC721A.AddressData)"
									},
									"typeName": {
										"id": 1073,
										"keyType": {
											"id": 1070,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1731:7:9",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1723:31:9",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$2571_storage_$",
											"typeString": "mapping(address => struct IERC721A.AddressData)"
										},
										"valueType": {
											"id": 1072,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 1071,
												"name": "AddressData",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 2571,
												"src": "1742:11:9"
											},
											"referencedDeclaration": 2571,
											"src": "1742:11:9",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_AddressData_$2571_storage_ptr",
												"typeString": "struct IERC721A.AddressData"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1078,
									"mutability": "mutable",
									"name": "_tokenApprovals",
									"nameLocation": "1870:15:9",
									"nodeType": "VariableDeclaration",
									"scope": 2496,
									"src": "1834:51:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
										"typeString": "mapping(uint256 => address)"
									},
									"typeName": {
										"id": 1077,
										"keyType": {
											"id": 1075,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1842:7:9",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "1834:27:9",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
											"typeString": "mapping(uint256 => address)"
										},
										"valueType": {
											"id": 1076,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1853:7:9",
											"stateMutability": "nonpayable",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1084,
									"mutability": "mutable",
									"name": "_operatorApprovals",
									"nameLocation": "1996:18:9",
									"nodeType": "VariableDeclaration",
									"scope": 2496,
									"src": "1943:71:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
										"typeString": "mapping(address => mapping(address => bool))"
									},
									"typeName": {
										"id": 1083,
										"keyType": {
											"id": 1079,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1951:7:9",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1943:44:9",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
											"typeString": "mapping(address => mapping(address => bool))"
										},
										"valueType": {
											"id": 1082,
											"keyType": {
												"id": 1080,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1970:7:9",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1962:24:9",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
												"typeString": "mapping(address => bool)"
											},
											"valueType": {
												"id": 1081,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1981:4:9",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"documentation": {
										"id": 1085,
										"nodeType": "StructuredDocumentation",
										"src": "2023:80:9",
										"text": "[user][1] = last_block\n[user][2] = accumulation_block "
									},
									"id": 1091,
									"mutability": "mutable",
									"name": "_BlockScore",
									"nameLocation": "2167:11:9",
									"nodeType": "VariableDeclaration",
									"scope": 2496,
									"src": "2112:66:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(uint256 => uint256))"
									},
									"typeName": {
										"id": 1090,
										"keyType": {
											"id": 1086,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "2120:7:9",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "2112:47:9",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(uint256 => uint256))"
										},
										"valueType": {
											"id": 1089,
											"keyType": {
												"id": 1087,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2139:7:9",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"nodeType": "Mapping",
											"src": "2131:27:9",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
												"typeString": "mapping(uint256 => uint256)"
											},
											"valueType": {
												"id": 1088,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2150:7:9",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 1111,
										"nodeType": "Block",
										"src": "2243:102:9",
										"statements": [
											{
												"expression": {
													"id": 1100,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1098,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1062,
														"src": "2254:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1099,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1093,
														"src": "2262:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2254:13:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 1101,
												"nodeType": "ExpressionStatement",
												"src": "2254:13:9"
											},
											{
												"expression": {
													"id": 1104,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1102,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1064,
														"src": "2278:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1103,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1095,
														"src": "2288:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2278:17:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 1105,
												"nodeType": "ExpressionStatement",
												"src": "2278:17:9"
											},
											{
												"expression": {
													"id": 1109,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1106,
														"name": "_currentIndex",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1058,
														"src": "2306:13:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1107,
															"name": "_startTokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1201,
															"src": "2322:13:9",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																"typeString": "function () view returns (uint256)"
															}
														},
														"id": 1108,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2322:15:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2306:31:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1110,
												"nodeType": "ExpressionStatement",
												"src": "2306:31:9"
											}
										]
									},
									"id": 1112,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1096,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1093,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "2213:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1112,
												"src": "2199:19:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1092,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2199:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1095,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "2234:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1112,
												"src": "2220:21:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1094,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2220:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2198:44:9"
									},
									"returnParameters": {
										"id": 1097,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2243:0:9"
									},
									"scope": 2496,
									"src": "2187:158:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										2506
									],
									"body": {
										"id": 1153,
										"nodeType": "Block",
										"src": "2420:235:9",
										"statements": [
											{
												"assignments": [
													1120
												],
												"declarations": [
													{
														"constant": false,
														"id": 1120,
														"mutability": "mutable",
														"name": "difference",
														"nameLocation": "2439:10:9",
														"nodeType": "VariableDeclaration",
														"scope": 1153,
														"src": "2431:18:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1119,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2431:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1130,
												"initialValue": {
													"arguments": [
														{
															"baseExpression": {
																"baseExpression": {
																	"id": 1124,
																	"name": "_BlockScore",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1091,
																	"src": "2469:11:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$",
																		"typeString": "mapping(address => mapping(uint256 => uint256))"
																	}
																},
																"id": 1126,
																"indexExpression": {
																	"id": 1125,
																	"name": "user",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1114,
																	"src": "2481:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "2469:17:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																	"typeString": "mapping(uint256 => uint256)"
																}
															},
															"id": 1128,
															"indexExpression": {
																"hexValue": "31",
																"id": 1127,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2487:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "2469:20:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"expression": {
																"id": 1121,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967292,
																"src": "2452:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 1122,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "number",
															"nodeType": "MemberAccess",
															"src": "2452:12:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1123,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sub",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 907,
														"src": "2452:16:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 1129,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2452:38:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2431:59:9"
											},
											{
												"assignments": [
													1132
												],
												"declarations": [
													{
														"constant": false,
														"id": 1132,
														"mutability": "mutable",
														"name": "Product",
														"nameLocation": "2509:7:9",
														"nodeType": "VariableDeclaration",
														"scope": 1153,
														"src": "2501:15:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1131,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2501:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1139,
												"initialValue": {
													"arguments": [
														{
															"id": 1137,
															"name": "difference",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1120,
															"src": "2539:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1134,
																	"name": "user",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1114,
																	"src": "2529:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1133,
																"name": "balanceOf",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1289,
																"src": "2519:9:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address) view returns (uint256)"
																}
															},
															"id": 1135,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2519:15:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1136,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "mul",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 922,
														"src": "2519:19:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 1138,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2519:31:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2501:49:9"
											},
											{
												"assignments": [
													1141
												],
												"declarations": [
													{
														"constant": false,
														"id": 1141,
														"mutability": "mutable",
														"name": "accumulation",
														"nameLocation": "2569:12:9",
														"nodeType": "VariableDeclaration",
														"scope": 1153,
														"src": "2561:20:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1140,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2561:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1150,
												"initialValue": {
													"arguments": [
														{
															"id": 1148,
															"name": "Product",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1132,
															"src": "2609:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"baseExpression": {
																"baseExpression": {
																	"id": 1142,
																	"name": "_BlockScore",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1091,
																	"src": "2584:11:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$",
																		"typeString": "mapping(address => mapping(uint256 => uint256))"
																	}
																},
																"id": 1144,
																"indexExpression": {
																	"id": 1143,
																	"name": "user",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1114,
																	"src": "2596:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "2584:17:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																	"typeString": "mapping(uint256 => uint256)"
																}
															},
															"id": 1146,
															"indexExpression": {
																"hexValue": "32",
																"id": 1145,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2602:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "2584:20:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1147,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "add",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 892,
														"src": "2584:24:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 1149,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2584:33:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2561:56:9"
											},
											{
												"expression": {
													"id": 1151,
													"name": "accumulation",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1141,
													"src": "2635:12:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1118,
												"id": 1152,
												"nodeType": "Return",
												"src": "2628:19:9"
											}
										]
									},
									"functionSelector": "325b272a",
									"id": 1154,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "BlockScore",
									"nameLocation": "2368:10:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1115,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1114,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "2387:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1154,
												"src": "2379:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1113,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2379:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2378:14:9"
									},
									"returnParameters": {
										"id": 1118,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1117,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1154,
												"src": "2412:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1116,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2412:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2411:9:9"
									},
									"scope": 2496,
									"src": "2359:296:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1191,
										"nodeType": "Block",
										"src": "2697:184:9",
										"statements": [
											{
												"assignments": [
													1158
												],
												"declarations": [
													{
														"constant": false,
														"id": 1158,
														"mutability": "mutable",
														"name": "Score",
														"nameLocation": "2716:5:9",
														"nodeType": "VariableDeclaration",
														"scope": 1191,
														"src": "2708:13:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1157,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2708:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1163,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"id": 1160,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2735:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1161,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2735:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1159,
														"name": "BlockScore",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1154,
														"src": "2724:10:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view returns (uint256)"
														}
													},
													"id": 1162,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2724:22:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2708:38:9"
											},
											{
												"expression": {
													"id": 1179,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 1164,
																"name": "_BlockScore",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1091,
																"src": "2757:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(uint256 => uint256))"
																}
															},
															"id": 1168,
															"indexExpression": {
																"expression": {
																	"id": 1165,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "2769:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1166,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "2769:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "2757:23:9",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 1169,
														"indexExpression": {
															"hexValue": "32",
															"id": 1167,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2781:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2757:26:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1177,
																"name": "Score",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1158,
																"src": "2815:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"baseExpression": {
																	"baseExpression": {
																		"id": 1170,
																		"name": "_BlockScore",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1091,
																		"src": "2784:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$",
																			"typeString": "mapping(address => mapping(uint256 => uint256))"
																		}
																	},
																	"id": 1173,
																	"indexExpression": {
																		"expression": {
																			"id": 1171,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "2796:3:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1172,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "2796:10:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "2784:23:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																		"typeString": "mapping(uint256 => uint256)"
																	}
																},
																"id": 1175,
																"indexExpression": {
																	"hexValue": "32",
																	"id": 1174,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2808:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "2784:26:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1176,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 892,
															"src": "2784:30:9",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 1178,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2784:37:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2757:64:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1180,
												"nodeType": "ExpressionStatement",
												"src": "2757:64:9"
											},
											{
												"expression": {
													"id": 1189,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 1181,
																"name": "_BlockScore",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1091,
																"src": "2832:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(uint256 => uint256))"
																}
															},
															"id": 1185,
															"indexExpression": {
																"expression": {
																	"id": 1182,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "2844:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1183,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "2844:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "2832:23:9",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 1186,
														"indexExpression": {
															"hexValue": "31",
															"id": 1184,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2856:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2832:26:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 1187,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "2861:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 1188,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "number",
														"nodeType": "MemberAccess",
														"src": "2861:12:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2832:41:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1190,
												"nodeType": "ExpressionStatement",
												"src": "2832:41:9"
											}
										]
									},
									"id": 1192,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "updateBlockScore",
									"nameLocation": "2672:16:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1155,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2688:2:9"
									},
									"returnParameters": {
										"id": 1156,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2697:0:9"
									},
									"scope": 2496,
									"src": "2663:218:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1200,
										"nodeType": "Block",
										"src": "3050:27:9",
										"statements": [
											{
												"expression": {
													"hexValue": "31",
													"id": 1198,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3068:1:9",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_1_by_1",
														"typeString": "int_const 1"
													},
													"value": "1"
												},
												"functionReturnParameters": 1197,
												"id": 1199,
												"nodeType": "Return",
												"src": "3061:8:9"
											}
										]
									},
									"documentation": {
										"id": 1193,
										"nodeType": "StructuredDocumentation",
										"src": "2896:83:9",
										"text": " To change the starting tokenId, please override this function."
									},
									"id": 1201,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_startTokenId",
									"nameLocation": "2994:13:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1194,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3007:2:9"
									},
									"returnParameters": {
										"id": 1197,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1196,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1201,
												"src": "3041:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1195,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3041:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3040:9:9"
									},
									"scope": 2496,
									"src": "2985:92:9",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										2577
									],
									"body": {
										"id": 1216,
										"nodeType": "Block",
										"src": "3273:250:9",
										"statements": [
											{
												"id": 1215,
												"nodeType": "UncheckedBlock",
												"src": "3426:90:9",
												"statements": [
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1213,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1210,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1208,
																	"name": "_currentIndex",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1058,
																	"src": "3458:13:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 1209,
																	"name": "_burnCounter",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1060,
																	"src": "3474:12:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3458:28:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1211,
																	"name": "_startTokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1201,
																	"src": "3489:13:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																		"typeString": "function () view returns (uint256)"
																	}
																},
																"id": 1212,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3489:15:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3458:46:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1207,
														"id": 1214,
														"nodeType": "Return",
														"src": "3451:53:9"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1202,
										"nodeType": "StructuredDocumentation",
										"src": "3085:120:9",
										"text": " @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens."
									},
									"functionSelector": "18160ddd",
									"id": 1217,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "3220:11:9",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1204,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3246:8:9"
									},
									"parameters": {
										"id": 1203,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3231:2:9"
									},
									"returnParameters": {
										"id": 1207,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1206,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1217,
												"src": "3264:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1205,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3264:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3263:9:9"
									},
									"scope": 2496,
									"src": "3211:312:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1229,
										"nodeType": "Block",
										"src": "3672:227:9",
										"statements": [
											{
												"id": 1228,
												"nodeType": "UncheckedBlock",
												"src": "3817:75:9",
												"statements": [
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1226,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1223,
																"name": "_currentIndex",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1058,
																"src": "3849:13:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1224,
																	"name": "_startTokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1201,
																	"src": "3865:13:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																		"typeString": "function () view returns (uint256)"
																	}
																},
																"id": 1225,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3865:15:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3849:31:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1222,
														"id": 1227,
														"nodeType": "Return",
														"src": "3842:38:9"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1218,
										"nodeType": "StructuredDocumentation",
										"src": "3531:79:9",
										"text": " Returns the total amount of tokens minted in the contract."
									},
									"id": 1230,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_totalMinted",
									"nameLocation": "3625:12:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1219,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3637:2:9"
									},
									"returnParameters": {
										"id": 1222,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1221,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1230,
												"src": "3663:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1220,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3663:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3662:9:9"
									},
									"scope": 2496,
									"src": "3616:283:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										703,
										715
									],
									"body": {
										"id": 1260,
										"nodeType": "Block",
										"src": "4079:197:9",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1258,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"id": 1253,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															},
															"id": 1246,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1241,
																"name": "interfaceId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1233,
																"src": "4110:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1243,
																			"name": "IERC721",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 115,
																			"src": "4130:7:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC721_$115_$",
																				"typeString": "type(contract IERC721)"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_type$_t_contract$_IERC721_$115_$",
																				"typeString": "type(contract IERC721)"
																			}
																		],
																		"id": 1242,
																		"name": "type",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967269,
																		"src": "4125:4:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																			"typeString": "function () pure"
																		}
																	},
																	"id": 1244,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4125:13:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_meta_type_t_contract$_IERC721_$115",
																		"typeString": "type(contract IERC721)"
																	}
																},
																"id": 1245,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "interfaceId",
																"nodeType": "MemberAccess",
																"src": "4125:25:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"src": "4110:40:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "||",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															},
															"id": 1252,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1247,
																"name": "interfaceId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1233,
																"src": "4167:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1249,
																			"name": "IERC721Metadata",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 160,
																			"src": "4187:15:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC721Metadata_$160_$",
																				"typeString": "type(contract IERC721Metadata)"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_type$_t_contract$_IERC721Metadata_$160_$",
																				"typeString": "type(contract IERC721Metadata)"
																			}
																		],
																		"id": 1248,
																		"name": "type",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967269,
																		"src": "4182:4:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																			"typeString": "function () pure"
																		}
																	},
																	"id": 1250,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4182:21:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_meta_type_t_contract$_IERC721Metadata_$160",
																		"typeString": "type(contract IERC721Metadata)"
																	}
																},
																"id": 1251,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "interfaceId",
																"nodeType": "MemberAccess",
																"src": "4182:33:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"src": "4167:48:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"src": "4110:105:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"arguments": [
															{
																"id": 1256,
																"name": "interfaceId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1233,
																"src": "4256:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															],
															"expression": {
																"id": 1254,
																"name": "super",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967271,
																"src": "4232:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_super$_ERC721A_$2496_$",
																	"typeString": "type(contract super ERC721A)"
																}
															},
															"id": 1255,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "supportsInterface",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 703,
															"src": "4232:23:9",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_bytes4_$returns$_t_bool_$",
																"typeString": "function (bytes4) view returns (bool)"
															}
														},
														"id": 1257,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4232:36:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "4110:158:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1240,
												"id": 1259,
												"nodeType": "Return",
												"src": "4090:178:9"
											}
										]
									},
									"documentation": {
										"id": 1231,
										"nodeType": "StructuredDocumentation",
										"src": "3907:58:9",
										"text": " @dev See {IERC165-supportsInterface}."
									},
									"functionSelector": "01ffc9a7",
									"id": 1261,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "3980:17:9",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1237,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1235,
												"name": "ERC165",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 704,
												"src": "4047:6:9"
											},
											{
												"id": 1236,
												"name": "IERC165",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 716,
												"src": "4055:7:9"
											}
										],
										"src": "4038:25:9"
									},
									"parameters": {
										"id": 1234,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1233,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "4005:11:9",
												"nodeType": "VariableDeclaration",
												"scope": 1261,
												"src": "3998:18:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 1232,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "3998:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3997:20:9"
									},
									"returnParameters": {
										"id": 1240,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1239,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1261,
												"src": "4073:4:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1238,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4073:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4072:6:9"
									},
									"scope": 2496,
									"src": "3971:305:9",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										40
									],
									"body": {
										"id": 1288,
										"nodeType": "Block",
										"src": "4413:133:9",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1275,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1270,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1264,
														"src": "4428:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1273,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4445:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1272,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "4437:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1271,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "4437:7:9",
																"typeDescriptions": {}
															}
														},
														"id": 1274,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4437:10:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "4428:19:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1279,
												"nodeType": "IfStatement",
												"src": "4424:60:9",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1276,
															"name": "BalanceQueryForZeroAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2531,
															"src": "4456:26:9",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1277,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4456:28:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1278,
													"nodeType": "RevertStatement",
													"src": "4449:35:9"
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"baseExpression": {
																	"id": 1282,
																	"name": "_addressData",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1074,
																	"src": "4510:12:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$2571_storage_$",
																		"typeString": "mapping(address => struct IERC721A.AddressData storage ref)"
																	}
																},
																"id": 1284,
																"indexExpression": {
																	"id": 1283,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1264,
																	"src": "4523:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "4510:19:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_AddressData_$2571_storage",
																	"typeString": "struct IERC721A.AddressData storage ref"
																}
															},
															"id": 1285,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "balance",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2564,
															"src": "4510:27:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														],
														"id": 1281,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "4502:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_uint256_$",
															"typeString": "type(uint256)"
														},
														"typeName": {
															"id": 1280,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4502:7:9",
															"typeDescriptions": {}
														}
													},
													"id": 1286,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4502:36:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1269,
												"id": 1287,
												"nodeType": "Return",
												"src": "4495:43:9"
											}
										]
									},
									"documentation": {
										"id": 1262,
										"nodeType": "StructuredDocumentation",
										"src": "4284:50:9",
										"text": " @dev See {IERC721-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 1289,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "4349:9:9",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1266,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4386:8:9"
									},
									"parameters": {
										"id": 1265,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1264,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4367:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1289,
												"src": "4359:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1263,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4359:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4358:15:9"
									},
									"returnParameters": {
										"id": 1269,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1268,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1289,
												"src": "4404:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1267,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4404:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4403:9:9"
									},
									"scope": 2496,
									"src": "4340:206:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1305,
										"nodeType": "Block",
										"src": "4698:67:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"baseExpression": {
																	"id": 1299,
																	"name": "_addressData",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1074,
																	"src": "4724:12:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$2571_storage_$",
																		"typeString": "mapping(address => struct IERC721A.AddressData storage ref)"
																	}
																},
																"id": 1301,
																"indexExpression": {
																	"id": 1300,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1292,
																	"src": "4737:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "4724:19:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_AddressData_$2571_storage",
																	"typeString": "struct IERC721A.AddressData storage ref"
																}
															},
															"id": 1302,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "numberMinted",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2566,
															"src": "4724:32:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														],
														"id": 1298,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "4716:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_uint256_$",
															"typeString": "type(uint256)"
														},
														"typeName": {
															"id": 1297,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4716:7:9",
															"typeDescriptions": {}
														}
													},
													"id": 1303,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4716:41:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1296,
												"id": 1304,
												"nodeType": "Return",
												"src": "4709:48:9"
											}
										]
									},
									"documentation": {
										"id": 1290,
										"nodeType": "StructuredDocumentation",
										"src": "4554:68:9",
										"text": " Returns the number of tokens minted by `owner`."
									},
									"id": 1306,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_numberMinted",
									"nameLocation": "4637:13:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1293,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1292,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4659:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1306,
												"src": "4651:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1291,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4651:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4650:15:9"
									},
									"returnParameters": {
										"id": 1296,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1295,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1306,
												"src": "4689:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1294,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4689:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4688:9:9"
									},
									"scope": 2496,
									"src": "4628:137:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1322,
										"nodeType": "Block",
										"src": "4933:67:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"baseExpression": {
																	"id": 1316,
																	"name": "_addressData",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1074,
																	"src": "4959:12:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$2571_storage_$",
																		"typeString": "mapping(address => struct IERC721A.AddressData storage ref)"
																	}
																},
																"id": 1318,
																"indexExpression": {
																	"id": 1317,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1309,
																	"src": "4972:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "4959:19:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_AddressData_$2571_storage",
																	"typeString": "struct IERC721A.AddressData storage ref"
																}
															},
															"id": 1319,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "numberBurned",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2568,
															"src": "4959:32:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														],
														"id": 1315,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "4951:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_uint256_$",
															"typeString": "type(uint256)"
														},
														"typeName": {
															"id": 1314,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4951:7:9",
															"typeDescriptions": {}
														}
													},
													"id": 1320,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4951:41:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1313,
												"id": 1321,
												"nodeType": "Return",
												"src": "4944:48:9"
											}
										]
									},
									"documentation": {
										"id": 1307,
										"nodeType": "StructuredDocumentation",
										"src": "4773:84:9",
										"text": " Returns the number of tokens burned by or on behalf of `owner`."
									},
									"id": 1323,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_numberBurned",
									"nameLocation": "4872:13:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1310,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1309,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4894:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1323,
												"src": "4886:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1308,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4886:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4885:15:9"
									},
									"returnParameters": {
										"id": 1313,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1312,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1323,
												"src": "4924:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1311,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4924:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4923:9:9"
									},
									"scope": 2496,
									"src": "4863:137:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1336,
										"nodeType": "Block",
										"src": "5181:49:9",
										"statements": [
											{
												"expression": {
													"expression": {
														"baseExpression": {
															"id": 1331,
															"name": "_addressData",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1074,
															"src": "5199:12:9",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$2571_storage_$",
																"typeString": "mapping(address => struct IERC721A.AddressData storage ref)"
															}
														},
														"id": 1333,
														"indexExpression": {
															"id": 1332,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1326,
															"src": "5212:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "5199:19:9",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_AddressData_$2571_storage",
															"typeString": "struct IERC721A.AddressData storage ref"
														}
													},
													"id": 1334,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "aux",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 2570,
													"src": "5199:23:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"functionReturnParameters": 1330,
												"id": 1335,
												"nodeType": "Return",
												"src": "5192:30:9"
											}
										]
									},
									"documentation": {
										"id": 1324,
										"nodeType": "StructuredDocumentation",
										"src": "5008:104:9",
										"text": " Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used)."
									},
									"id": 1337,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getAux",
									"nameLocation": "5127:7:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1327,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1326,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "5143:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1337,
												"src": "5135:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1325,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5135:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5134:15:9"
									},
									"returnParameters": {
										"id": 1330,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1329,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1337,
												"src": "5173:6:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 1328,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "5173:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5172:8:9"
									},
									"scope": 2496,
									"src": "5118:112:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1352,
										"nodeType": "Block",
										"src": "5471:48:9",
										"statements": [
											{
												"expression": {
													"id": 1350,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1345,
																"name": "_addressData",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1074,
																"src": "5482:12:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$2571_storage_$",
																	"typeString": "mapping(address => struct IERC721A.AddressData storage ref)"
																}
															},
															"id": 1347,
															"indexExpression": {
																"id": 1346,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1340,
																"src": "5495:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "5482:19:9",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_AddressData_$2571_storage",
																"typeString": "struct IERC721A.AddressData storage ref"
															}
														},
														"id": 1348,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "aux",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2570,
														"src": "5482:23:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1349,
														"name": "aux",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1342,
														"src": "5508:3:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"src": "5482:29:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"id": 1351,
												"nodeType": "ExpressionStatement",
												"src": "5482:29:9"
											}
										]
									},
									"documentation": {
										"id": 1338,
										"nodeType": "StructuredDocumentation",
										"src": "5238:174:9",
										"text": " Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\n If there are multiple variables, please pack them into a uint64."
									},
									"id": 1353,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_setAux",
									"nameLocation": "5427:7:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1343,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1340,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "5443:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1353,
												"src": "5435:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1339,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5435:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1342,
												"mutability": "mutable",
												"name": "aux",
												"nameLocation": "5457:3:9",
												"nodeType": "VariableDeclaration",
												"scope": 1353,
												"src": "5450:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 1341,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "5450:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5434:27:9"
									},
									"returnParameters": {
										"id": 1344,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5471:0:9"
									},
									"scope": 2496,
									"src": "5418:101:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1426,
										"nodeType": "Block",
										"src": "5806:1026:9",
										"statements": [
											{
												"assignments": [
													1363
												],
												"declarations": [
													{
														"constant": false,
														"id": 1363,
														"mutability": "mutable",
														"name": "curr",
														"nameLocation": "5825:4:9",
														"nodeType": "VariableDeclaration",
														"scope": 1426,
														"src": "5817:12:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1362,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5817:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1365,
												"initialValue": {
													"id": 1364,
													"name": "tokenId",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1356,
													"src": "5832:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5817:22:9"
											},
											{
												"id": 1422,
												"nodeType": "UncheckedBlock",
												"src": "5852:924:9",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1369,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1366,
																	"name": "_startTokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1201,
																	"src": "5881:13:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																		"typeString": "function () view returns (uint256)"
																	}
																},
																"id": 1367,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5881:15:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 1368,
																"name": "curr",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1363,
																"src": "5900:4:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5881:23:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1421,
														"nodeType": "IfStatement",
														"src": "5877:888:9",
														"trueBody": {
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1372,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1370,
																	"name": "curr",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1363,
																	"src": "5910:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 1371,
																	"name": "_currentIndex",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1058,
																	"src": "5917:13:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5910:20:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1420,
															"nodeType": "IfStatement",
															"src": "5906:859:9",
															"trueBody": {
																"id": 1419,
																"nodeType": "Block",
																"src": "5932:833:9",
																"statements": [
																	{
																		"assignments": [
																			1375
																		],
																		"declarations": [
																			{
																				"constant": false,
																				"id": 1375,
																				"mutability": "mutable",
																				"name": "ownership",
																				"nameLocation": "5973:9:9",
																				"nodeType": "VariableDeclaration",
																				"scope": 1419,
																				"src": "5951:31:9",
																				"stateVariable": false,
																				"storageLocation": "memory",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_TokenOwnership_$2562_memory_ptr",
																					"typeString": "struct IERC721A.TokenOwnership"
																				},
																				"typeName": {
																					"id": 1374,
																					"nodeType": "UserDefinedTypeName",
																					"pathNode": {
																						"id": 1373,
																						"name": "TokenOwnership",
																						"nodeType": "IdentifierPath",
																						"referencedDeclaration": 2562,
																						"src": "5951:14:9"
																					},
																					"referencedDeclaration": 2562,
																					"src": "5951:14:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_TokenOwnership_$2562_storage_ptr",
																						"typeString": "struct IERC721A.TokenOwnership"
																					}
																				},
																				"visibility": "internal"
																			}
																		],
																		"id": 1379,
																		"initialValue": {
																			"baseExpression": {
																				"id": 1376,
																				"name": "_ownerships",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1069,
																				"src": "5985:11:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$2562_storage_$",
																					"typeString": "mapping(uint256 => struct IERC721A.TokenOwnership storage ref)"
																				}
																			},
																			"id": 1378,
																			"indexExpression": {
																				"id": 1377,
																				"name": "curr",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1363,
																				"src": "5997:4:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "5985:17:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_TokenOwnership_$2562_storage",
																				"typeString": "struct IERC721A.TokenOwnership storage ref"
																			}
																		},
																		"nodeType": "VariableDeclarationStatement",
																		"src": "5951:51:9"
																	},
																	{
																		"condition": {
																			"id": 1382,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "UnaryOperation",
																			"operator": "!",
																			"prefix": true,
																			"src": "6025:17:9",
																			"subExpression": {
																				"expression": {
																					"id": 1380,
																					"name": "ownership",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1375,
																					"src": "6026:9:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_TokenOwnership_$2562_memory_ptr",
																						"typeString": "struct IERC721A.TokenOwnership memory"
																					}
																				},
																				"id": 1381,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "burned",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 2561,
																				"src": "6026:16:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"id": 1418,
																		"nodeType": "IfStatement",
																		"src": "6021:729:9",
																		"trueBody": {
																			"id": 1417,
																			"nodeType": "Block",
																			"src": "6044:706:9",
																			"statements": [
																				{
																					"condition": {
																						"commonType": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						},
																						"id": 1389,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"expression": {
																								"id": 1383,
																								"name": "ownership",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1375,
																								"src": "6071:9:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_struct$_TokenOwnership_$2562_memory_ptr",
																									"typeString": "struct IERC721A.TokenOwnership memory"
																								}
																							},
																							"id": 1384,
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberName": "addr",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 2557,
																							"src": "6071:14:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "!=",
																						"rightExpression": {
																							"arguments": [
																								{
																									"hexValue": "30",
																									"id": 1387,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "6097:1:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_0_by_1",
																										"typeString": "int_const 0"
																									},
																									"value": "0"
																								}
																							],
																							"expression": {
																								"argumentTypes": [
																									{
																										"typeIdentifier": "t_rational_0_by_1",
																										"typeString": "int_const 0"
																									}
																								],
																								"id": 1386,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"lValueRequested": false,
																								"nodeType": "ElementaryTypeNameExpression",
																								"src": "6089:7:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_type$_t_address_$",
																									"typeString": "type(address)"
																								},
																								"typeName": {
																									"id": 1385,
																									"name": "address",
																									"nodeType": "ElementaryTypeName",
																									"src": "6089:7:9",
																									"typeDescriptions": {}
																								}
																							},
																							"id": 1388,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "typeConversion",
																							"lValueRequested": false,
																							"names": [],
																							"nodeType": "FunctionCall",
																							"src": "6089:10:9",
																							"tryCall": false,
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						},
																						"src": "6071:28:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bool",
																							"typeString": "bool"
																						}
																					},
																					"id": 1393,
																					"nodeType": "IfStatement",
																					"src": "6067:101:9",
																					"trueBody": {
																						"id": 1392,
																						"nodeType": "Block",
																						"src": "6101:67:9",
																						"statements": [
																							{
																								"expression": {
																									"id": 1390,
																									"name": "ownership",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1375,
																									"src": "6135:9:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_struct$_TokenOwnership_$2562_memory_ptr",
																										"typeString": "struct IERC721A.TokenOwnership memory"
																									}
																								},
																								"functionReturnParameters": 1361,
																								"id": 1391,
																								"nodeType": "Return",
																								"src": "6128:16:9"
																							}
																						]
																					}
																				},
																				{
																					"body": {
																						"id": 1415,
																						"nodeType": "Block",
																						"src": "6483:248:9",
																						"statements": [
																							{
																								"expression": {
																									"id": 1396,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "UnaryOperation",
																									"operator": "--",
																									"prefix": false,
																									"src": "6510:6:9",
																									"subExpression": {
																										"id": 1395,
																										"name": "curr",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1363,
																										"src": "6510:4:9",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"id": 1397,
																								"nodeType": "ExpressionStatement",
																								"src": "6510:6:9"
																							},
																							{
																								"expression": {
																									"id": 1402,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"leftHandSide": {
																										"id": 1398,
																										"name": "ownership",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1375,
																										"src": "6543:9:9",
																										"typeDescriptions": {
																											"typeIdentifier": "t_struct$_TokenOwnership_$2562_memory_ptr",
																											"typeString": "struct IERC721A.TokenOwnership memory"
																										}
																									},
																									"nodeType": "Assignment",
																									"operator": "=",
																									"rightHandSide": {
																										"baseExpression": {
																											"id": 1399,
																											"name": "_ownerships",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 1069,
																											"src": "6555:11:9",
																											"typeDescriptions": {
																												"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$2562_storage_$",
																												"typeString": "mapping(uint256 => struct IERC721A.TokenOwnership storage ref)"
																											}
																										},
																										"id": 1401,
																										"indexExpression": {
																											"id": 1400,
																											"name": "curr",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 1363,
																											"src": "6567:4:9",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										},
																										"isConstant": false,
																										"isLValue": true,
																										"isPure": false,
																										"lValueRequested": false,
																										"nodeType": "IndexAccess",
																										"src": "6555:17:9",
																										"typeDescriptions": {
																											"typeIdentifier": "t_struct$_TokenOwnership_$2562_storage",
																											"typeString": "struct IERC721A.TokenOwnership storage ref"
																										}
																									},
																									"src": "6543:29:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_struct$_TokenOwnership_$2562_memory_ptr",
																										"typeString": "struct IERC721A.TokenOwnership memory"
																									}
																								},
																								"id": 1403,
																								"nodeType": "ExpressionStatement",
																								"src": "6543:29:9"
																							},
																							{
																								"condition": {
																									"commonType": {
																										"typeIdentifier": "t_address",
																										"typeString": "address"
																									},
																									"id": 1410,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"leftExpression": {
																										"expression": {
																											"id": 1404,
																											"name": "ownership",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 1375,
																											"src": "6603:9:9",
																											"typeDescriptions": {
																												"typeIdentifier": "t_struct$_TokenOwnership_$2562_memory_ptr",
																												"typeString": "struct IERC721A.TokenOwnership memory"
																											}
																										},
																										"id": 1405,
																										"isConstant": false,
																										"isLValue": true,
																										"isPure": false,
																										"lValueRequested": false,
																										"memberName": "addr",
																										"nodeType": "MemberAccess",
																										"referencedDeclaration": 2557,
																										"src": "6603:14:9",
																										"typeDescriptions": {
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										}
																									},
																									"nodeType": "BinaryOperation",
																									"operator": "!=",
																									"rightExpression": {
																										"arguments": [
																											{
																												"hexValue": "30",
																												"id": 1408,
																												"isConstant": false,
																												"isLValue": false,
																												"isPure": true,
																												"kind": "number",
																												"lValueRequested": false,
																												"nodeType": "Literal",
																												"src": "6629:1:9",
																												"typeDescriptions": {
																													"typeIdentifier": "t_rational_0_by_1",
																													"typeString": "int_const 0"
																												},
																												"value": "0"
																											}
																										],
																										"expression": {
																											"argumentTypes": [
																												{
																													"typeIdentifier": "t_rational_0_by_1",
																													"typeString": "int_const 0"
																												}
																											],
																											"id": 1407,
																											"isConstant": false,
																											"isLValue": false,
																											"isPure": true,
																											"lValueRequested": false,
																											"nodeType": "ElementaryTypeNameExpression",
																											"src": "6621:7:9",
																											"typeDescriptions": {
																												"typeIdentifier": "t_type$_t_address_$",
																												"typeString": "type(address)"
																											},
																											"typeName": {
																												"id": 1406,
																												"name": "address",
																												"nodeType": "ElementaryTypeName",
																												"src": "6621:7:9",
																												"typeDescriptions": {}
																											}
																										},
																										"id": 1409,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"kind": "typeConversion",
																										"lValueRequested": false,
																										"names": [],
																										"nodeType": "FunctionCall",
																										"src": "6621:10:9",
																										"tryCall": false,
																										"typeDescriptions": {
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										}
																									},
																									"src": "6603:28:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_bool",
																										"typeString": "bool"
																									}
																								},
																								"id": 1414,
																								"nodeType": "IfStatement",
																								"src": "6599:109:9",
																								"trueBody": {
																									"id": 1413,
																									"nodeType": "Block",
																									"src": "6633:75:9",
																									"statements": [
																										{
																											"expression": {
																												"id": 1411,
																												"name": "ownership",
																												"nodeType": "Identifier",
																												"overloadedDeclarations": [],
																												"referencedDeclaration": 1375,
																												"src": "6671:9:9",
																												"typeDescriptions": {
																													"typeIdentifier": "t_struct$_TokenOwnership_$2562_memory_ptr",
																													"typeString": "struct IERC721A.TokenOwnership memory"
																												}
																											},
																											"functionReturnParameters": 1361,
																											"id": 1412,
																											"nodeType": "Return",
																											"src": "6664:16:9"
																										}
																									]
																								}
																							}
																						]
																					},
																					"condition": {
																						"hexValue": "74727565",
																						"id": 1394,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "bool",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "6477:4:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bool",
																							"typeString": "bool"
																						},
																						"value": "true"
																					},
																					"id": 1416,
																					"nodeType": "WhileStatement",
																					"src": "6470:261:9"
																				}
																			]
																		}
																	}
																]
															}
														}
													}
												]
											},
											{
												"errorCall": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1423,
														"name": "OwnerQueryForNonexistentToken",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2540,
														"src": "6793:29:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_error_pure$__$returns$__$",
															"typeString": "function () pure"
														}
													},
													"id": 1424,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6793:31:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1425,
												"nodeType": "RevertStatement",
												"src": "6786:38:9"
											}
										]
									},
									"documentation": {
										"id": 1354,
										"nodeType": "StructuredDocumentation",
										"src": "5527:188:9",
										"text": " Gas spent here starts off proportional to the maximum mint batch size.\n It gradually moves to O(1) as tokens get transferred around in the collection over time."
									},
									"id": 1427,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_ownershipOf",
									"nameLocation": "5730:12:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1357,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1356,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "5751:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1427,
												"src": "5743:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1355,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5743:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5742:17:9"
									},
									"returnParameters": {
										"id": 1361,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1360,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1427,
												"src": "5783:21:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_TokenOwnership_$2562_memory_ptr",
													"typeString": "struct IERC721A.TokenOwnership"
												},
												"typeName": {
													"id": 1359,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1358,
														"name": "TokenOwnership",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2562,
														"src": "5783:14:9"
													},
													"referencedDeclaration": 2562,
													"src": "5783:14:9",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_TokenOwnership_$2562_storage_ptr",
														"typeString": "struct IERC721A.TokenOwnership"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5782:23:9"
									},
									"scope": 2496,
									"src": "5721:1111:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										48
									],
									"body": {
										"id": 1441,
										"nodeType": "Block",
										"src": "6967:52:9",
										"statements": [
											{
												"expression": {
													"expression": {
														"arguments": [
															{
																"id": 1437,
																"name": "tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1430,
																"src": "6998:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 1436,
															"name": "_ownershipOf",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1427,
															"src": "6985:12:9",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_struct$_TokenOwnership_$2562_memory_ptr_$",
																"typeString": "function (uint256) view returns (struct IERC721A.TokenOwnership memory)"
															}
														},
														"id": 1438,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6985:21:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_TokenOwnership_$2562_memory_ptr",
															"typeString": "struct IERC721A.TokenOwnership memory"
														}
													},
													"id": 1439,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "addr",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 2557,
													"src": "6985:26:9",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1435,
												"id": 1440,
												"nodeType": "Return",
												"src": "6978:33:9"
											}
										]
									},
									"documentation": {
										"id": 1428,
										"nodeType": "StructuredDocumentation",
										"src": "6840:48:9",
										"text": " @dev See {IERC721-ownerOf}."
									},
									"functionSelector": "6352211e",
									"id": 1442,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "ownerOf",
									"nameLocation": "6903:7:9",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1432,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "6940:8:9"
									},
									"parameters": {
										"id": 1431,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1430,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "6919:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1442,
												"src": "6911:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1429,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6911:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6910:17:9"
									},
									"returnParameters": {
										"id": 1435,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1434,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1442,
												"src": "6958:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1433,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6958:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6957:9:9"
									},
									"scope": 2496,
									"src": "6894:125:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										145
									],
									"body": {
										"id": 1451,
										"nodeType": "Block",
										"src": "7155:31:9",
										"statements": [
											{
												"expression": {
													"id": 1449,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1062,
													"src": "7173:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 1448,
												"id": 1450,
												"nodeType": "Return",
												"src": "7166:12:9"
											}
										]
									},
									"documentation": {
										"id": 1443,
										"nodeType": "StructuredDocumentation",
										"src": "7027:53:9",
										"text": " @dev See {IERC721Metadata-name}."
									},
									"functionSelector": "06fdde03",
									"id": 1452,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "7095:4:9",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1445,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "7122:8:9"
									},
									"parameters": {
										"id": 1444,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7099:2:9"
									},
									"returnParameters": {
										"id": 1448,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1447,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1452,
												"src": "7140:13:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1446,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7140:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7139:15:9"
									},
									"scope": 2496,
									"src": "7086:100:9",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										151
									],
									"body": {
										"id": 1461,
										"nodeType": "Block",
										"src": "7326:33:9",
										"statements": [
											{
												"expression": {
													"id": 1459,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1064,
													"src": "7344:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 1458,
												"id": 1460,
												"nodeType": "Return",
												"src": "7337:14:9"
											}
										]
									},
									"documentation": {
										"id": 1453,
										"nodeType": "StructuredDocumentation",
										"src": "7194:55:9",
										"text": " @dev See {IERC721Metadata-symbol}."
									},
									"functionSelector": "95d89b41",
									"id": 1462,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "7264:6:9",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1455,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "7293:8:9"
									},
									"parameters": {
										"id": 1454,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7270:2:9"
									},
									"returnParameters": {
										"id": 1458,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1457,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1462,
												"src": "7311:13:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1456,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7311:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7310:15:9"
									},
									"scope": 2496,
									"src": "7255:104:9",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										159
									],
									"body": {
										"id": 1504,
										"nodeType": "Block",
										"src": "7518:230:9",
										"statements": [
											{
												"condition": {
													"id": 1474,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "7533:17:9",
													"subExpression": {
														"arguments": [
															{
																"id": 1472,
																"name": "tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1465,
																"src": "7542:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 1471,
															"name": "_exists",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1731,
															"src": "7534:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
																"typeString": "function (uint256) view returns (bool)"
															}
														},
														"id": 1473,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7534:16:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1478,
												"nodeType": "IfStatement",
												"src": "7529:59:9",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1475,
															"name": "URIQueryForNonexistentToken",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2555,
															"src": "7559:27:9",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1476,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7559:29:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1477,
													"nodeType": "RevertStatement",
													"src": "7552:36:9"
												}
											},
											{
												"assignments": [
													1480
												],
												"declarations": [
													{
														"constant": false,
														"id": 1480,
														"mutability": "mutable",
														"name": "baseURI",
														"nameLocation": "7615:7:9",
														"nodeType": "VariableDeclaration",
														"scope": 1504,
														"src": "7601:21:9",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string"
														},
														"typeName": {
															"id": 1479,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "7601:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage_ptr",
																"typeString": "string"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1483,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1481,
														"name": "_baseURI",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1514,
														"src": "7625:8:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_string_memory_ptr_$",
															"typeString": "function () view returns (string memory)"
														}
													},
													"id": 1482,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7625:10:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7601:34:9"
											},
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1490,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 1486,
																		"name": "baseURI",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1480,
																		"src": "7659:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1485,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7653:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 1484,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "7653:5:9",
																		"typeDescriptions": {}
																	}
																},
																"id": 1487,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7653:14:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 1488,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "7653:21:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"hexValue": "30",
															"id": 1489,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7678:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "7653:26:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"hexValue": "",
														"id": 1501,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7738:2:9",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
															"typeString": "literal_string \"\""
														},
														"value": ""
													},
													"id": 1502,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "7653:87:9",
													"trueExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 1495,
																		"name": "baseURI",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1480,
																		"src": "7706:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	},
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"expression": {
																				"id": 1496,
																				"name": "tokenId",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1465,
																				"src": "7715:7:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"id": 1497,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "toString",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 562,
																			"src": "7715:16:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$bound_to$_t_uint256_$",
																				"typeString": "function (uint256) pure returns (string memory)"
																			}
																		},
																		"id": 1498,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7715:18:9",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"expression": {
																		"id": 1493,
																		"name": "abi",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967295,
																		"src": "7689:3:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_abi",
																			"typeString": "abi"
																		}
																	},
																	"id": 1494,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberName": "encodePacked",
																	"nodeType": "MemberAccess",
																	"src": "7689:16:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																		"typeString": "function () pure returns (bytes memory)"
																	}
																},
																"id": 1499,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7689:45:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 1492,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "7682:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_string_storage_ptr_$",
																"typeString": "type(string storage pointer)"
															},
															"typeName": {
																"id": 1491,
																"name": "string",
																"nodeType": "ElementaryTypeName",
																"src": "7682:6:9",
																"typeDescriptions": {}
															}
														},
														"id": 1500,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7682:53:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1470,
												"id": 1503,
												"nodeType": "Return",
												"src": "7646:94:9"
											}
										]
									},
									"documentation": {
										"id": 1463,
										"nodeType": "StructuredDocumentation",
										"src": "7367:57:9",
										"text": " @dev See {IERC721Metadata-tokenURI}."
									},
									"functionSelector": "c87b56dd",
									"id": 1505,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tokenURI",
									"nameLocation": "7439:8:9",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1467,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "7485:8:9"
									},
									"parameters": {
										"id": 1466,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1465,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "7456:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1505,
												"src": "7448:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1464,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7448:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7447:17:9"
									},
									"returnParameters": {
										"id": 1470,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1469,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1505,
												"src": "7503:13:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1468,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7503:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7502:15:9"
									},
									"scope": 2496,
									"src": "7430:318:9",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1513,
										"nodeType": "Block",
										"src": "8062:109:9",
										"statements": [
											{
												"expression": {
													"hexValue": "68747470733a2f2f676174657761792e70696e6174612e636c6f75642f697066732f516d6648576b7454625354424e4c7777385a446832716335444b71695a63696b6e6f7137365a665872736f5231762f",
													"id": 1511,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "8080:83:9",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_d8bb5093925f17312ccd69c1ad4eefb61d29f5f451bdf501cef244662be1efab",
														"typeString": "literal_string \"https://gateway.pinata.cloud/ipfs/QmfHWktTbSTBNLww8ZDh2qc5DKqiZciknoq76ZfXrsoR1v/\""
													},
													"value": "https://gateway.pinata.cloud/ipfs/QmfHWktTbSTBNLww8ZDh2qc5DKqiZciknoq76ZfXrsoR1v/"
												},
												"functionReturnParameters": 1510,
												"id": 1512,
												"nodeType": "Return",
												"src": "8073:90:9"
											}
										]
									},
									"documentation": {
										"id": 1506,
										"nodeType": "StructuredDocumentation",
										"src": "7756:234:9",
										"text": " @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n by default, can be overriden in child contracts."
									},
									"id": 1514,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_baseURI",
									"nameLocation": "8005:8:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1507,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8013:2:9"
									},
									"returnParameters": {
										"id": 1510,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1509,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1514,
												"src": "8047:13:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1508,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8047:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8046:15:9"
									},
									"scope": 2496,
									"src": "7996:175:9",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										88
									],
									"body": {
										"id": 1559,
										"nodeType": "Block",
										"src": "8295:310:9",
										"statements": [
											{
												"assignments": [
													1524
												],
												"declarations": [
													{
														"constant": false,
														"id": 1524,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "8314:5:9",
														"nodeType": "VariableDeclaration",
														"scope": 1559,
														"src": "8306:13:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1523,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "8306:7:9",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1529,
												"initialValue": {
													"arguments": [
														{
															"id": 1527,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1519,
															"src": "8338:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1525,
															"name": "ERC721A",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2496,
															"src": "8322:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_ERC721A_$2496_$",
																"typeString": "type(contract ERC721A)"
															}
														},
														"id": 1526,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "ownerOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1442,
														"src": "8322:15:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
															"typeString": "function (uint256) view returns (address)"
														}
													},
													"id": 1528,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8322:24:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8306:40:9"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1532,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1530,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1517,
														"src": "8361:2:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 1531,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1524,
														"src": "8367:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "8361:11:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1536,
												"nodeType": "IfStatement",
												"src": "8357:48:9",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1533,
															"name": "ApprovalToCurrentOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2528,
															"src": "8381:22:9",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1534,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8381:24:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1535,
													"nodeType": "RevertStatement",
													"src": "8374:31:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1540,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1537,
															"name": "_msgSender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 467,
															"src": "8422:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 1538,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8422:12:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 1539,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1524,
														"src": "8438:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "8422:21:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1552,
												"nodeType": "IfStatement",
												"src": "8418:139:9",
												"trueBody": {
													"condition": {
														"id": 1546,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "8448:38:9",
														"subExpression": {
															"arguments": [
																{
																	"id": 1542,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1524,
																	"src": "8466:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 1543,
																		"name": "_msgSender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 467,
																		"src": "8473:10:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																			"typeString": "function () view returns (address)"
																		}
																	},
																	"id": 1544,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8473:12:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1541,
																"name": "isApprovedForAll",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1634,
																"src": "8449:16:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address,address) view returns (bool)"
																}
															},
															"id": 1545,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8449:37:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 1551,
													"nodeType": "IfStatement",
													"src": "8445:112:9",
													"trueBody": {
														"id": 1550,
														"nodeType": "Block",
														"src": "8488:69:9",
														"statements": [
															{
																"errorCall": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 1547,
																		"name": "ApprovalCallerNotOwnerNorApproved",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2519,
																		"src": "8510:33:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_error_pure$__$returns$__$",
																			"typeString": "function () pure"
																		}
																	},
																	"id": 1548,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8510:35:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																},
																"id": 1549,
																"nodeType": "RevertStatement",
																"src": "8503:42:9"
															}
														]
													}
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1554,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1517,
															"src": "8578:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1555,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1519,
															"src": "8582:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1556,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1524,
															"src": "8591:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1553,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2414,
														"src": "8569:8:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$__$",
															"typeString": "function (address,uint256,address)"
														}
													},
													"id": 1557,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8569:28:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1558,
												"nodeType": "ExpressionStatement",
												"src": "8569:28:9"
											}
										]
									},
									"documentation": {
										"id": 1515,
										"nodeType": "StructuredDocumentation",
										"src": "8179:48:9",
										"text": " @dev See {IERC721-approve}."
									},
									"functionSelector": "095ea7b3",
									"id": 1560,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "8242:7:9",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1521,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "8286:8:9"
									},
									"parameters": {
										"id": 1520,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1517,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "8258:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 1560,
												"src": "8250:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1516,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8250:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1519,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "8270:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1560,
												"src": "8262:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1518,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8262:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8249:29:9"
									},
									"returnParameters": {
										"id": 1522,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8295:0:9"
									},
									"scope": 2496,
									"src": "8233:372:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										104
									],
									"body": {
										"id": 1581,
										"nodeType": "Block",
										"src": "8748:127:9",
										"statements": [
											{
												"condition": {
													"id": 1572,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "8763:17:9",
													"subExpression": {
														"arguments": [
															{
																"id": 1570,
																"name": "tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1563,
																"src": "8772:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 1569,
															"name": "_exists",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1731,
															"src": "8764:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
																"typeString": "function (uint256) view returns (bool)"
															}
														},
														"id": 1571,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8764:16:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1576,
												"nodeType": "IfStatement",
												"src": "8759:64:9",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1573,
															"name": "ApprovalQueryForNonexistentToken",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2522,
															"src": "8789:32:9",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1574,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8789:34:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1575,
													"nodeType": "RevertStatement",
													"src": "8782:41:9"
												}
											},
											{
												"expression": {
													"baseExpression": {
														"id": 1577,
														"name": "_tokenApprovals",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1078,
														"src": "8843:15:9",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
															"typeString": "mapping(uint256 => address)"
														}
													},
													"id": 1579,
													"indexExpression": {
														"id": 1578,
														"name": "tokenId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1563,
														"src": "8859:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "8843:24:9",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1568,
												"id": 1580,
												"nodeType": "Return",
												"src": "8836:31:9"
											}
										]
									},
									"documentation": {
										"id": 1561,
										"nodeType": "StructuredDocumentation",
										"src": "8613:52:9",
										"text": " @dev See {IERC721-getApproved}."
									},
									"functionSelector": "081812fc",
									"id": 1582,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getApproved",
									"nameLocation": "8680:11:9",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1565,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "8721:8:9"
									},
									"parameters": {
										"id": 1564,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1563,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "8700:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1582,
												"src": "8692:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1562,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8692:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8691:17:9"
									},
									"returnParameters": {
										"id": 1568,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1567,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1582,
												"src": "8739:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1566,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8739:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8738:9:9"
									},
									"scope": 2496,
									"src": "8671:204:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										96
									],
									"body": {
										"id": 1615,
										"nodeType": "Block",
										"src": "9031:203:9",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1594,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1591,
														"name": "operator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1585,
														"src": "9046:8:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1592,
															"name": "_msgSender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 467,
															"src": "9058:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 1593,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "9058:12:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "9046:24:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1598,
												"nodeType": "IfStatement",
												"src": "9042:54:9",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1595,
															"name": "ApproveToCaller",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2525,
															"src": "9079:15:9",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1596,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "9079:17:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1597,
													"nodeType": "RevertStatement",
													"src": "9072:24:9"
												}
											},
											{
												"expression": {
													"id": 1606,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 1599,
																"name": "_operatorApprovals",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1084,
																"src": "9109:18:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
																	"typeString": "mapping(address => mapping(address => bool))"
																}
															},
															"id": 1603,
															"indexExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1600,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 467,
																	"src": "9128:10:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 1601,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9128:12:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "9109:32:9",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 1604,
														"indexExpression": {
															"id": 1602,
															"name": "operator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1585,
															"src": "9142:8:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "9109:42:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1605,
														"name": "approved",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1587,
														"src": "9154:8:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "9109:53:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1607,
												"nodeType": "ExpressionStatement",
												"src": "9109:53:9"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1609,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 467,
																"src": "9193:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1610,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9193:12:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1611,
															"name": "operator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1585,
															"src": "9207:8:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1612,
															"name": "approved",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1587,
															"src": "9217:8:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1608,
														"name": "ApprovalForAll",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 32,
														"src": "9178:14:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$",
															"typeString": "function (address,address,bool)"
														}
													},
													"id": 1613,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9178:48:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1614,
												"nodeType": "EmitStatement",
												"src": "9173:53:9"
											}
										]
									},
									"documentation": {
										"id": 1583,
										"nodeType": "StructuredDocumentation",
										"src": "8883:58:9",
										"text": " @dev See {IERC721-setApprovalForAll}."
									},
									"functionSelector": "a22cb465",
									"id": 1616,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nameLocation": "8956:17:9",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1589,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "9022:8:9"
									},
									"parameters": {
										"id": 1588,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1585,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "8982:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 1616,
												"src": "8974:16:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1584,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8974:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1587,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "8997:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 1616,
												"src": "8992:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1586,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8992:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8973:33:9"
									},
									"returnParameters": {
										"id": 1590,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9031:0:9"
									},
									"scope": 2496,
									"src": "8947:287:9",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										114
									],
									"body": {
										"id": 1633,
										"nodeType": "Block",
										"src": "9408:61:9",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 1627,
															"name": "_operatorApprovals",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1084,
															"src": "9426:18:9",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
																"typeString": "mapping(address => mapping(address => bool))"
															}
														},
														"id": 1629,
														"indexExpression": {
															"id": 1628,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1619,
															"src": "9445:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "9426:25:9",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
															"typeString": "mapping(address => bool)"
														}
													},
													"id": 1631,
													"indexExpression": {
														"id": 1630,
														"name": "operator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1621,
														"src": "9452:8:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "9426:35:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1626,
												"id": 1632,
												"nodeType": "Return",
												"src": "9419:42:9"
											}
										]
									},
									"documentation": {
										"id": 1617,
										"nodeType": "StructuredDocumentation",
										"src": "9242:57:9",
										"text": " @dev See {IERC721-isApprovedForAll}."
									},
									"functionSelector": "e985e9c5",
									"id": 1634,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nameLocation": "9314:16:9",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1623,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "9384:8:9"
									},
									"parameters": {
										"id": 1622,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1619,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "9339:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1634,
												"src": "9331:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1618,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9331:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1621,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "9354:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 1634,
												"src": "9346:16:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1620,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9346:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9330:33:9"
									},
									"returnParameters": {
										"id": 1626,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1625,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1634,
												"src": "9402:4:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1624,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "9402:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9401:6:9"
									},
									"scope": 2496,
									"src": "9305:164:9",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										80
									],
									"body": {
										"id": 1651,
										"nodeType": "Block",
										"src": "9659:47:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1646,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1637,
															"src": "9680:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1647,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1639,
															"src": "9686:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1648,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1641,
															"src": "9690:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1645,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2197,
														"src": "9670:9:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1649,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9670:28:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1650,
												"nodeType": "ExpressionStatement",
												"src": "9670:28:9"
											}
										]
									},
									"documentation": {
										"id": 1635,
										"nodeType": "StructuredDocumentation",
										"src": "9477:53:9",
										"text": " @dev See {IERC721-transferFrom}."
									},
									"functionSelector": "23b872dd",
									"id": 1652,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "9545:12:9",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1643,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "9650:8:9"
									},
									"parameters": {
										"id": 1642,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1637,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "9576:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1652,
												"src": "9568:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1636,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9568:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1639,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "9599:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 1652,
												"src": "9591:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1638,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9591:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1641,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "9620:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1652,
												"src": "9612:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1640,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9612:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9557:77:9"
									},
									"returnParameters": {
										"id": 1644,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9659:0:9"
									},
									"scope": 2496,
									"src": "9536:170:9",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										70
									],
									"body": {
										"id": 1670,
										"nodeType": "Block",
										"src": "9904:58:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1664,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1655,
															"src": "9932:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1665,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1657,
															"src": "9938:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1666,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1659,
															"src": "9942:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "",
															"id": 1667,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9951:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"id": 1663,
														"name": "safeTransferFrom",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1671,
															1707
														],
														"referencedDeclaration": 1707,
														"src": "9915:16:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (address,address,uint256,bytes memory)"
														}
													},
													"id": 1668,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9915:39:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1669,
												"nodeType": "ExpressionStatement",
												"src": "9915:39:9"
											}
										]
									},
									"documentation": {
										"id": 1653,
										"nodeType": "StructuredDocumentation",
										"src": "9714:57:9",
										"text": " @dev See {IERC721-safeTransferFrom}."
									},
									"functionSelector": "42842e0e",
									"id": 1671,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "9786:16:9",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1661,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "9895:8:9"
									},
									"parameters": {
										"id": 1660,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1655,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "9821:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1671,
												"src": "9813:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1654,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9813:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1657,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "9844:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 1671,
												"src": "9836:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1656,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9836:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1659,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "9865:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1671,
												"src": "9857:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1658,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9857:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9802:77:9"
									},
									"returnParameters": {
										"id": 1662,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9904:0:9"
									},
									"scope": 2496,
									"src": "9777:185:9",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										60
									],
									"body": {
										"id": 1706,
										"nodeType": "Block",
										"src": "10189:214:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1685,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1674,
															"src": "10210:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1686,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1676,
															"src": "10216:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1687,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1678,
															"src": "10220:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1684,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2197,
														"src": "10200:9:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1688,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10200:28:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1689,
												"nodeType": "ExpressionStatement",
												"src": "10200:28:9"
											},
											{
												"condition": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"id": 1690,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1676,
															"src": "10243:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1691,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "isContract",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 178,
														"src": "10243:13:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$bound_to$_t_address_$",
															"typeString": "function (address) view returns (bool)"
														}
													},
													"id": 1692,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10243:15:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1705,
												"nodeType": "IfStatement",
												"src": "10239:157:9",
												"trueBody": {
													"condition": {
														"id": 1699,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "10263:57:9",
														"subExpression": {
															"arguments": [
																{
																	"id": 1694,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1674,
																	"src": "10295:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1695,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1676,
																	"src": "10301:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1696,
																	"name": "tokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1678,
																	"src": "10305:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 1697,
																	"name": "_data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1680,
																	"src": "10314:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 1693,
																"name": "_checkContractOnERC721Received",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2469,
																"src": "10264:30:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																	"typeString": "function (address,address,uint256,bytes memory) returns (bool)"
																}
															},
															"id": 1698,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10264:56:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 1704,
													"nodeType": "IfStatement",
													"src": "10260:136:9",
													"trueBody": {
														"id": 1703,
														"nodeType": "Block",
														"src": "10322:74:9",
														"statements": [
															{
																"errorCall": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 1700,
																		"name": "TransferToNonERC721ReceiverImplementer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2549,
																		"src": "10344:38:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_error_pure$__$returns$__$",
																			"typeString": "function () pure"
																		}
																	},
																	"id": 1701,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "10344:40:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																},
																"id": 1702,
																"nodeType": "RevertStatement",
																"src": "10337:47:9"
															}
														]
													}
												}
											}
										]
									},
									"documentation": {
										"id": 1672,
										"nodeType": "StructuredDocumentation",
										"src": "9970:57:9",
										"text": " @dev See {IERC721-safeTransferFrom}."
									},
									"functionSelector": "b88d4fde",
									"id": 1707,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "10042:16:9",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1682,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "10180:8:9"
									},
									"parameters": {
										"id": 1681,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1674,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "10077:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1707,
												"src": "10069:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1673,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10069:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1676,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "10100:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 1707,
												"src": "10092:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1675,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10092:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1678,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "10121:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1707,
												"src": "10113:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1677,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10113:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1680,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "10152:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1707,
												"src": "10139:18:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1679,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "10139:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10058:106:9"
									},
									"returnParameters": {
										"id": 1683,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10189:0:9"
									},
									"scope": 2496,
									"src": "10033:370:9",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1730,
										"nodeType": "Block",
										"src": "10721:111:9",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1728,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"id": 1722,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1718,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1715,
																	"name": "_startTokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1201,
																	"src": "10739:13:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																		"typeString": "function () view returns (uint256)"
																	}
																},
																"id": 1716,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10739:15:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 1717,
																"name": "tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1710,
																"src": "10758:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10739:26:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&&",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1721,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1719,
																"name": "tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1710,
																"src": "10769:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 1720,
																"name": "_currentIndex",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1058,
																"src": "10779:13:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10769:23:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"src": "10739:53:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"id": 1727,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "10796:28:9",
														"subExpression": {
															"expression": {
																"baseExpression": {
																	"id": 1723,
																	"name": "_ownerships",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1069,
																	"src": "10797:11:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$2562_storage_$",
																		"typeString": "mapping(uint256 => struct IERC721A.TokenOwnership storage ref)"
																	}
																},
																"id": 1725,
																"indexExpression": {
																	"id": 1724,
																	"name": "tokenId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1710,
																	"src": "10809:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "10797:20:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_TokenOwnership_$2562_storage",
																	"typeString": "struct IERC721A.TokenOwnership storage ref"
																}
															},
															"id": 1726,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "burned",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2561,
															"src": "10797:27:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "10739:85:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1714,
												"id": 1729,
												"nodeType": "Return",
												"src": "10732:92:9"
											}
										]
									},
									"documentation": {
										"id": 1708,
										"nodeType": "StructuredDocumentation",
										"src": "10411:241:9",
										"text": " @dev Returns whether `tokenId` exists.\n Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n Tokens start existing when they are minted (`_mint`),"
									},
									"id": 1731,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_exists",
									"nameLocation": "10667:7:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1711,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1710,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "10683:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1731,
												"src": "10675:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1709,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10675:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10674:17:9"
									},
									"returnParameters": {
										"id": 1714,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1713,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1731,
												"src": "10715:4:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1712,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "10715:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10714:6:9"
									},
									"scope": 2496,
									"src": "10658:174:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1745,
										"nodeType": "Block",
										"src": "10974:46:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1740,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1734,
															"src": "10995:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1741,
															"name": "quantity",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1736,
															"src": "10999:8:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "",
															"id": 1742,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11009:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"id": 1739,
														"name": "_safeMint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1746,
															1909
														],
														"referencedDeclaration": 1909,
														"src": "10985:9:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (address,uint256,bytes memory)"
														}
													},
													"id": 1743,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10985:27:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1744,
												"nodeType": "ExpressionStatement",
												"src": "10985:27:9"
											}
										]
									},
									"documentation": {
										"id": 1732,
										"nodeType": "StructuredDocumentation",
										"src": "10840:70:9",
										"text": " @dev Equivalent to `_safeMint(to, quantity, '')`."
									},
									"id": 1746,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_safeMint",
									"nameLocation": "10925:9:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1737,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1734,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "10943:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 1746,
												"src": "10935:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1733,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10935:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1736,
												"mutability": "mutable",
												"name": "quantity",
												"nameLocation": "10955:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 1746,
												"src": "10947:16:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1735,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10947:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10934:30:9"
									},
									"returnParameters": {
										"id": 1738,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10974:0:9"
									},
									"scope": 2496,
									"src": "10916:104:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1908,
										"nodeType": "Block",
										"src": "11505:1647:9",
										"statements": [
											{
												"assignments": [
													1757
												],
												"declarations": [
													{
														"constant": false,
														"id": 1757,
														"mutability": "mutable",
														"name": "startTokenId",
														"nameLocation": "11534:12:9",
														"nodeType": "VariableDeclaration",
														"scope": 1908,
														"src": "11526:20:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1756,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11526:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1759,
												"initialValue": {
													"id": 1758,
													"name": "_currentIndex",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1058,
													"src": "11549:13:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11526:36:9"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1765,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1760,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1749,
														"src": "11577:2:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1763,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11591:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1762,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "11583:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1761,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "11583:7:9",
																"typeDescriptions": {}
															}
														},
														"id": 1764,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "11583:10:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "11577:16:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1769,
												"nodeType": "IfStatement",
												"src": "11573:48:9",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1766,
															"name": "MintToZeroAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2534,
															"src": "11602:17:9",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1767,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "11602:19:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1768,
													"nodeType": "RevertStatement",
													"src": "11595:26:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1772,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1770,
														"name": "quantity",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1751,
														"src": "11636:8:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1771,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "11648:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "11636:13:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1776,
												"nodeType": "IfStatement",
												"src": "11632:44:9",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1773,
															"name": "MintZeroQuantity",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2537,
															"src": "11658:16:9",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1774,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "11658:18:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1775,
													"nodeType": "RevertStatement",
													"src": "11651:25:9"
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1780,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11719:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1779,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "11711:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1778,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "11711:7:9",
																	"typeDescriptions": {}
																}
															},
															"id": 1781,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11711:10:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1782,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1749,
															"src": "11723:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1783,
															"name": "startTokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1757,
															"src": "11727:12:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1784,
															"name": "quantity",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1751,
															"src": "11741:8:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1777,
														"name": "_beforeTokenTransfers",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2482,
														"src": "11689:21:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 1785,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11689:61:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1786,
												"nodeType": "ExpressionStatement",
												"src": "11689:61:9"
											},
											{
												"id": 1897,
												"nodeType": "UncheckedBlock",
												"src": "12002:1072:9",
												"statements": [
													{
														"expression": {
															"id": 1795,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"baseExpression": {
																		"id": 1787,
																		"name": "_addressData",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1074,
																		"src": "12027:12:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$2571_storage_$",
																			"typeString": "mapping(address => struct IERC721A.AddressData storage ref)"
																		}
																	},
																	"id": 1789,
																	"indexExpression": {
																		"id": 1788,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1749,
																		"src": "12040:2:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "12027:16:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_AddressData_$2571_storage",
																		"typeString": "struct IERC721A.AddressData storage ref"
																	}
																},
																"id": 1790,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2564,
																"src": "12027:24:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"arguments": [
																	{
																		"id": 1793,
																		"name": "quantity",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1751,
																		"src": "12062:8:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1792,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "12055:6:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint64_$",
																		"typeString": "type(uint64)"
																	},
																	"typeName": {
																		"id": 1791,
																		"name": "uint64",
																		"nodeType": "ElementaryTypeName",
																		"src": "12055:6:9",
																		"typeDescriptions": {}
																	}
																},
																"id": 1794,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "12055:16:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"src": "12027:44:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"id": 1796,
														"nodeType": "ExpressionStatement",
														"src": "12027:44:9"
													},
													{
														"expression": {
															"id": 1805,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"baseExpression": {
																		"id": 1797,
																		"name": "_addressData",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1074,
																		"src": "12086:12:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$2571_storage_$",
																			"typeString": "mapping(address => struct IERC721A.AddressData storage ref)"
																		}
																	},
																	"id": 1799,
																	"indexExpression": {
																		"id": 1798,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1749,
																		"src": "12099:2:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "12086:16:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_AddressData_$2571_storage",
																		"typeString": "struct IERC721A.AddressData storage ref"
																	}
																},
																"id": 1800,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "numberMinted",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2566,
																"src": "12086:29:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"arguments": [
																	{
																		"id": 1803,
																		"name": "quantity",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1751,
																		"src": "12126:8:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1802,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "12119:6:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint64_$",
																		"typeString": "type(uint64)"
																	},
																	"typeName": {
																		"id": 1801,
																		"name": "uint64",
																		"nodeType": "ElementaryTypeName",
																		"src": "12119:6:9",
																		"typeDescriptions": {}
																	}
																},
																"id": 1804,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "12119:16:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"src": "12086:49:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"id": 1806,
														"nodeType": "ExpressionStatement",
														"src": "12086:49:9"
													},
													{
														"expression": {
															"id": 1812,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"baseExpression": {
																		"id": 1807,
																		"name": "_ownerships",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1069,
																		"src": "12152:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$2562_storage_$",
																			"typeString": "mapping(uint256 => struct IERC721A.TokenOwnership storage ref)"
																		}
																	},
																	"id": 1809,
																	"indexExpression": {
																		"id": 1808,
																		"name": "startTokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1757,
																		"src": "12164:12:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "12152:25:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$2562_storage",
																		"typeString": "struct IERC721A.TokenOwnership storage ref"
																	}
																},
																"id": 1810,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "addr",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2557,
																"src": "12152:30:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"id": 1811,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1749,
																"src": "12185:2:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "12152:35:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1813,
														"nodeType": "ExpressionStatement",
														"src": "12152:35:9"
													},
													{
														"expression": {
															"id": 1823,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"baseExpression": {
																		"id": 1814,
																		"name": "_ownerships",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1069,
																		"src": "12202:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$2562_storage_$",
																			"typeString": "mapping(uint256 => struct IERC721A.TokenOwnership storage ref)"
																		}
																	},
																	"id": 1816,
																	"indexExpression": {
																		"id": 1815,
																		"name": "startTokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1757,
																		"src": "12214:12:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "12202:25:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$2562_storage",
																		"typeString": "struct IERC721A.TokenOwnership storage ref"
																	}
																},
																"id": 1817,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "startTimestamp",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2559,
																"src": "12202:40:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"arguments": [
																	{
																		"expression": {
																			"id": 1820,
																			"name": "block",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967292,
																			"src": "12252:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_block",
																				"typeString": "block"
																			}
																		},
																		"id": 1821,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "timestamp",
																		"nodeType": "MemberAccess",
																		"src": "12252:15:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1819,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "12245:6:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint64_$",
																		"typeString": "type(uint64)"
																	},
																	"typeName": {
																		"id": 1818,
																		"name": "uint64",
																		"nodeType": "ElementaryTypeName",
																		"src": "12245:6:9",
																		"typeDescriptions": {}
																	}
																},
																"id": 1822,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "12245:23:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"src": "12202:66:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"id": 1824,
														"nodeType": "ExpressionStatement",
														"src": "12202:66:9"
													},
													{
														"assignments": [
															1826
														],
														"declarations": [
															{
																"constant": false,
																"id": 1826,
																"mutability": "mutable",
																"name": "updatedIndex",
																"nameLocation": "12293:12:9",
																"nodeType": "VariableDeclaration",
																"scope": 1897,
																"src": "12285:20:9",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1825,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "12285:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1828,
														"initialValue": {
															"id": 1827,
															"name": "startTokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1757,
															"src": "12308:12:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "12285:35:9"
													},
													{
														"assignments": [
															1830
														],
														"declarations": [
															{
																"constant": false,
																"id": 1830,
																"mutability": "mutable",
																"name": "end",
																"nameLocation": "12343:3:9",
																"nodeType": "VariableDeclaration",
																"scope": 1897,
																"src": "12335:11:9",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1829,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "12335:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1834,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1833,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1831,
																"name": "updatedIndex",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1826,
																"src": "12349:12:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 1832,
																"name": "quantity",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1751,
																"src": "12364:8:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "12349:23:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "12335:37:9"
													},
													{
														"condition": {
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"expression": {
																	"id": 1835,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1749,
																	"src": "12393:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 1836,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "isContract",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 178,
																"src": "12393:13:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$bound_to$_t_address_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 1837,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "12393:15:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseBody": {
															"id": 1891,
															"nodeType": "Block",
															"src": "12867:153:9",
															"statements": [
																{
																	"body": {
																		"id": 1886,
																		"nodeType": "Block",
																		"src": "12889:88:9",
																		"statements": [
																			{
																				"eventCall": {
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"hexValue": "30",
																									"id": 1879,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "12934:1:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_0_by_1",
																										"typeString": "int_const 0"
																									},
																									"value": "0"
																								}
																							],
																							"expression": {
																								"argumentTypes": [
																									{
																										"typeIdentifier": "t_rational_0_by_1",
																										"typeString": "int_const 0"
																									}
																								],
																								"id": 1878,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"lValueRequested": false,
																								"nodeType": "ElementaryTypeNameExpression",
																								"src": "12926:7:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_type$_t_address_$",
																									"typeString": "type(address)"
																								},
																								"typeName": {
																									"id": 1877,
																									"name": "address",
																									"nodeType": "ElementaryTypeName",
																									"src": "12926:7:9",
																									"typeDescriptions": {}
																								}
																							},
																							"id": 1880,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "typeConversion",
																							"lValueRequested": false,
																							"names": [],
																							"nodeType": "FunctionCall",
																							"src": "12926:10:9",
																							"tryCall": false,
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						},
																						{
																							"id": 1881,
																							"name": "to",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1749,
																							"src": "12938:2:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						},
																						{
																							"id": 1883,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"nodeType": "UnaryOperation",
																							"operator": "++",
																							"prefix": false,
																							"src": "12942:14:9",
																							"subExpression": {
																								"id": 1882,
																								"name": "updatedIndex",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1826,
																								"src": "12942:12:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							},
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							},
																							{
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						],
																						"id": 1876,
																						"name": "Transfer",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 14,
																						"src": "12917:8:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																							"typeString": "function (address,address,uint256)"
																						}
																					},
																					"id": 1884,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "12917:40:9",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_tuple$__$",
																						"typeString": "tuple()"
																					}
																				},
																				"id": 1885,
																				"nodeType": "EmitStatement",
																				"src": "12912:45:9"
																			}
																		]
																	},
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1889,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1887,
																			"name": "updatedIndex",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1826,
																			"src": "12985:12:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "<",
																		"rightExpression": {
																			"id": 1888,
																			"name": "end",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1830,
																			"src": "13000:3:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "12985:18:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 1890,
																	"nodeType": "DoWhileStatement",
																	"src": "12886:119:9"
																}
															]
														},
														"id": 1892,
														"nodeType": "IfStatement",
														"src": "12389:631:9",
														"trueBody": {
															"id": 1875,
															"nodeType": "Block",
															"src": "12410:451:9",
															"statements": [
																{
																	"body": {
																		"id": 1863,
																		"nodeType": "Block",
																		"src": "12432:282:9",
																		"statements": [
																			{
																				"eventCall": {
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"hexValue": "30",
																									"id": 1841,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "12477:1:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_0_by_1",
																										"typeString": "int_const 0"
																									},
																									"value": "0"
																								}
																							],
																							"expression": {
																								"argumentTypes": [
																									{
																										"typeIdentifier": "t_rational_0_by_1",
																										"typeString": "int_const 0"
																									}
																								],
																								"id": 1840,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"lValueRequested": false,
																								"nodeType": "ElementaryTypeNameExpression",
																								"src": "12469:7:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_type$_t_address_$",
																									"typeString": "type(address)"
																								},
																								"typeName": {
																									"id": 1839,
																									"name": "address",
																									"nodeType": "ElementaryTypeName",
																									"src": "12469:7:9",
																									"typeDescriptions": {}
																								}
																							},
																							"id": 1842,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "typeConversion",
																							"lValueRequested": false,
																							"names": [],
																							"nodeType": "FunctionCall",
																							"src": "12469:10:9",
																							"tryCall": false,
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						},
																						{
																							"id": 1843,
																							"name": "to",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1749,
																							"src": "12481:2:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						},
																						{
																							"id": 1844,
																							"name": "updatedIndex",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1826,
																							"src": "12485:12:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							},
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							},
																							{
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						],
																						"id": 1838,
																						"name": "Transfer",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 14,
																						"src": "12460:8:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																							"typeString": "function (address,address,uint256)"
																						}
																					},
																					"id": 1845,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "12460:38:9",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_tuple$__$",
																						"typeString": "tuple()"
																					}
																				},
																				"id": 1846,
																				"nodeType": "EmitStatement",
																				"src": "12455:43:9"
																			},
																			{
																				"condition": {
																					"id": 1857,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "UnaryOperation",
																					"operator": "!",
																					"prefix": true,
																					"src": "12525:70:9",
																					"subExpression": {
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"hexValue": "30",
																										"id": 1850,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"kind": "number",
																										"lValueRequested": false,
																										"nodeType": "Literal",
																										"src": "12565:1:9",
																										"typeDescriptions": {
																											"typeIdentifier": "t_rational_0_by_1",
																											"typeString": "int_const 0"
																										},
																										"value": "0"
																									}
																								],
																								"expression": {
																									"argumentTypes": [
																										{
																											"typeIdentifier": "t_rational_0_by_1",
																											"typeString": "int_const 0"
																										}
																									],
																									"id": 1849,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"lValueRequested": false,
																									"nodeType": "ElementaryTypeNameExpression",
																									"src": "12557:7:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_type$_t_address_$",
																										"typeString": "type(address)"
																									},
																									"typeName": {
																										"id": 1848,
																										"name": "address",
																										"nodeType": "ElementaryTypeName",
																										"src": "12557:7:9",
																										"typeDescriptions": {}
																									}
																								},
																								"id": 1851,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"kind": "typeConversion",
																								"lValueRequested": false,
																								"names": [],
																								"nodeType": "FunctionCall",
																								"src": "12557:10:9",
																								"tryCall": false,
																								"typeDescriptions": {
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								}
																							},
																							{
																								"id": 1852,
																								"name": "to",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1749,
																								"src": "12569:2:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								}
																							},
																							{
																								"id": 1854,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "UnaryOperation",
																								"operator": "++",
																								"prefix": false,
																								"src": "12573:14:9",
																								"subExpression": {
																									"id": 1853,
																									"name": "updatedIndex",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1826,
																									"src": "12573:12:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							{
																								"id": 1855,
																								"name": "_data",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1753,
																								"src": "12589:5:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_bytes_memory_ptr",
																									"typeString": "bytes memory"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								},
																								{
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								},
																								{
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								{
																									"typeIdentifier": "t_bytes_memory_ptr",
																									"typeString": "bytes memory"
																								}
																							],
																							"id": 1847,
																							"name": "_checkContractOnERC721Received",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 2469,
																							"src": "12526:30:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																								"typeString": "function (address,address,uint256,bytes memory) returns (bool)"
																							}
																						},
																						"id": 1856,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "functionCall",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "12526:69:9",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_bool",
																							"typeString": "bool"
																						}
																					},
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				"id": 1862,
																				"nodeType": "IfStatement",
																				"src": "12521:174:9",
																				"trueBody": {
																					"id": 1861,
																					"nodeType": "Block",
																					"src": "12597:98:9",
																					"statements": [
																						{
																							"errorCall": {
																								"arguments": [],
																								"expression": {
																									"argumentTypes": [],
																									"id": 1858,
																									"name": "TransferToNonERC721ReceiverImplementer",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 2549,
																									"src": "12631:38:9",
																									"typeDescriptions": {
																										"typeIdentifier": "t_function_error_pure$__$returns$__$",
																										"typeString": "function () pure"
																									}
																								},
																								"id": 1859,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"kind": "functionCall",
																								"lValueRequested": false,
																								"names": [],
																								"nodeType": "FunctionCall",
																								"src": "12631:40:9",
																								"tryCall": false,
																								"typeDescriptions": {
																									"typeIdentifier": "t_tuple$__$",
																									"typeString": "tuple()"
																								}
																							},
																							"id": 1860,
																							"nodeType": "RevertStatement",
																							"src": "12624:47:9"
																						}
																					]
																				}
																			}
																		]
																	},
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1866,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1864,
																			"name": "updatedIndex",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1826,
																			"src": "12722:12:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "<",
																		"rightExpression": {
																			"id": 1865,
																			"name": "end",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1830,
																			"src": "12737:3:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "12722:18:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 1867,
																	"nodeType": "DoWhileStatement",
																	"src": "12429:313:9"
																},
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1870,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1868,
																			"name": "_currentIndex",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1058,
																			"src": "12806:13:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "!=",
																		"rightExpression": {
																			"id": 1869,
																			"name": "startTokenId",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1757,
																			"src": "12823:12:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "12806:29:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 1874,
																	"nodeType": "IfStatement",
																	"src": "12802:43:9",
																	"trueBody": {
																		"expression": {
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 1871,
																				"name": "revert",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967277,
																					4294967277
																				],
																				"referencedDeclaration": 4294967277,
																				"src": "12837:6:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_revert_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 1872,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "12837:8:9",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1873,
																		"nodeType": "ExpressionStatement",
																		"src": "12837:8:9"
																	}
																}
															]
														}
													},
													{
														"expression": {
															"id": 1895,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1893,
																"name": "_currentIndex",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1058,
																"src": "13034:13:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"id": 1894,
																"name": "updatedIndex",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1826,
																"src": "13050:12:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "13034:28:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1896,
														"nodeType": "ExpressionStatement",
														"src": "13034:28:9"
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1901,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13113:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1900,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "13105:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1899,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "13105:7:9",
																	"typeDescriptions": {}
																}
															},
															"id": 1902,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "13105:10:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1903,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1749,
															"src": "13117:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1904,
															"name": "startTokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1757,
															"src": "13121:12:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1905,
															"name": "quantity",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1751,
															"src": "13135:8:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1898,
														"name": "_afterTokenTransfers",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2495,
														"src": "13084:20:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 1906,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "13084:60:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1907,
												"nodeType": "ExpressionStatement",
												"src": "13084:60:9"
											}
										]
									},
									"documentation": {
										"id": 1747,
										"nodeType": "StructuredDocumentation",
										"src": "11028:359:9",
										"text": " @dev Safely mints `quantity` tokens and transfers them to `to`.\n Requirements:\n - If `to` refers to a smart contract, it must implement\n   {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\n - `quantity` must be greater than 0.\n Emits a {Transfer} event."
									},
									"id": 1909,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_safeMint",
									"nameLocation": "11402:9:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1754,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1749,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "11430:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 1909,
												"src": "11422:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1748,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11422:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1751,
												"mutability": "mutable",
												"name": "quantity",
												"nameLocation": "11451:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 1909,
												"src": "11443:16:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1750,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11443:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1753,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "11483:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1909,
												"src": "11470:18:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1752,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "11470:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11411:84:9"
									},
									"returnParameters": {
										"id": 1755,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11505:0:9"
									},
									"scope": 2496,
									"src": "11393:1759:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2026,
										"nodeType": "Block",
										"src": "13465:1120:9",
										"statements": [
											{
												"assignments": [
													1918
												],
												"declarations": [
													{
														"constant": false,
														"id": 1918,
														"mutability": "mutable",
														"name": "startTokenId",
														"nameLocation": "13485:12:9",
														"nodeType": "VariableDeclaration",
														"scope": 2026,
														"src": "13477:20:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1917,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "13477:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1920,
												"initialValue": {
													"id": 1919,
													"name": "_currentIndex",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1058,
													"src": "13500:13:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "13477:36:9"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1926,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1921,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1912,
														"src": "13528:2:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1924,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "13542:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1923,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "13534:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1922,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "13534:7:9",
																"typeDescriptions": {}
															}
														},
														"id": 1925,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "13534:10:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "13528:16:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1930,
												"nodeType": "IfStatement",
												"src": "13524:48:9",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1927,
															"name": "MintToZeroAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2534,
															"src": "13553:17:9",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1928,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "13553:19:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1929,
													"nodeType": "RevertStatement",
													"src": "13546:26:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1933,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1931,
														"name": "quantity",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1914,
														"src": "13587:8:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1932,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "13599:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "13587:13:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1937,
												"nodeType": "IfStatement",
												"src": "13583:44:9",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1934,
															"name": "MintZeroQuantity",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2537,
															"src": "13609:16:9",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1935,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "13609:18:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1936,
													"nodeType": "RevertStatement",
													"src": "13602:25:9"
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1941,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13670:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1940,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "13662:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1939,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "13662:7:9",
																	"typeDescriptions": {}
																}
															},
															"id": 1942,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "13662:10:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1943,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1912,
															"src": "13674:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1944,
															"name": "startTokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1918,
															"src": "13678:12:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1945,
															"name": "quantity",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1914,
															"src": "13692:8:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1938,
														"name": "_beforeTokenTransfers",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2482,
														"src": "13640:21:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 1946,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "13640:61:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1947,
												"nodeType": "ExpressionStatement",
												"src": "13640:61:9"
											},
											{
												"id": 2015,
												"nodeType": "UncheckedBlock",
												"src": "13953:554:9",
												"statements": [
													{
														"expression": {
															"id": 1956,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"baseExpression": {
																		"id": 1948,
																		"name": "_addressData",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1074,
																		"src": "13978:12:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$2571_storage_$",
																			"typeString": "mapping(address => struct IERC721A.AddressData storage ref)"
																		}
																	},
																	"id": 1950,
																	"indexExpression": {
																		"id": 1949,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1912,
																		"src": "13991:2:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "13978:16:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_AddressData_$2571_storage",
																		"typeString": "struct IERC721A.AddressData storage ref"
																	}
																},
																"id": 1951,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2564,
																"src": "13978:24:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"arguments": [
																	{
																		"id": 1954,
																		"name": "quantity",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1914,
																		"src": "14013:8:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1953,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "14006:6:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint64_$",
																		"typeString": "type(uint64)"
																	},
																	"typeName": {
																		"id": 1952,
																		"name": "uint64",
																		"nodeType": "ElementaryTypeName",
																		"src": "14006:6:9",
																		"typeDescriptions": {}
																	}
																},
																"id": 1955,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "14006:16:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"src": "13978:44:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"id": 1957,
														"nodeType": "ExpressionStatement",
														"src": "13978:44:9"
													},
													{
														"expression": {
															"id": 1966,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"baseExpression": {
																		"id": 1958,
																		"name": "_addressData",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1074,
																		"src": "14037:12:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$2571_storage_$",
																			"typeString": "mapping(address => struct IERC721A.AddressData storage ref)"
																		}
																	},
																	"id": 1960,
																	"indexExpression": {
																		"id": 1959,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1912,
																		"src": "14050:2:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "14037:16:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_AddressData_$2571_storage",
																		"typeString": "struct IERC721A.AddressData storage ref"
																	}
																},
																"id": 1961,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "numberMinted",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2566,
																"src": "14037:29:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"arguments": [
																	{
																		"id": 1964,
																		"name": "quantity",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1914,
																		"src": "14077:8:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1963,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "14070:6:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint64_$",
																		"typeString": "type(uint64)"
																	},
																	"typeName": {
																		"id": 1962,
																		"name": "uint64",
																		"nodeType": "ElementaryTypeName",
																		"src": "14070:6:9",
																		"typeDescriptions": {}
																	}
																},
																"id": 1965,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "14070:16:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"src": "14037:49:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"id": 1967,
														"nodeType": "ExpressionStatement",
														"src": "14037:49:9"
													},
													{
														"expression": {
															"id": 1973,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"baseExpression": {
																		"id": 1968,
																		"name": "_ownerships",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1069,
																		"src": "14103:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$2562_storage_$",
																			"typeString": "mapping(uint256 => struct IERC721A.TokenOwnership storage ref)"
																		}
																	},
																	"id": 1970,
																	"indexExpression": {
																		"id": 1969,
																		"name": "startTokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1918,
																		"src": "14115:12:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "14103:25:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$2562_storage",
																		"typeString": "struct IERC721A.TokenOwnership storage ref"
																	}
																},
																"id": 1971,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "addr",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2557,
																"src": "14103:30:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"id": 1972,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1912,
																"src": "14136:2:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "14103:35:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1974,
														"nodeType": "ExpressionStatement",
														"src": "14103:35:9"
													},
													{
														"expression": {
															"id": 1984,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"baseExpression": {
																		"id": 1975,
																		"name": "_ownerships",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1069,
																		"src": "14153:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$2562_storage_$",
																			"typeString": "mapping(uint256 => struct IERC721A.TokenOwnership storage ref)"
																		}
																	},
																	"id": 1977,
																	"indexExpression": {
																		"id": 1976,
																		"name": "startTokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1918,
																		"src": "14165:12:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "14153:25:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$2562_storage",
																		"typeString": "struct IERC721A.TokenOwnership storage ref"
																	}
																},
																"id": 1978,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "startTimestamp",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2559,
																"src": "14153:40:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"arguments": [
																	{
																		"expression": {
																			"id": 1981,
																			"name": "block",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967292,
																			"src": "14203:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_block",
																				"typeString": "block"
																			}
																		},
																		"id": 1982,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "timestamp",
																		"nodeType": "MemberAccess",
																		"src": "14203:15:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1980,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "14196:6:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint64_$",
																		"typeString": "type(uint64)"
																	},
																	"typeName": {
																		"id": 1979,
																		"name": "uint64",
																		"nodeType": "ElementaryTypeName",
																		"src": "14196:6:9",
																		"typeDescriptions": {}
																	}
																},
																"id": 1983,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "14196:23:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"src": "14153:66:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"id": 1985,
														"nodeType": "ExpressionStatement",
														"src": "14153:66:9"
													},
													{
														"assignments": [
															1987
														],
														"declarations": [
															{
																"constant": false,
																"id": 1987,
																"mutability": "mutable",
																"name": "updatedIndex",
																"nameLocation": "14244:12:9",
																"nodeType": "VariableDeclaration",
																"scope": 2015,
																"src": "14236:20:9",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1986,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "14236:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1989,
														"initialValue": {
															"id": 1988,
															"name": "startTokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1918,
															"src": "14259:12:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "14236:35:9"
													},
													{
														"assignments": [
															1991
														],
														"declarations": [
															{
																"constant": false,
																"id": 1991,
																"mutability": "mutable",
																"name": "end",
																"nameLocation": "14294:3:9",
																"nodeType": "VariableDeclaration",
																"scope": 2015,
																"src": "14286:11:9",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1990,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "14286:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1995,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1994,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1992,
																"name": "updatedIndex",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1987,
																"src": "14300:12:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 1993,
																"name": "quantity",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1914,
																"src": "14315:8:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "14300:23:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "14286:37:9"
													},
													{
														"body": {
															"id": 2006,
															"nodeType": "Block",
															"src": "14343:80:9",
															"statements": [
																{
																	"eventCall": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"hexValue": "30",
																						"id": 1999,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "14384:1:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_0_by_1",
																							"typeString": "int_const 0"
																						},
																						"value": "0"
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_rational_0_by_1",
																							"typeString": "int_const 0"
																						}
																					],
																					"id": 1998,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "14376:7:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_address_$",
																						"typeString": "type(address)"
																					},
																					"typeName": {
																						"id": 1997,
																						"name": "address",
																						"nodeType": "ElementaryTypeName",
																						"src": "14376:7:9",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 2000,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "14376:10:9",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 2001,
																				"name": "to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1912,
																				"src": "14388:2:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 2003,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "UnaryOperation",
																				"operator": "++",
																				"prefix": false,
																				"src": "14392:14:9",
																				"subExpression": {
																					"id": 2002,
																					"name": "updatedIndex",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1987,
																					"src": "14392:12:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 1996,
																			"name": "Transfer",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 14,
																			"src": "14367:8:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																				"typeString": "function (address,address,uint256)"
																			}
																		},
																		"id": 2004,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "14367:40:9",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 2005,
																	"nodeType": "EmitStatement",
																	"src": "14362:45:9"
																}
															]
														},
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2009,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2007,
																"name": "updatedIndex",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1987,
																"src": "14431:12:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 2008,
																"name": "end",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1991,
																"src": "14446:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "14431:18:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2010,
														"nodeType": "DoWhileStatement",
														"src": "14340:111:9"
													},
													{
														"expression": {
															"id": 2013,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2011,
																"name": "_currentIndex",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1058,
																"src": "14467:13:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"id": 2012,
																"name": "updatedIndex",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1987,
																"src": "14483:12:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "14467:28:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2014,
														"nodeType": "ExpressionStatement",
														"src": "14467:28:9"
													}
												]
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 2019,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14546:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2018,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "14538:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2017,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "14538:7:9",
																	"typeDescriptions": {}
																}
															},
															"id": 2020,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "14538:10:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2021,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1912,
															"src": "14550:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2022,
															"name": "startTokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1918,
															"src": "14554:12:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2023,
															"name": "quantity",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1914,
															"src": "14568:8:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2016,
														"name": "_afterTokenTransfers",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2495,
														"src": "14517:20:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 2024,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "14517:60:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2025,
												"nodeType": "ExpressionStatement",
												"src": "14517:60:9"
											}
										]
									},
									"documentation": {
										"id": 1910,
										"nodeType": "StructuredDocumentation",
										"src": "13160:245:9",
										"text": " @dev Mints `quantity` tokens and transfers them to `to`.\n Requirements:\n - `to` cannot be the zero address.\n - `quantity` must be greater than 0.\n Emits a {Transfer} event."
									},
									"id": 2027,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "13420:5:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1915,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1912,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "13434:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 2027,
												"src": "13426:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1911,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13426:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1914,
												"mutability": "mutable",
												"name": "quantity",
												"nameLocation": "13446:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 2027,
												"src": "13438:16:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1913,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13438:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13425:30:9"
									},
									"returnParameters": {
										"id": 1916,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13465:0:9"
									},
									"scope": 2496,
									"src": "13411:1174:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2196,
										"nodeType": "Block",
										"src": "14943:2026:9",
										"statements": [
											{
												"assignments": [
													2039
												],
												"declarations": [
													{
														"constant": false,
														"id": 2039,
														"mutability": "mutable",
														"name": "prevOwnership",
														"nameLocation": "14976:13:9",
														"nodeType": "VariableDeclaration",
														"scope": 2196,
														"src": "14954:35:9",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_TokenOwnership_$2562_memory_ptr",
															"typeString": "struct IERC721A.TokenOwnership"
														},
														"typeName": {
															"id": 2038,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 2037,
																"name": "TokenOwnership",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 2562,
																"src": "14954:14:9"
															},
															"referencedDeclaration": 2562,
															"src": "14954:14:9",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_TokenOwnership_$2562_storage_ptr",
																"typeString": "struct IERC721A.TokenOwnership"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2043,
												"initialValue": {
													"arguments": [
														{
															"id": 2041,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2034,
															"src": "15005:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2040,
														"name": "_ownershipOf",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1427,
														"src": "14992:12:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_struct$_TokenOwnership_$2562_memory_ptr_$",
															"typeString": "function (uint256) view returns (struct IERC721A.TokenOwnership memory)"
														}
													},
													"id": 2042,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "14992:21:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_TokenOwnership_$2562_memory_ptr",
														"typeString": "struct IERC721A.TokenOwnership memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "14954:59:9"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 2047,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 2044,
															"name": "prevOwnership",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2039,
															"src": "15030:13:9",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_TokenOwnership_$2562_memory_ptr",
																"typeString": "struct IERC721A.TokenOwnership memory"
															}
														},
														"id": 2045,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "addr",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2557,
														"src": "15030:18:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 2046,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2030,
														"src": "15052:4:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "15030:26:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2051,
												"nodeType": "IfStatement",
												"src": "15026:67:9",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 2048,
															"name": "TransferFromIncorrectOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2546,
															"src": "15065:26:9",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 2049,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "15065:28:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 2050,
													"nodeType": "RevertStatement",
													"src": "15058:35:9"
												}
											},
											{
												"assignments": [
													2053
												],
												"declarations": [
													{
														"constant": false,
														"id": 2053,
														"mutability": "mutable",
														"name": "isApprovedOrOwner",
														"nameLocation": "15111:17:9",
														"nodeType": "VariableDeclaration",
														"scope": 2196,
														"src": "15106:22:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2052,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "15106:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2072,
												"initialValue": {
													"components": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 2070,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"id": 2063,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	"id": 2057,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 2054,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 467,
																			"src": "15132:10:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 2055,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "15132:12:9",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"id": 2056,
																		"name": "from",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2030,
																		"src": "15148:4:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"src": "15132:20:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "||",
																"rightExpression": {
																	"arguments": [
																		{
																			"id": 2059,
																			"name": "from",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2030,
																			"src": "15186:4:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 2060,
																				"name": "_msgSender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 467,
																				"src": "15192:10:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																					"typeString": "function () view returns (address)"
																				}
																			},
																			"id": 2061,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "15192:12:9",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 2058,
																		"name": "isApprovedForAll",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1634,
																		"src": "15169:16:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$",
																			"typeString": "function (address,address) view returns (bool)"
																		}
																	},
																	"id": 2062,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "15169:36:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"src": "15132:73:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 2069,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 2065,
																			"name": "tokenId",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2034,
																			"src": "15234:7:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 2064,
																		"name": "getApproved",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1582,
																		"src": "15222:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
																			"typeString": "function (uint256) view returns (address)"
																		}
																	},
																	"id": 2066,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "15222:20:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 2067,
																		"name": "_msgSender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 467,
																		"src": "15246:10:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																			"typeString": "function () view returns (address)"
																		}
																	},
																	"id": 2068,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "15246:12:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "15222:36:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "15132:126:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"id": 2071,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "15131:128:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "15106:153:9"
											},
											{
												"condition": {
													"id": 2074,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "15276:18:9",
													"subExpression": {
														"id": 2073,
														"name": "isApprovedOrOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2053,
														"src": "15277:17:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2078,
												"nodeType": "IfStatement",
												"src": "15272:66:9",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 2075,
															"name": "TransferCallerNotOwnerNorApproved",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2543,
															"src": "15303:33:9",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 2076,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "15303:35:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 2077,
													"nodeType": "RevertStatement",
													"src": "15296:42:9"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 2084,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2079,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2032,
														"src": "15353:2:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 2082,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "15367:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 2081,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "15359:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 2080,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "15359:7:9",
																"typeDescriptions": {}
															}
														},
														"id": 2083,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "15359:10:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "15353:16:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2088,
												"nodeType": "IfStatement",
												"src": "15349:52:9",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 2085,
															"name": "TransferToZeroAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2552,
															"src": "15378:21:9",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 2086,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "15378:23:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 2087,
													"nodeType": "RevertStatement",
													"src": "15371:30:9"
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2090,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2030,
															"src": "15436:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2091,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2032,
															"src": "15442:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2092,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2034,
															"src": "15446:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "31",
															"id": 2093,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "15455:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															}
														],
														"id": 2089,
														"name": "_beforeTokenTransfers",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2482,
														"src": "15414:21:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 2094,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "15414:43:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2095,
												"nodeType": "ExpressionStatement",
												"src": "15414:43:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 2099,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "15539:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2098,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "15531:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2097,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "15531:7:9",
																	"typeDescriptions": {}
																}
															},
															"id": 2100,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "15531:10:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2101,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2034,
															"src": "15543:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2102,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2030,
															"src": "15552:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 2096,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2414,
														"src": "15522:8:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$__$",
															"typeString": "function (address,uint256,address)"
														}
													},
													"id": 2103,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "15522:35:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2104,
												"nodeType": "ExpressionStatement",
												"src": "15522:35:9"
											},
											{
												"id": 2182,
												"nodeType": "UncheckedBlock",
												"src": "15828:1036:9",
												"statements": [
													{
														"expression": {
															"id": 2110,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"baseExpression": {
																		"id": 2105,
																		"name": "_addressData",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1074,
																		"src": "15853:12:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$2571_storage_$",
																			"typeString": "mapping(address => struct IERC721A.AddressData storage ref)"
																		}
																	},
																	"id": 2107,
																	"indexExpression": {
																		"id": 2106,
																		"name": "from",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2030,
																		"src": "15866:4:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "15853:18:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_AddressData_$2571_storage",
																		"typeString": "struct IERC721A.AddressData storage ref"
																	}
																},
																"id": 2108,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2564,
																"src": "15853:26:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"nodeType": "Assignment",
															"operator": "-=",
															"rightHandSide": {
																"hexValue": "31",
																"id": 2109,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "15883:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "15853:31:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"id": 2111,
														"nodeType": "ExpressionStatement",
														"src": "15853:31:9"
													},
													{
														"expression": {
															"id": 2117,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"baseExpression": {
																		"id": 2112,
																		"name": "_addressData",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1074,
																		"src": "15899:12:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$2571_storage_$",
																			"typeString": "mapping(address => struct IERC721A.AddressData storage ref)"
																		}
																	},
																	"id": 2114,
																	"indexExpression": {
																		"id": 2113,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2032,
																		"src": "15912:2:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "15899:16:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_AddressData_$2571_storage",
																		"typeString": "struct IERC721A.AddressData storage ref"
																	}
																},
																"id": 2115,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2564,
																"src": "15899:24:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"hexValue": "31",
																"id": 2116,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "15927:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "15899:29:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"id": 2118,
														"nodeType": "ExpressionStatement",
														"src": "15899:29:9"
													},
													{
														"assignments": [
															2121
														],
														"declarations": [
															{
																"constant": false,
																"id": 2121,
																"mutability": "mutable",
																"name": "currSlot",
																"nameLocation": "15968:8:9",
																"nodeType": "VariableDeclaration",
																"scope": 2182,
																"src": "15945:31:9",
																"stateVariable": false,
																"storageLocation": "storage",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_TokenOwnership_$2562_storage_ptr",
																	"typeString": "struct IERC721A.TokenOwnership"
																},
																"typeName": {
																	"id": 2120,
																	"nodeType": "UserDefinedTypeName",
																	"pathNode": {
																		"id": 2119,
																		"name": "TokenOwnership",
																		"nodeType": "IdentifierPath",
																		"referencedDeclaration": 2562,
																		"src": "15945:14:9"
																	},
																	"referencedDeclaration": 2562,
																	"src": "15945:14:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$2562_storage_ptr",
																		"typeString": "struct IERC721A.TokenOwnership"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2125,
														"initialValue": {
															"baseExpression": {
																"id": 2122,
																"name": "_ownerships",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1069,
																"src": "15979:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$2562_storage_$",
																	"typeString": "mapping(uint256 => struct IERC721A.TokenOwnership storage ref)"
																}
															},
															"id": 2124,
															"indexExpression": {
																"id": 2123,
																"name": "tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2034,
																"src": "15991:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "15979:20:9",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_TokenOwnership_$2562_storage",
																"typeString": "struct IERC721A.TokenOwnership storage ref"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "15945:54:9"
													},
													{
														"expression": {
															"id": 2130,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"id": 2126,
																	"name": "currSlot",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2121,
																	"src": "16014:8:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$2562_storage_ptr",
																		"typeString": "struct IERC721A.TokenOwnership storage pointer"
																	}
																},
																"id": 2128,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "addr",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2557,
																"src": "16014:13:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"id": 2129,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2032,
																"src": "16030:2:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "16014:18:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 2131,
														"nodeType": "ExpressionStatement",
														"src": "16014:18:9"
													},
													{
														"expression": {
															"id": 2140,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"id": 2132,
																	"name": "currSlot",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2121,
																	"src": "16047:8:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$2562_storage_ptr",
																		"typeString": "struct IERC721A.TokenOwnership storage pointer"
																	}
																},
																"id": 2134,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "startTimestamp",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2559,
																"src": "16047:23:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"arguments": [
																	{
																		"expression": {
																			"id": 2137,
																			"name": "block",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967292,
																			"src": "16080:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_block",
																				"typeString": "block"
																			}
																		},
																		"id": 2138,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "timestamp",
																		"nodeType": "MemberAccess",
																		"src": "16080:15:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 2136,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "16073:6:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint64_$",
																		"typeString": "type(uint64)"
																	},
																	"typeName": {
																		"id": 2135,
																		"name": "uint64",
																		"nodeType": "ElementaryTypeName",
																		"src": "16073:6:9",
																		"typeDescriptions": {}
																	}
																},
																"id": 2139,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "16073:23:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"src": "16047:49:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"id": 2141,
														"nodeType": "ExpressionStatement",
														"src": "16047:49:9"
													},
													{
														"assignments": [
															2143
														],
														"declarations": [
															{
																"constant": false,
																"id": 2143,
																"mutability": "mutable",
																"name": "nextTokenId",
																"nameLocation": "16356:11:9",
																"nodeType": "VariableDeclaration",
																"scope": 2182,
																"src": "16348:19:9",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2142,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "16348:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2147,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2146,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2144,
																"name": "tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2034,
																"src": "16370:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "31",
																"id": 2145,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "16380:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "16370:11:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "16348:33:9"
													},
													{
														"assignments": [
															2150
														],
														"declarations": [
															{
																"constant": false,
																"id": 2150,
																"mutability": "mutable",
																"name": "nextSlot",
																"nameLocation": "16419:8:9",
																"nodeType": "VariableDeclaration",
																"scope": 2182,
																"src": "16396:31:9",
																"stateVariable": false,
																"storageLocation": "storage",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_TokenOwnership_$2562_storage_ptr",
																	"typeString": "struct IERC721A.TokenOwnership"
																},
																"typeName": {
																	"id": 2149,
																	"nodeType": "UserDefinedTypeName",
																	"pathNode": {
																		"id": 2148,
																		"name": "TokenOwnership",
																		"nodeType": "IdentifierPath",
																		"referencedDeclaration": 2562,
																		"src": "16396:14:9"
																	},
																	"referencedDeclaration": 2562,
																	"src": "16396:14:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$2562_storage_ptr",
																		"typeString": "struct IERC721A.TokenOwnership"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2154,
														"initialValue": {
															"baseExpression": {
																"id": 2151,
																"name": "_ownerships",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1069,
																"src": "16430:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$2562_storage_$",
																	"typeString": "mapping(uint256 => struct IERC721A.TokenOwnership storage ref)"
																}
															},
															"id": 2153,
															"indexExpression": {
																"id": 2152,
																"name": "nextTokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2143,
																"src": "16442:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "16430:24:9",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_TokenOwnership_$2562_storage",
																"typeString": "struct IERC721A.TokenOwnership storage ref"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "16396:58:9"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 2161,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 2155,
																	"name": "nextSlot",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2150,
																	"src": "16473:8:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$2562_storage_ptr",
																		"typeString": "struct IERC721A.TokenOwnership storage pointer"
																	}
																},
																"id": 2156,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "addr",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2557,
																"src": "16473:13:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 2159,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "16498:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 2158,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "16490:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 2157,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "16490:7:9",
																		"typeDescriptions": {}
																	}
																},
																"id": 2160,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "16490:10:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "16473:27:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2181,
														"nodeType": "IfStatement",
														"src": "16469:384:9",
														"trueBody": {
															"id": 2180,
															"nodeType": "Block",
															"src": "16502:351:9",
															"statements": [
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2164,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2162,
																			"name": "nextTokenId",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2143,
																			"src": "16668:11:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "!=",
																		"rightExpression": {
																			"id": 2163,
																			"name": "_currentIndex",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1058,
																			"src": "16683:13:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "16668:28:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 2179,
																	"nodeType": "IfStatement",
																	"src": "16664:174:9",
																	"trueBody": {
																		"id": 2178,
																		"nodeType": "Block",
																		"src": "16698:140:9",
																		"statements": [
																			{
																				"expression": {
																					"id": 2169,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftHandSide": {
																						"expression": {
																							"id": 2165,
																							"name": "nextSlot",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 2150,
																							"src": "16721:8:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_TokenOwnership_$2562_storage_ptr",
																								"typeString": "struct IERC721A.TokenOwnership storage pointer"
																							}
																						},
																						"id": 2167,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": true,
																						"memberName": "addr",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 2557,
																						"src": "16721:13:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"nodeType": "Assignment",
																					"operator": "=",
																					"rightHandSide": {
																						"id": 2168,
																						"name": "from",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2030,
																						"src": "16737:4:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"src": "16721:20:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"id": 2170,
																				"nodeType": "ExpressionStatement",
																				"src": "16721:20:9"
																			},
																			{
																				"expression": {
																					"id": 2176,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftHandSide": {
																						"expression": {
																							"id": 2171,
																							"name": "nextSlot",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 2150,
																							"src": "16764:8:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_TokenOwnership_$2562_storage_ptr",
																								"typeString": "struct IERC721A.TokenOwnership storage pointer"
																							}
																						},
																						"id": 2173,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": true,
																						"memberName": "startTimestamp",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 2559,
																						"src": "16764:23:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint64",
																							"typeString": "uint64"
																						}
																					},
																					"nodeType": "Assignment",
																					"operator": "=",
																					"rightHandSide": {
																						"expression": {
																							"id": 2174,
																							"name": "prevOwnership",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 2039,
																							"src": "16790:13:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_TokenOwnership_$2562_memory_ptr",
																								"typeString": "struct IERC721A.TokenOwnership memory"
																							}
																						},
																						"id": 2175,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberName": "startTimestamp",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 2559,
																						"src": "16790:28:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint64",
																							"typeString": "uint64"
																						}
																					},
																					"src": "16764:54:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint64",
																						"typeString": "uint64"
																					}
																				},
																				"id": 2177,
																				"nodeType": "ExpressionStatement",
																				"src": "16764:54:9"
																			}
																		]
																	}
																}
															]
														}
													}
												]
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 2184,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2030,
															"src": "16890:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2185,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2032,
															"src": "16896:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2186,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2034,
															"src": "16900:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2183,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 14,
														"src": "16881:8:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 2187,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "16881:27:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2188,
												"nodeType": "EmitStatement",
												"src": "16876:32:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2190,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2030,
															"src": "16940:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2191,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2032,
															"src": "16946:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2192,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2034,
															"src": "16950:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "31",
															"id": 2193,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "16959:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															}
														],
														"id": 2189,
														"name": "_afterTokenTransfers",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2495,
														"src": "16919:20:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 2194,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "16919:42:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2195,
												"nodeType": "ExpressionStatement",
												"src": "16919:42:9"
											}
										]
									},
									"documentation": {
										"id": 2028,
										"nodeType": "StructuredDocumentation",
										"src": "14593:240:9",
										"text": " @dev Transfers `tokenId` from `from` to `to`.\n Requirements:\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n Emits a {Transfer} event."
									},
									"id": 2197,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "14848:9:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2035,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2030,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "14876:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 2197,
												"src": "14868:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2029,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14868:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2032,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "14899:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 2197,
												"src": "14891:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2031,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14891:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2034,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "14920:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 2197,
												"src": "14912:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2033,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14912:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14857:77:9"
									},
									"returnParameters": {
										"id": 2036,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "14943:0:9"
									},
									"scope": 2496,
									"src": "14839:2130:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 2208,
										"nodeType": "Block",
										"src": "17096:40:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2204,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2200,
															"src": "17113:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "66616c7365",
															"id": 2205,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "17122:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "false"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 2203,
														"name": "_burn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2209,
															2391
														],
														"referencedDeclaration": 2391,
														"src": "17107:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_bool_$returns$__$",
															"typeString": "function (uint256,bool)"
														}
													},
													"id": 2206,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "17107:21:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2207,
												"nodeType": "ExpressionStatement",
												"src": "17107:21:9"
											}
										]
									},
									"documentation": {
										"id": 2198,
										"nodeType": "StructuredDocumentation",
										"src": "16977:64:9",
										"text": " @dev Equivalent to `_burn(tokenId, false)`."
									},
									"id": 2209,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "17056:5:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2201,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2200,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "17070:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 2209,
												"src": "17062:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2199,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "17062:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17061:17:9"
									},
									"returnParameters": {
										"id": 2202,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "17096:0:9"
									},
									"scope": 2496,
									"src": "17047:89:9",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2390,
										"nodeType": "Block",
										"src": "17434:2339:9",
										"statements": [
											{
												"assignments": [
													2219
												],
												"declarations": [
													{
														"constant": false,
														"id": 2219,
														"mutability": "mutable",
														"name": "prevOwnership",
														"nameLocation": "17467:13:9",
														"nodeType": "VariableDeclaration",
														"scope": 2390,
														"src": "17445:35:9",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_TokenOwnership_$2562_memory_ptr",
															"typeString": "struct IERC721A.TokenOwnership"
														},
														"typeName": {
															"id": 2218,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 2217,
																"name": "TokenOwnership",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 2562,
																"src": "17445:14:9"
															},
															"referencedDeclaration": 2562,
															"src": "17445:14:9",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_TokenOwnership_$2562_storage_ptr",
																"typeString": "struct IERC721A.TokenOwnership"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2223,
												"initialValue": {
													"arguments": [
														{
															"id": 2221,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2212,
															"src": "17496:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2220,
														"name": "_ownershipOf",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1427,
														"src": "17483:12:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_struct$_TokenOwnership_$2562_memory_ptr_$",
															"typeString": "function (uint256) view returns (struct IERC721A.TokenOwnership memory)"
														}
													},
													"id": 2222,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "17483:21:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_TokenOwnership_$2562_memory_ptr",
														"typeString": "struct IERC721A.TokenOwnership memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "17445:59:9"
											},
											{
												"assignments": [
													2225
												],
												"declarations": [
													{
														"constant": false,
														"id": 2225,
														"mutability": "mutable",
														"name": "from",
														"nameLocation": "17525:4:9",
														"nodeType": "VariableDeclaration",
														"scope": 2390,
														"src": "17517:12:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 2224,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "17517:7:9",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2228,
												"initialValue": {
													"expression": {
														"id": 2226,
														"name": "prevOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2219,
														"src": "17532:13:9",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_TokenOwnership_$2562_memory_ptr",
															"typeString": "struct IERC721A.TokenOwnership memory"
														}
													},
													"id": 2227,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "addr",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 2557,
													"src": "17532:18:9",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "17517:33:9"
											},
											{
												"condition": {
													"id": 2229,
													"name": "approvalCheck",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2214,
													"src": "17567:13:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2258,
												"nodeType": "IfStatement",
												"src": "17563:290:9",
												"trueBody": {
													"id": 2257,
													"nodeType": "Block",
													"src": "17582:271:9",
													"statements": [
														{
															"assignments": [
																2231
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 2231,
																	"mutability": "mutable",
																	"name": "isApprovedOrOwner",
																	"nameLocation": "17602:17:9",
																	"nodeType": "VariableDeclaration",
																	"scope": 2257,
																	"src": "17597:22:9",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"typeName": {
																		"id": 2230,
																		"name": "bool",
																		"nodeType": "ElementaryTypeName",
																		"src": "17597:4:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 2250,
															"initialValue": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 2248,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 2241,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				"id": 2235,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"arguments": [],
																					"expression": {
																						"argumentTypes": [],
																						"id": 2232,
																						"name": "_msgSender",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 467,
																						"src": "17623:10:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																							"typeString": "function () view returns (address)"
																						}
																					},
																					"id": 2233,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "17623:12:9",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "==",
																				"rightExpression": {
																					"id": 2234,
																					"name": "from",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2225,
																					"src": "17639:4:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"src": "17623:20:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "||",
																			"rightExpression": {
																				"arguments": [
																					{
																						"id": 2237,
																						"name": "from",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2225,
																						"src": "17681:4:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					{
																						"arguments": [],
																						"expression": {
																							"argumentTypes": [],
																							"id": 2238,
																							"name": "_msgSender",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 467,
																							"src": "17687:10:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																								"typeString": "function () view returns (address)"
																							}
																						},
																						"id": 2239,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "functionCall",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "17687:12:9",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						},
																						{
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					],
																					"id": 2236,
																					"name": "isApprovedForAll",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1634,
																					"src": "17664:16:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$",
																						"typeString": "function (address,address) view returns (bool)"
																					}
																				},
																				"id": 2240,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "17664:36:9",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "17623:77:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "||",
																		"rightExpression": {
																			"commonType": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			"id": 2247,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 2243,
																						"name": "tokenId",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2212,
																						"src": "17733:7:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					],
																					"id": 2242,
																					"name": "getApproved",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1582,
																					"src": "17721:11:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
																						"typeString": "function (uint256) view returns (address)"
																					}
																				},
																				"id": 2244,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "17721:20:9",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"arguments": [],
																				"expression": {
																					"argumentTypes": [],
																					"id": 2245,
																					"name": "_msgSender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 467,
																					"src": "17745:10:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																						"typeString": "function () view returns (address)"
																					}
																				},
																				"id": 2246,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "17745:12:9",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"src": "17721:36:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "17623:134:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 2249,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "17622:136:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "17597:161:9"
														},
														{
															"condition": {
																"id": 2252,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "!",
																"prefix": true,
																"src": "17779:18:9",
																"subExpression": {
																	"id": 2251,
																	"name": "isApprovedOrOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2231,
																	"src": "17780:17:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 2256,
															"nodeType": "IfStatement",
															"src": "17775:66:9",
															"trueBody": {
																"errorCall": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 2253,
																		"name": "TransferCallerNotOwnerNorApproved",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2543,
																		"src": "17806:33:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_error_pure$__$returns$__$",
																			"typeString": "function () pure"
																		}
																	},
																	"id": 2254,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "17806:35:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																},
																"id": 2255,
																"nodeType": "RevertStatement",
																"src": "17799:42:9"
															}
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2260,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2225,
															"src": "17887:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 2263,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "17901:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2262,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "17893:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2261,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "17893:7:9",
																	"typeDescriptions": {}
																}
															},
															"id": 2264,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "17893:10:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2265,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2212,
															"src": "17905:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "31",
															"id": 2266,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "17914:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															}
														],
														"id": 2259,
														"name": "_beforeTokenTransfers",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2482,
														"src": "17865:21:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 2267,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "17865:51:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2268,
												"nodeType": "ExpressionStatement",
												"src": "17865:51:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 2272,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "17998:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2271,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "17990:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2270,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "17990:7:9",
																	"typeDescriptions": {}
																}
															},
															"id": 2273,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "17990:10:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2274,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2212,
															"src": "18002:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2275,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2225,
															"src": "18011:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 2269,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2414,
														"src": "17981:8:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$__$",
															"typeString": "function (address,uint256,address)"
														}
													},
													"id": 2276,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "17981:35:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2277,
												"nodeType": "ExpressionStatement",
												"src": "17981:35:9"
											},
											{
												"id": 2366,
												"nodeType": "UncheckedBlock",
												"src": "18287:1213:9",
												"statements": [
													{
														"assignments": [
															2280
														],
														"declarations": [
															{
																"constant": false,
																"id": 2280,
																"mutability": "mutable",
																"name": "addressData",
																"nameLocation": "18332:11:9",
																"nodeType": "VariableDeclaration",
																"scope": 2366,
																"src": "18312:31:9",
																"stateVariable": false,
																"storageLocation": "storage",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_AddressData_$2571_storage_ptr",
																	"typeString": "struct IERC721A.AddressData"
																},
																"typeName": {
																	"id": 2279,
																	"nodeType": "UserDefinedTypeName",
																	"pathNode": {
																		"id": 2278,
																		"name": "AddressData",
																		"nodeType": "IdentifierPath",
																		"referencedDeclaration": 2571,
																		"src": "18312:11:9"
																	},
																	"referencedDeclaration": 2571,
																	"src": "18312:11:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_AddressData_$2571_storage_ptr",
																		"typeString": "struct IERC721A.AddressData"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2284,
														"initialValue": {
															"baseExpression": {
																"id": 2281,
																"name": "_addressData",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1074,
																"src": "18346:12:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_AddressData_$2571_storage_$",
																	"typeString": "mapping(address => struct IERC721A.AddressData storage ref)"
																}
															},
															"id": 2283,
															"indexExpression": {
																"id": 2282,
																"name": "from",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2225,
																"src": "18359:4:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "18346:18:9",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_AddressData_$2571_storage",
																"typeString": "struct IERC721A.AddressData storage ref"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "18312:52:9"
													},
													{
														"expression": {
															"id": 2289,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"id": 2285,
																	"name": "addressData",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2280,
																	"src": "18379:11:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_AddressData_$2571_storage_ptr",
																		"typeString": "struct IERC721A.AddressData storage pointer"
																	}
																},
																"id": 2287,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2564,
																"src": "18379:19:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"nodeType": "Assignment",
															"operator": "-=",
															"rightHandSide": {
																"hexValue": "31",
																"id": 2288,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "18402:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "18379:24:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"id": 2290,
														"nodeType": "ExpressionStatement",
														"src": "18379:24:9"
													},
													{
														"expression": {
															"id": 2295,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"id": 2291,
																	"name": "addressData",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2280,
																	"src": "18418:11:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_AddressData_$2571_storage_ptr",
																		"typeString": "struct IERC721A.AddressData storage pointer"
																	}
																},
																"id": 2293,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "numberBurned",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2568,
																"src": "18418:24:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"hexValue": "31",
																"id": 2294,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "18446:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "18418:29:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"id": 2296,
														"nodeType": "ExpressionStatement",
														"src": "18418:29:9"
													},
													{
														"assignments": [
															2299
														],
														"declarations": [
															{
																"constant": false,
																"id": 2299,
																"mutability": "mutable",
																"name": "currSlot",
																"nameLocation": "18569:8:9",
																"nodeType": "VariableDeclaration",
																"scope": 2366,
																"src": "18546:31:9",
																"stateVariable": false,
																"storageLocation": "storage",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_TokenOwnership_$2562_storage_ptr",
																	"typeString": "struct IERC721A.TokenOwnership"
																},
																"typeName": {
																	"id": 2298,
																	"nodeType": "UserDefinedTypeName",
																	"pathNode": {
																		"id": 2297,
																		"name": "TokenOwnership",
																		"nodeType": "IdentifierPath",
																		"referencedDeclaration": 2562,
																		"src": "18546:14:9"
																	},
																	"referencedDeclaration": 2562,
																	"src": "18546:14:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$2562_storage_ptr",
																		"typeString": "struct IERC721A.TokenOwnership"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2303,
														"initialValue": {
															"baseExpression": {
																"id": 2300,
																"name": "_ownerships",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1069,
																"src": "18580:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$2562_storage_$",
																	"typeString": "mapping(uint256 => struct IERC721A.TokenOwnership storage ref)"
																}
															},
															"id": 2302,
															"indexExpression": {
																"id": 2301,
																"name": "tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2212,
																"src": "18592:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "18580:20:9",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_TokenOwnership_$2562_storage",
																"typeString": "struct IERC721A.TokenOwnership storage ref"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "18546:54:9"
													},
													{
														"expression": {
															"id": 2308,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"id": 2304,
																	"name": "currSlot",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2299,
																	"src": "18615:8:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$2562_storage_ptr",
																		"typeString": "struct IERC721A.TokenOwnership storage pointer"
																	}
																},
																"id": 2306,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "addr",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2557,
																"src": "18615:13:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"id": 2307,
																"name": "from",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2225,
																"src": "18631:4:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "18615:20:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 2309,
														"nodeType": "ExpressionStatement",
														"src": "18615:20:9"
													},
													{
														"expression": {
															"id": 2318,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"id": 2310,
																	"name": "currSlot",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2299,
																	"src": "18650:8:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$2562_storage_ptr",
																		"typeString": "struct IERC721A.TokenOwnership storage pointer"
																	}
																},
																"id": 2312,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "startTimestamp",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2559,
																"src": "18650:23:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"arguments": [
																	{
																		"expression": {
																			"id": 2315,
																			"name": "block",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967292,
																			"src": "18683:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_block",
																				"typeString": "block"
																			}
																		},
																		"id": 2316,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "timestamp",
																		"nodeType": "MemberAccess",
																		"src": "18683:15:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 2314,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "18676:6:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint64_$",
																		"typeString": "type(uint64)"
																	},
																	"typeName": {
																		"id": 2313,
																		"name": "uint64",
																		"nodeType": "ElementaryTypeName",
																		"src": "18676:6:9",
																		"typeDescriptions": {}
																	}
																},
																"id": 2317,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "18676:23:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"src": "18650:49:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"id": 2319,
														"nodeType": "ExpressionStatement",
														"src": "18650:49:9"
													},
													{
														"expression": {
															"id": 2324,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"id": 2320,
																	"name": "currSlot",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2299,
																	"src": "18714:8:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$2562_storage_ptr",
																		"typeString": "struct IERC721A.TokenOwnership storage pointer"
																	}
																},
																"id": 2322,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "burned",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2561,
																"src": "18714:15:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"hexValue": "74727565",
																"id": 2323,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "18732:4:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"src": "18714:22:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2325,
														"nodeType": "ExpressionStatement",
														"src": "18714:22:9"
													},
													{
														"assignments": [
															2327
														],
														"declarations": [
															{
																"constant": false,
																"id": 2327,
																"mutability": "mutable",
																"name": "nextTokenId",
																"nameLocation": "18992:11:9",
																"nodeType": "VariableDeclaration",
																"scope": 2366,
																"src": "18984:19:9",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2326,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "18984:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2331,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2330,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2328,
																"name": "tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2212,
																"src": "19006:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "31",
																"id": 2329,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "19016:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "19006:11:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "18984:33:9"
													},
													{
														"assignments": [
															2334
														],
														"declarations": [
															{
																"constant": false,
																"id": 2334,
																"mutability": "mutable",
																"name": "nextSlot",
																"nameLocation": "19055:8:9",
																"nodeType": "VariableDeclaration",
																"scope": 2366,
																"src": "19032:31:9",
																"stateVariable": false,
																"storageLocation": "storage",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_TokenOwnership_$2562_storage_ptr",
																	"typeString": "struct IERC721A.TokenOwnership"
																},
																"typeName": {
																	"id": 2333,
																	"nodeType": "UserDefinedTypeName",
																	"pathNode": {
																		"id": 2332,
																		"name": "TokenOwnership",
																		"nodeType": "IdentifierPath",
																		"referencedDeclaration": 2562,
																		"src": "19032:14:9"
																	},
																	"referencedDeclaration": 2562,
																	"src": "19032:14:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$2562_storage_ptr",
																		"typeString": "struct IERC721A.TokenOwnership"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2338,
														"initialValue": {
															"baseExpression": {
																"id": 2335,
																"name": "_ownerships",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1069,
																"src": "19066:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_TokenOwnership_$2562_storage_$",
																	"typeString": "mapping(uint256 => struct IERC721A.TokenOwnership storage ref)"
																}
															},
															"id": 2337,
															"indexExpression": {
																"id": 2336,
																"name": "nextTokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2327,
																"src": "19078:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "19066:24:9",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_TokenOwnership_$2562_storage",
																"typeString": "struct IERC721A.TokenOwnership storage ref"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "19032:58:9"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 2345,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 2339,
																	"name": "nextSlot",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2334,
																	"src": "19109:8:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_TokenOwnership_$2562_storage_ptr",
																		"typeString": "struct IERC721A.TokenOwnership storage pointer"
																	}
																},
																"id": 2340,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "addr",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2557,
																"src": "19109:13:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 2343,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "19134:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 2342,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "19126:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 2341,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "19126:7:9",
																		"typeDescriptions": {}
																	}
																},
																"id": 2344,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "19126:10:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "19109:27:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2365,
														"nodeType": "IfStatement",
														"src": "19105:384:9",
														"trueBody": {
															"id": 2364,
															"nodeType": "Block",
															"src": "19138:351:9",
															"statements": [
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2348,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2346,
																			"name": "nextTokenId",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2327,
																			"src": "19304:11:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "!=",
																		"rightExpression": {
																			"id": 2347,
																			"name": "_currentIndex",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1058,
																			"src": "19319:13:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "19304:28:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 2363,
																	"nodeType": "IfStatement",
																	"src": "19300:174:9",
																	"trueBody": {
																		"id": 2362,
																		"nodeType": "Block",
																		"src": "19334:140:9",
																		"statements": [
																			{
																				"expression": {
																					"id": 2353,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftHandSide": {
																						"expression": {
																							"id": 2349,
																							"name": "nextSlot",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 2334,
																							"src": "19357:8:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_TokenOwnership_$2562_storage_ptr",
																								"typeString": "struct IERC721A.TokenOwnership storage pointer"
																							}
																						},
																						"id": 2351,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": true,
																						"memberName": "addr",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 2557,
																						"src": "19357:13:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"nodeType": "Assignment",
																					"operator": "=",
																					"rightHandSide": {
																						"id": 2352,
																						"name": "from",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2225,
																						"src": "19373:4:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"src": "19357:20:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"id": 2354,
																				"nodeType": "ExpressionStatement",
																				"src": "19357:20:9"
																			},
																			{
																				"expression": {
																					"id": 2360,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftHandSide": {
																						"expression": {
																							"id": 2355,
																							"name": "nextSlot",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 2334,
																							"src": "19400:8:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_TokenOwnership_$2562_storage_ptr",
																								"typeString": "struct IERC721A.TokenOwnership storage pointer"
																							}
																						},
																						"id": 2357,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": true,
																						"memberName": "startTimestamp",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 2559,
																						"src": "19400:23:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint64",
																							"typeString": "uint64"
																						}
																					},
																					"nodeType": "Assignment",
																					"operator": "=",
																					"rightHandSide": {
																						"expression": {
																							"id": 2358,
																							"name": "prevOwnership",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 2219,
																							"src": "19426:13:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_TokenOwnership_$2562_memory_ptr",
																								"typeString": "struct IERC721A.TokenOwnership memory"
																							}
																						},
																						"id": 2359,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberName": "startTimestamp",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 2559,
																						"src": "19426:28:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint64",
																							"typeString": "uint64"
																						}
																					},
																					"src": "19400:54:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint64",
																						"typeString": "uint64"
																					}
																				},
																				"id": 2361,
																				"nodeType": "ExpressionStatement",
																				"src": "19400:54:9"
																			}
																		]
																	}
																}
															]
														}
													}
												]
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 2368,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2225,
															"src": "19526:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 2371,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "19540:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2370,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "19532:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2369,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "19532:7:9",
																	"typeDescriptions": {}
																}
															},
															"id": 2372,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "19532:10:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2373,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2212,
															"src": "19544:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2367,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 14,
														"src": "19517:8:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 2374,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "19517:35:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2375,
												"nodeType": "EmitStatement",
												"src": "19512:40:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2377,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2225,
															"src": "19584:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 2380,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "19598:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2379,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "19590:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2378,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "19590:7:9",
																	"typeDescriptions": {}
																}
															},
															"id": 2381,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "19590:10:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2382,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2212,
															"src": "19602:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "31",
															"id": 2383,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "19611:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															}
														],
														"id": 2376,
														"name": "_afterTokenTransfers",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2495,
														"src": "19563:20:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 2384,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "19563:50:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2385,
												"nodeType": "ExpressionStatement",
												"src": "19563:50:9"
											},
											{
												"id": 2389,
												"nodeType": "UncheckedBlock",
												"src": "19715:51:9",
												"statements": [
													{
														"expression": {
															"id": 2387,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "++",
															"prefix": false,
															"src": "19740:14:9",
															"subExpression": {
																"id": 2386,
																"name": "_burnCounter",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1060,
																"src": "19740:12:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2388,
														"nodeType": "ExpressionStatement",
														"src": "19740:14:9"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2210,
										"nodeType": "StructuredDocumentation",
										"src": "17144:215:9",
										"text": " @dev Destroys `tokenId`.\n The approval is cleared when the token is burned.\n Requirements:\n - `tokenId` must exist.\n Emits a {Transfer} event."
									},
									"id": 2391,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "17374:5:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2215,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2212,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "17388:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 2391,
												"src": "17380:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2211,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "17380:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2214,
												"mutability": "mutable",
												"name": "approvalCheck",
												"nameLocation": "17402:13:9",
												"nodeType": "VariableDeclaration",
												"scope": 2391,
												"src": "17397:18:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2213,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "17397:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17379:37:9"
									},
									"returnParameters": {
										"id": 2216,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "17434:0:9"
									},
									"scope": 2496,
									"src": "17365:2408:9",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2413,
										"nodeType": "Block",
										"src": "19995:92:9",
										"statements": [
											{
												"expression": {
													"id": 2405,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 2401,
															"name": "_tokenApprovals",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1078,
															"src": "20006:15:9",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
																"typeString": "mapping(uint256 => address)"
															}
														},
														"id": 2403,
														"indexExpression": {
															"id": 2402,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2396,
															"src": "20022:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "20006:24:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2404,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2394,
														"src": "20033:2:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "20006:29:9",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 2406,
												"nodeType": "ExpressionStatement",
												"src": "20006:29:9"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 2408,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2398,
															"src": "20060:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2409,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2394,
															"src": "20067:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2410,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2396,
															"src": "20071:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2407,
														"name": "Approval",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 23,
														"src": "20051:8:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 2411,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "20051:28:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2412,
												"nodeType": "EmitStatement",
												"src": "20046:33:9"
											}
										]
									},
									"documentation": {
										"id": 2392,
										"nodeType": "StructuredDocumentation",
										"src": "19781:104:9",
										"text": " @dev Approve `to` to operate on `tokenId`\n Emits a {Approval} event."
									},
									"id": 2414,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "19900:8:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2399,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2394,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "19927:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 2414,
												"src": "19919:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2393,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "19919:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2396,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "19948:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 2414,
												"src": "19940:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2395,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "19940:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2398,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "19974:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 2414,
												"src": "19966:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2397,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "19966:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "19908:78:9"
									},
									"returnParameters": {
										"id": 2400,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "19995:0:9"
									},
									"scope": 2496,
									"src": "19891:196:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 2468,
										"nodeType": "Block",
										"src": "20748:498:9",
										"statements": [
											{
												"clauses": [
													{
														"block": {
															"id": 2449,
															"nodeType": "Block",
															"src": "20860:89:9",
															"statements": [
																{
																	"expression": {
																		"commonType": {
																			"typeIdentifier": "t_bytes4",
																			"typeString": "bytes4"
																		},
																		"id": 2447,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2441,
																			"name": "retval",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2439,
																			"src": "20882:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"expression": {
																				"expression": {
																					"arguments": [
																						{
																							"id": 2443,
																							"name": "to",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 2419,
																							"src": "20908:2:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						],
																						"id": 2442,
																						"name": "IERC721Receiver",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 133,
																						"src": "20892:15:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_contract$_IERC721Receiver_$133_$",
																							"typeString": "type(contract IERC721Receiver)"
																						}
																					},
																					"id": 2444,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "20892:19:9",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC721Receiver_$133",
																						"typeString": "contract IERC721Receiver"
																					}
																				},
																				"id": 2445,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "onERC721Received",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 132,
																				"src": "20892:36:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$",
																					"typeString": "function (address,address,uint256,bytes memory) external returns (bytes4)"
																				}
																			},
																			"id": 2446,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "selector",
																			"nodeType": "MemberAccess",
																			"src": "20892:45:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			}
																		},
																		"src": "20882:55:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"functionReturnParameters": 2427,
																	"id": 2448,
																	"nodeType": "Return",
																	"src": "20875:62:9"
																}
															]
														},
														"errorName": "",
														"id": 2450,
														"nodeType": "TryCatchClause",
														"parameters": {
															"id": 2440,
															"nodeType": "ParameterList",
															"parameters": [
																{
																	"constant": false,
																	"id": 2439,
																	"mutability": "mutable",
																	"name": "retval",
																	"nameLocation": "20852:6:9",
																	"nodeType": "VariableDeclaration",
																	"scope": 2450,
																	"src": "20845:13:9",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	"typeName": {
																		"id": 2438,
																		"name": "bytes4",
																		"nodeType": "ElementaryTypeName",
																		"src": "20845:6:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes4",
																			"typeString": "bytes4"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"src": "20844:15:9"
														},
														"src": "20836:113:9"
													},
													{
														"block": {
															"id": 2465,
															"nodeType": "Block",
															"src": "20978:261:9",
															"statements": [
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2457,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"expression": {
																				"id": 2454,
																				"name": "reason",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2452,
																				"src": "20997:6:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			"id": 2455,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "length",
																			"nodeType": "MemberAccess",
																			"src": "20997:13:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 2456,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "21014:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "20997:18:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"falseBody": {
																		"id": 2463,
																		"nodeType": "Block",
																		"src": "21105:123:9",
																		"statements": [
																			{
																				"AST": {
																					"nodeType": "YulBlock",
																					"src": "21133:80:9",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"kind": "number",
																												"nodeType": "YulLiteral",
																												"src": "21167:2:9",
																												"type": "",
																												"value": "32"
																											},
																											{
																												"name": "reason",
																												"nodeType": "YulIdentifier",
																												"src": "21171:6:9"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nodeType": "YulIdentifier",
																											"src": "21163:3:9"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "21163:15:9"
																									},
																									{
																										"arguments": [
																											{
																												"name": "reason",
																												"nodeType": "YulIdentifier",
																												"src": "21186:6:9"
																											}
																										],
																										"functionName": {
																											"name": "mload",
																											"nodeType": "YulIdentifier",
																											"src": "21180:5:9"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "21180:13:9"
																									}
																								],
																								"functionName": {
																									"name": "revert",
																									"nodeType": "YulIdentifier",
																									"src": "21156:6:9"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "21156:38:9"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "21156:38:9"
																						}
																					]
																				},
																				"evmVersion": "london",
																				"externalReferences": [
																					{
																						"declaration": 2452,
																						"isOffset": false,
																						"isSlot": false,
																						"src": "21171:6:9",
																						"valueSize": 1
																					},
																					{
																						"declaration": 2452,
																						"isOffset": false,
																						"isSlot": false,
																						"src": "21186:6:9",
																						"valueSize": 1
																					}
																				],
																				"id": 2462,
																				"nodeType": "InlineAssembly",
																				"src": "21124:89:9"
																			}
																		]
																	},
																	"id": 2464,
																	"nodeType": "IfStatement",
																	"src": "20993:235:9",
																	"trueBody": {
																		"id": 2461,
																		"nodeType": "Block",
																		"src": "21017:82:9",
																		"statements": [
																			{
																				"errorCall": {
																					"arguments": [],
																					"expression": {
																						"argumentTypes": [],
																						"id": 2458,
																						"name": "TransferToNonERC721ReceiverImplementer",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2549,
																						"src": "21043:38:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_error_pure$__$returns$__$",
																							"typeString": "function () pure"
																						}
																					},
																					"id": 2459,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "21043:40:9",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_tuple$__$",
																						"typeString": "tuple()"
																					}
																				},
																				"id": 2460,
																				"nodeType": "RevertStatement",
																				"src": "21036:47:9"
																			}
																		]
																	}
																}
															]
														},
														"errorName": "",
														"id": 2466,
														"nodeType": "TryCatchClause",
														"parameters": {
															"id": 2453,
															"nodeType": "ParameterList",
															"parameters": [
																{
																	"constant": false,
																	"id": 2452,
																	"mutability": "mutable",
																	"name": "reason",
																	"nameLocation": "20970:6:9",
																	"nodeType": "VariableDeclaration",
																	"scope": 2466,
																	"src": "20957:19:9",
																	"stateVariable": false,
																	"storageLocation": "memory",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes"
																	},
																	"typeName": {
																		"id": 2451,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "20957:5:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_storage_ptr",
																			"typeString": "bytes"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"src": "20956:21:9"
														},
														"src": "20950:289:9"
													}
												],
												"externalCall": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2432,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 467,
																"src": "20800:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 2433,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "20800:12:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2434,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2417,
															"src": "20814:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2435,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2421,
															"src": "20820:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2436,
															"name": "_data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2423,
															"src": "20829:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 2429,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2419,
																	"src": "20779:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 2428,
																"name": "IERC721Receiver",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 133,
																"src": "20763:15:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC721Receiver_$133_$",
																	"typeString": "type(contract IERC721Receiver)"
																}
															},
															"id": 2430,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "20763:19:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC721Receiver_$133",
																"typeString": "contract IERC721Receiver"
															}
														},
														"id": 2431,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "onERC721Received",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 132,
														"src": "20763:36:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$",
															"typeString": "function (address,address,uint256,bytes memory) external returns (bytes4)"
														}
													},
													"id": 2437,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "20763:72:9",
													"tryCall": true,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"id": 2467,
												"nodeType": "TryStatement",
												"src": "20759:480:9"
											}
										]
									},
									"documentation": {
										"id": 2415,
										"nodeType": "StructuredDocumentation",
										"src": "20095:478:9",
										"text": " @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\n @param from address representing the previous owner of the given token ID\n @param to target address that will receive the tokens\n @param tokenId uint256 ID of the token to be transferred\n @param _data bytes optional data to send along with the call\n @return bool whether the call correctly returned the expected magic value"
									},
									"id": 2469,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkContractOnERC721Received",
									"nameLocation": "20588:30:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2424,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2417,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "20637:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 2469,
												"src": "20629:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2416,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "20629:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2419,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "20660:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 2469,
												"src": "20652:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2418,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "20652:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2421,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "20681:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 2469,
												"src": "20673:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2420,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "20673:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2423,
												"mutability": "mutable",
												"name": "_data",
												"nameLocation": "20712:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 2469,
												"src": "20699:18:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2422,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "20699:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "20618:106:9"
									},
									"returnParameters": {
										"id": 2427,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2426,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2469,
												"src": "20742:4:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2425,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "20742:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "20741:6:9"
									},
									"scope": 2496,
									"src": "20579:667:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 2481,
										"nodeType": "Block",
										"src": "22051:2:9",
										"statements": []
									},
									"documentation": {
										"id": 2470,
										"nodeType": "StructuredDocumentation",
										"src": "21254:634:9",
										"text": " @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\n And also called before burning one token.\n startTokenId - the first token id to be transferred\n quantity - the amount to be transferred\n Calling conditions:\n - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n transferred to `to`.\n - When `from` is zero, `tokenId` will be minted for `to`.\n - When `to` is zero, `tokenId` will be burned by `from`.\n - `from` and `to` are never both zero."
									},
									"id": 2482,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_beforeTokenTransfers",
									"nameLocation": "21903:21:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2479,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2472,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "21943:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 2482,
												"src": "21935:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2471,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "21935:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2474,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "21966:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 2482,
												"src": "21958:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2473,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "21958:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2476,
												"mutability": "mutable",
												"name": "startTokenId",
												"nameLocation": "21987:12:9",
												"nodeType": "VariableDeclaration",
												"scope": 2482,
												"src": "21979:20:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2475,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "21979:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2478,
												"mutability": "mutable",
												"name": "quantity",
												"nameLocation": "22018:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 2482,
												"src": "22010:16:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2477,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "22010:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "21924:109:9"
									},
									"returnParameters": {
										"id": 2480,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "22051:0:9"
									},
									"scope": 2496,
									"src": "21894:159:9",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2494,
										"nodeType": "Block",
										"src": "22868:2:9",
										"statements": []
									},
									"documentation": {
										"id": 2483,
										"nodeType": "StructuredDocumentation",
										"src": "22061:645:9",
										"text": " @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\n minting.\n And also called after one token has been burned.\n startTokenId - the first token id to be transferred\n quantity - the amount to be transferred\n Calling conditions:\n - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\n transferred to `to`.\n - When `from` is zero, `tokenId` has been minted for `to`.\n - When `to` is zero, `tokenId` has been burned by `from`.\n - `from` and `to` are never both zero."
									},
									"id": 2495,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_afterTokenTransfers",
									"nameLocation": "22721:20:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2492,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2485,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "22760:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 2495,
												"src": "22752:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2484,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "22752:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2487,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "22783:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 2495,
												"src": "22775:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2486,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "22775:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2489,
												"mutability": "mutable",
												"name": "startTokenId",
												"nameLocation": "22804:12:9",
												"nodeType": "VariableDeclaration",
												"scope": 2495,
												"src": "22796:20:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2488,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "22796:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2491,
												"mutability": "mutable",
												"name": "quantity",
												"nameLocation": "22835:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 2495,
												"src": "22827:16:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2490,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "22827:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "22741:109:9"
									},
									"returnParameters": {
										"id": 2493,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "22868:0:9"
									},
									"scope": 2496,
									"src": "22712:158:9",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 2497,
							"src": "1018:21855:9",
							"usedErrors": [
								2519,
								2522,
								2525,
								2528,
								2531,
								2534,
								2537,
								2540,
								2543,
								2546,
								2549,
								2552,
								2555
							]
						}
					],
					"src": "88:22785:9"
				},
				"id": 9
			},
			"ERC721A/IDCF.sol": {
				"ast": {
					"absolutePath": "ERC721A/IDCF.sol",
					"exportedSymbols": {
						"IDCF": [
							2507
						]
					},
					"id": 2508,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2498,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "88:23:10"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IDCF",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2499,
								"nodeType": "StructuredDocumentation",
								"src": "119:61:10",
								"text": " @dev Interface of an ERC721A compliant contract."
							},
							"fullyImplemented": false,
							"id": 2507,
							"linearizedBaseContracts": [
								2507
							],
							"name": "IDCF",
							"nameLocation": "192:4:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"functionSelector": "325b272a",
									"id": 2506,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "BlockScore",
									"nameLocation": "221:10:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2502,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2501,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "240:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 2506,
												"src": "232:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2500,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "232:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "231:14:10"
									},
									"returnParameters": {
										"id": 2505,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2504,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2506,
												"src": "267:4:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2503,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "267:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "266:6:10"
									},
									"scope": 2507,
									"src": "212:61:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2508,
							"src": "182:96:10",
							"usedErrors": []
						}
					],
					"src": "88:190:10"
				},
				"id": 10
			},
			"ERC721A/IERC721A.sol": {
				"ast": {
					"absolutePath": "ERC721A/IERC721A.sol",
					"exportedSymbols": {
						"IERC165": [
							716
						],
						"IERC721": [
							115
						],
						"IERC721A": [
							2578
						],
						"IERC721Metadata": [
							160
						]
					},
					"id": 2579,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2509,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "88:23:11"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"file": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"id": 2510,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2579,
							"sourceUnit": 116,
							"src": "115:58:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
							"file": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
							"id": 2511,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2579,
							"sourceUnit": 161,
							"src": "175:77:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 2513,
										"name": "IERC721",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 115,
										"src": "341:7:11"
									},
									"id": 2514,
									"nodeType": "InheritanceSpecifier",
									"src": "341:7:11"
								},
								{
									"baseName": {
										"id": 2515,
										"name": "IERC721Metadata",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 160,
										"src": "350:15:11"
									},
									"id": 2516,
									"nodeType": "InheritanceSpecifier",
									"src": "350:15:11"
								}
							],
							"canonicalName": "IERC721A",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2512,
								"nodeType": "StructuredDocumentation",
								"src": "256:61:11",
								"text": " @dev Interface of an ERC721A compliant contract."
							},
							"fullyImplemented": false,
							"id": 2578,
							"linearizedBaseContracts": [
								2578,
								160,
								115,
								716
							],
							"name": "IERC721A",
							"nameLocation": "329:8:11",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2517,
										"nodeType": "StructuredDocumentation",
										"src": "373:78:11",
										"text": " The caller must own the token or be an approved operator."
									},
									"errorSelector": "cfb3b942",
									"id": 2519,
									"name": "ApprovalCallerNotOwnerNorApproved",
									"nameLocation": "463:33:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2518,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "496:2:11"
									},
									"src": "457:42:11"
								},
								{
									"documentation": {
										"id": 2520,
										"nodeType": "StructuredDocumentation",
										"src": "507:46:11",
										"text": " The token does not exist."
									},
									"errorSelector": "cf4700e4",
									"id": 2522,
									"name": "ApprovalQueryForNonexistentToken",
									"nameLocation": "565:32:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2521,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "597:2:11"
									},
									"src": "559:41:11"
								},
								{
									"documentation": {
										"id": 2523,
										"nodeType": "StructuredDocumentation",
										"src": "608:68:11",
										"text": " The caller cannot approve to their own address."
									},
									"errorSelector": "b06307db",
									"id": 2525,
									"name": "ApproveToCaller",
									"nameLocation": "688:15:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2524,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "703:2:11"
									},
									"src": "682:24:11"
								},
								{
									"documentation": {
										"id": 2526,
										"nodeType": "StructuredDocumentation",
										"src": "714:68:11",
										"text": " The caller cannot approve to the current owner."
									},
									"errorSelector": "943f7b8c",
									"id": 2528,
									"name": "ApprovalToCurrentOwner",
									"nameLocation": "794:22:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2527,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "816:2:11"
									},
									"src": "788:31:11"
								},
								{
									"documentation": {
										"id": 2529,
										"nodeType": "StructuredDocumentation",
										"src": "827:67:11",
										"text": " Cannot query the balance for the zero address."
									},
									"errorSelector": "8f4eb604",
									"id": 2531,
									"name": "BalanceQueryForZeroAddress",
									"nameLocation": "906:26:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2530,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "932:2:11"
									},
									"src": "900:35:11"
								},
								{
									"documentation": {
										"id": 2532,
										"nodeType": "StructuredDocumentation",
										"src": "943:53:11",
										"text": " Cannot mint to the zero address."
									},
									"errorSelector": "2e076300",
									"id": 2534,
									"name": "MintToZeroAddress",
									"nameLocation": "1008:17:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2533,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1025:2:11"
									},
									"src": "1002:26:11"
								},
								{
									"documentation": {
										"id": 2535,
										"nodeType": "StructuredDocumentation",
										"src": "1036:74:11",
										"text": " The quantity of tokens minted must be more than zero."
									},
									"errorSelector": "b562e8dd",
									"id": 2537,
									"name": "MintZeroQuantity",
									"nameLocation": "1122:16:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2536,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1138:2:11"
									},
									"src": "1116:25:11"
								},
								{
									"documentation": {
										"id": 2538,
										"nodeType": "StructuredDocumentation",
										"src": "1149:46:11",
										"text": " The token does not exist."
									},
									"errorSelector": "df2d9b42",
									"id": 2540,
									"name": "OwnerQueryForNonexistentToken",
									"nameLocation": "1207:29:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2539,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1236:2:11"
									},
									"src": "1201:38:11"
								},
								{
									"documentation": {
										"id": 2541,
										"nodeType": "StructuredDocumentation",
										"src": "1247:78:11",
										"text": " The caller must own the token or be an approved operator."
									},
									"errorSelector": "59c896be",
									"id": 2543,
									"name": "TransferCallerNotOwnerNorApproved",
									"nameLocation": "1337:33:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2542,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1370:2:11"
									},
									"src": "1331:42:11"
								},
								{
									"documentation": {
										"id": 2544,
										"nodeType": "StructuredDocumentation",
										"src": "1381:55:11",
										"text": " The token must be owned by `from`."
									},
									"errorSelector": "a1148100",
									"id": 2546,
									"name": "TransferFromIncorrectOwner",
									"nameLocation": "1448:26:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2545,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1474:2:11"
									},
									"src": "1442:35:11"
								},
								{
									"documentation": {
										"id": 2547,
										"nodeType": "StructuredDocumentation",
										"src": "1485:111:11",
										"text": " Cannot safely transfer to a contract that does not implement the ERC721Receiver interface."
									},
									"errorSelector": "d1a57ed6",
									"id": 2549,
									"name": "TransferToNonERC721ReceiverImplementer",
									"nameLocation": "1608:38:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2548,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1646:2:11"
									},
									"src": "1602:47:11"
								},
								{
									"documentation": {
										"id": 2550,
										"nodeType": "StructuredDocumentation",
										"src": "1657:57:11",
										"text": " Cannot transfer to the zero address."
									},
									"errorSelector": "ea553b34",
									"id": 2552,
									"name": "TransferToZeroAddress",
									"nameLocation": "1726:21:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2551,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1747:2:11"
									},
									"src": "1720:30:11"
								},
								{
									"documentation": {
										"id": 2553,
										"nodeType": "StructuredDocumentation",
										"src": "1758:46:11",
										"text": " The token does not exist."
									},
									"errorSelector": "a14c4b50",
									"id": 2555,
									"name": "URIQueryForNonexistentToken",
									"nameLocation": "1816:27:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2554,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1843:2:11"
									},
									"src": "1810:36:11"
								},
								{
									"canonicalName": "IERC721A.TokenOwnership",
									"id": 2562,
									"members": [
										{
											"constant": false,
											"id": 2557,
											"mutability": "mutable",
											"name": "addr",
											"nameLocation": "1992:4:11",
											"nodeType": "VariableDeclaration",
											"scope": 2562,
											"src": "1984:12:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 2556,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1984:7:11",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2559,
											"mutability": "mutable",
											"name": "startTimestamp",
											"nameLocation": "2107:14:11",
											"nodeType": "VariableDeclaration",
											"scope": 2562,
											"src": "2100:21:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint64",
												"typeString": "uint64"
											},
											"typeName": {
												"id": 2558,
												"name": "uint64",
												"nodeType": "ElementaryTypeName",
												"src": "2100:6:11",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2561,
											"mutability": "mutable",
											"name": "burned",
											"nameLocation": "2184:6:11",
											"nodeType": "VariableDeclaration",
											"scope": 2562,
											"src": "2179:11:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 2560,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "2179:4:11",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "TokenOwnership",
									"nameLocation": "1920:14:11",
									"nodeType": "StructDefinition",
									"scope": 2578,
									"src": "1913:285:11",
									"visibility": "public"
								},
								{
									"canonicalName": "IERC721A.AddressData",
									"id": 2571,
									"members": [
										{
											"constant": false,
											"id": 2564,
											"mutability": "mutable",
											"name": "balance",
											"nameLocation": "2358:7:11",
											"nodeType": "VariableDeclaration",
											"scope": 2571,
											"src": "2351:14:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint64",
												"typeString": "uint64"
											},
											"typeName": {
												"id": 2563,
												"name": "uint64",
												"nodeType": "ElementaryTypeName",
												"src": "2351:6:11",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2566,
											"mutability": "mutable",
											"name": "numberMinted",
											"nameLocation": "2459:12:11",
											"nodeType": "VariableDeclaration",
											"scope": 2571,
											"src": "2452:19:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint64",
												"typeString": "uint64"
											},
											"typeName": {
												"id": 2565,
												"name": "uint64",
												"nodeType": "ElementaryTypeName",
												"src": "2452:6:11",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2568,
											"mutability": "mutable",
											"name": "numberBurned",
											"nameLocation": "2565:12:11",
											"nodeType": "VariableDeclaration",
											"scope": 2571,
											"src": "2558:19:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint64",
												"typeString": "uint64"
											},
											"typeName": {
												"id": 2567,
												"name": "uint64",
												"nodeType": "ElementaryTypeName",
												"src": "2558:6:11",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 2570,
											"mutability": "mutable",
											"name": "aux",
											"nameLocation": "2796:3:11",
											"nodeType": "VariableDeclaration",
											"scope": 2571,
											"src": "2789:10:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint64",
												"typeString": "uint64"
											},
											"typeName": {
												"id": 2569,
												"name": "uint64",
												"nodeType": "ElementaryTypeName",
												"src": "2789:6:11",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "AddressData",
									"nameLocation": "2272:11:11",
									"nodeType": "StructDefinition",
									"scope": 2578,
									"src": "2265:542:11",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 2572,
										"nodeType": "StructuredDocumentation",
										"src": "2815:198:11",
										"text": " @dev Returns the total amount of tokens stored by the contract.\n \n Burned tokens are calculated here, use `_totalMinted()` if you want to count just minted tokens."
									},
									"functionSelector": "18160ddd",
									"id": 2577,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "3028:11:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2573,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3039:2:11"
									},
									"returnParameters": {
										"id": 2576,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2575,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2577,
												"src": "3065:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2574,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3065:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3064:9:11"
									},
									"scope": 2578,
									"src": "3019:55:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2579,
							"src": "319:2758:11",
							"usedErrors": [
								2519,
								2522,
								2525,
								2528,
								2531,
								2534,
								2537,
								2540,
								2543,
								2546,
								2549,
								2552,
								2555
							]
						}
					],
					"src": "88:2989:11"
				},
				"id": 11
			}
		}
	}
}