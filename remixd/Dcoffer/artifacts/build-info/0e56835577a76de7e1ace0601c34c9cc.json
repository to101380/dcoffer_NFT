{
	"id": "0e56835577a76de7e1ace0601c34c9cc",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.13",
	"solcLongVersion": "0.8.13+commit.abaa5c0e",
	"input": {
		"language": "Solidity",
		"sources": {
			"Dcoffer/treasury.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\r\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\r\nimport './IDCF/IDCF.sol';\r\n\r\ncontract treasury  {\r\n  using SafeMath for uint;  \r\n  IDCF mine = IDCF(0x6a544367FCa7064B6ADA5dc87F7E5058A9bB7Af9);\r\n  IERC20 dcoff =  IERC20(0xbE0C856e2981b9f03d7613566DFC6679eEe4708A);\r\n\r\n  uint256 DcoffperBlock;  \r\n  mapping(address => uint256 )private ScoreWithdrawn;\r\n\r\n  constructor(){\r\n    DcoffperBlock = 2e14;\r\n  }\r\n\r\n\r\n  function MineDcoff()external{\r\n      uint256 afterScore = Score(msg.sender);\r\n      uint256 GetDCF = afterScore.mul(DcoffperBlock);\r\n      dcoff.transfer(msg.sender,GetDCF);\r\n      ScoreWithdrawn[msg.sender] = ScoreWithdrawn[msg.sender].add(afterScore);\r\n  }  \r\n\r\n  function Score(address user)internal view returns(uint256){\r\n      uint256 _Score = mine.BlockScore(user);\r\n      uint256 afterScore = _Score.sub(ScoreWithdrawn[user]);\r\n      return afterScore;\r\n  }\r\n\r\n   \r\n  \r\n\r\n}"
			},
			"Dcoffer/IDCF/IDCF.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// ERC721A Contracts v3.3.0\r\n// Creator: Chiru Labs\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of an ERC721A compliant contract.\r\n */\r\ninterface IDCF  {\r\n   \r\n\r\n    function BlockScore(address user)external view returns(uint);\r\n\r\n}"
			},
			"@openzeppelin/contracts/utils/math/SafeMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/math/SafeMath.sol": {
				"SafeMath": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":482:6782  library SafeMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":482:6782  library SafeMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122096cd1b093a4397f8438b96b89f783006275ebc2fa9dc186c5dc5b69d2e218b7764736f6c634300080d0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122096cd1b093a4397f8438b96b89f783006275ebc2fa9dc186c5dc5b69d2e218b7764736f6c634300080d0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP7 0xCD SHL MULMOD GASPRICE NUMBER SWAP8 0xF8 NUMBER DUP12 SWAP7 0xB8 SWAP16 PUSH25 0x3006275EBC2FA9DC186C5DC5B69D2E218B7764736F6C634300 ADDMOD 0xD STOP CALLER ",
							"sourceMap": "482:6300:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122096cd1b093a4397f8438b96b89f783006275ebc2fa9dc186c5dc5b69d2e218b7764736f6c634300080d0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP7 0xCD SHL MULMOD GASPRICE NUMBER SWAP8 0xF8 NUMBER DUP12 SWAP7 0xB8 SWAP16 PUSH25 0x3006275EBC2FA9DC186C5DC5B69D2E218B7764736F6C634300 ADDMOD 0xD STOP CALLER ",
							"sourceMap": "482:6300:1:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"add(uint256,uint256)": "infinite",
								"div(uint256,uint256)": "infinite",
								"div(uint256,uint256,string memory)": "infinite",
								"mod(uint256,uint256)": "infinite",
								"mod(uint256,uint256,string memory)": "infinite",
								"mul(uint256,uint256)": "infinite",
								"sub(uint256,uint256)": "infinite",
								"sub(uint256,uint256,string memory)": "infinite",
								"tryAdd(uint256,uint256)": "infinite",
								"tryDiv(uint256,uint256)": "infinite",
								"tryMod(uint256,uint256)": "infinite",
								"tryMul(uint256,uint256)": "infinite",
								"trySub(uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH #[$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH [$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 1,
									"value": "B"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "CODECOPY",
									"source": 1
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "BYTE",
									"source": 1
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 1,
									"value": "73"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "EQ",
									"source": 1
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 1,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 1,
									"value": "4"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 1,
									"value": "24"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "REVERT",
									"source": 1
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "tag",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "ADDRESS",
									"source": 1
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 1,
									"value": "73"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "MSTORE8",
									"source": 1
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "RETURN",
									"source": 1
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122096cd1b093a4397f8438b96b89f783006275ebc2fa9dc186c5dc5b69d2e218b7764736f6c634300080d0033",
									".code": [
										{
											"begin": 482,
											"end": 6782,
											"name": "PUSHDEPLOYADDRESS",
											"source": 1
										},
										{
											"begin": 482,
											"end": 6782,
											"name": "ADDRESS",
											"source": 1
										},
										{
											"begin": 482,
											"end": 6782,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 482,
											"end": 6782,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 482,
											"end": 6782,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 482,
											"end": 6782,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 482,
											"end": 6782,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 482,
											"end": 6782,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 482,
											"end": 6782,
											"name": "REVERT",
											"source": 1
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://864a40efcffdf408044c332a5aa38ec5618ed7b4eecb8f65faf45671bd6cdc65\",\"dweb:/ipfs/QmQJquTMtc6fgm5JQzGdsGpA2fqBe3MHWEdt2qzaLySMdN\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"Dcoffer/IDCF/IDCF.sol": {
				"IDCF": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								}
							],
							"name": "BlockScore",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of an ERC721A compliant contract.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"BlockScore(address)": "325b272a"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"BlockScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of an ERC721A compliant contract.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"Dcoffer/IDCF/IDCF.sol\":\"IDCF\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"Dcoffer/IDCF/IDCF.sol\":{\"keccak256\":\"0x46f37359686638f9b09b85b67546f013da80a49dcbf195b3d27d0462cfacf135\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://715b10cc638500e1a1755f8612a35d906e2cf5a919629926ae43d51bace05911\",\"dweb:/ipfs/Qmb2Nxbut2U6yrr1hoqWj28VFPE7sGvG3BHbTfNnAkuVkM\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"Dcoffer/treasury.sol": {
				"treasury": {
					"abi": [
						{
							"inputs": [],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "MineDcoff",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"Dcoffer/treasury.sol\":206:1018  contract treasury  {... */\n  mstore(0x40, 0x80)\n    /* \"Dcoffer/treasury.sol\":277:319  0x6a544367FCa7064B6ADA5dc87F7E5058A9bB7Af9 */\n  0x6a544367fca7064b6ada5dc87f7e5058a9bb7af9\n    /* \"Dcoffer/treasury.sol\":260:320  IDCF mine = IDCF(0x6a544367FCa7064B6ADA5dc87F7E5058A9bB7Af9) */\n  0x00\n  dup1\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"Dcoffer/treasury.sol\":348:390  0xbE0C856e2981b9f03d7613566DFC6679eEe4708A */\n  0xbe0c856e2981b9f03d7613566dfc6679eee4708a\n    /* \"Dcoffer/treasury.sol\":325:391  IERC20 dcoff =  IERC20(0xbE0C856e2981b9f03d7613566DFC6679eEe4708A) */\n  0x01\n  exp(0x0100, 0x00)\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"Dcoffer/treasury.sol\":483:529  constructor(){... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n    /* \"Dcoffer/treasury.sol\":519:523  2e14 */\n  0xb5e620f48000\n    /* \"Dcoffer/treasury.sol\":503:516  DcoffperBlock */\n  0x02\n    /* \"Dcoffer/treasury.sol\":503:523  DcoffperBlock = 2e14 */\n  dup2\n  swap1\n  sstore\n  pop\n    /* \"Dcoffer/treasury.sol\":206:1018  contract treasury  {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"Dcoffer/treasury.sol\":206:1018  contract treasury  {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x8bed4778\n      eq\n      tag_3\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"Dcoffer/treasury.sol\":537:795  function MineDcoff()external{... */\n    tag_3:\n      tag_4\n      tag_5\n      jump\t// in\n    tag_4:\n      stop\n    tag_5:\n        /* \"Dcoffer/treasury.sol\":574:592  uint256 afterScore */\n      0x00\n        /* \"Dcoffer/treasury.sol\":595:612  Score(msg.sender) */\n      tag_7\n        /* \"Dcoffer/treasury.sol\":601:611  msg.sender */\n      caller\n        /* \"Dcoffer/treasury.sol\":595:600  Score */\n      tag_8\n        /* \"Dcoffer/treasury.sol\":595:612  Score(msg.sender) */\n      jump\t// in\n    tag_7:\n        /* \"Dcoffer/treasury.sol\":574:612  uint256 afterScore = Score(msg.sender) */\n      swap1\n      pop\n        /* \"Dcoffer/treasury.sol\":621:635  uint256 GetDCF */\n      0x00\n        /* \"Dcoffer/treasury.sol\":638:667  afterScore.mul(DcoffperBlock) */\n      tag_9\n        /* \"Dcoffer/treasury.sol\":653:666  DcoffperBlock */\n      sload(0x02)\n        /* \"Dcoffer/treasury.sol\":638:648  afterScore */\n      dup4\n        /* \"Dcoffer/treasury.sol\":638:652  afterScore.mul */\n      tag_10\n      swap1\n        /* \"Dcoffer/treasury.sol\":638:667  afterScore.mul(DcoffperBlock) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_9:\n        /* \"Dcoffer/treasury.sol\":621:667  uint256 GetDCF = afterScore.mul(DcoffperBlock) */\n      swap1\n      pop\n        /* \"Dcoffer/treasury.sol\":676:681  dcoff */\n      0x01\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"Dcoffer/treasury.sol\":676:690  dcoff.transfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xa9059cbb\n        /* \"Dcoffer/treasury.sol\":691:701  msg.sender */\n      caller\n        /* \"Dcoffer/treasury.sol\":702:708  GetDCF */\n      dup4\n        /* \"Dcoffer/treasury.sol\":676:709  dcoff.transfer(msg.sender,GetDCF) */\n      mload(0x40)\n      dup4\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_11\n      swap3\n      swap2\n      swap1\n      tag_12\n      jump\t// in\n    tag_11:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_14\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_14:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_15\n      swap2\n      swap1\n      tag_16\n      jump\t// in\n    tag_15:\n      pop\n        /* \"Dcoffer/treasury.sol\":747:789  ScoreWithdrawn[msg.sender].add(afterScore) */\n      tag_17\n        /* \"Dcoffer/treasury.sol\":778:788  afterScore */\n      dup3\n        /* \"Dcoffer/treasury.sol\":747:761  ScoreWithdrawn */\n      0x03\n        /* \"Dcoffer/treasury.sol\":747:773  ScoreWithdrawn[msg.sender] */\n      0x00\n        /* \"Dcoffer/treasury.sol\":762:772  msg.sender */\n      caller\n        /* \"Dcoffer/treasury.sol\":747:773  ScoreWithdrawn[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"Dcoffer/treasury.sol\":747:777  ScoreWithdrawn[msg.sender].add */\n      tag_18\n      swap1\n        /* \"Dcoffer/treasury.sol\":747:789  ScoreWithdrawn[msg.sender].add(afterScore) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_17:\n        /* \"Dcoffer/treasury.sol\":718:732  ScoreWithdrawn */\n      0x03\n        /* \"Dcoffer/treasury.sol\":718:744  ScoreWithdrawn[msg.sender] */\n      0x00\n        /* \"Dcoffer/treasury.sol\":733:743  msg.sender */\n      caller\n        /* \"Dcoffer/treasury.sol\":718:744  ScoreWithdrawn[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"Dcoffer/treasury.sol\":718:789  ScoreWithdrawn[msg.sender] = ScoreWithdrawn[msg.sender].add(afterScore) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"Dcoffer/treasury.sol\":565:795  {... */\n      pop\n      pop\n        /* \"Dcoffer/treasury.sol\":537:795  function MineDcoff()external{... */\n      jump\t// out\n        /* \"Dcoffer/treasury.sol\":803:1002  function Score(address user)internal view returns(uint256){... */\n    tag_8:\n        /* \"Dcoffer/treasury.sol\":853:860  uint256 */\n      0x00\n        /* \"Dcoffer/treasury.sol\":870:884  uint256 _Score */\n      dup1\n        /* \"Dcoffer/treasury.sol\":887:891  mine */\n      0x00\n      dup1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"Dcoffer/treasury.sol\":887:902  mine.BlockScore */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x325b272a\n        /* \"Dcoffer/treasury.sol\":903:907  user */\n      dup5\n        /* \"Dcoffer/treasury.sol\":887:908  mine.BlockScore(user) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_20\n      swap2\n      swap1\n      tag_21\n      jump\t// in\n    tag_20:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_23\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_23:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_24\n      swap2\n      swap1\n      tag_25\n      jump\t// in\n    tag_24:\n        /* \"Dcoffer/treasury.sol\":870:908  uint256 _Score = mine.BlockScore(user) */\n      swap1\n      pop\n        /* \"Dcoffer/treasury.sol\":917:935  uint256 afterScore */\n      0x00\n        /* \"Dcoffer/treasury.sol\":938:970  _Score.sub(ScoreWithdrawn[user]) */\n      tag_26\n        /* \"Dcoffer/treasury.sol\":949:963  ScoreWithdrawn */\n      0x03\n        /* \"Dcoffer/treasury.sol\":949:969  ScoreWithdrawn[user] */\n      0x00\n        /* \"Dcoffer/treasury.sol\":964:968  user */\n      dup7\n        /* \"Dcoffer/treasury.sol\":949:969  ScoreWithdrawn[user] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"Dcoffer/treasury.sol\":938:944  _Score */\n      dup4\n        /* \"Dcoffer/treasury.sol\":938:948  _Score.sub */\n      tag_27\n      swap1\n        /* \"Dcoffer/treasury.sol\":938:970  _Score.sub(ScoreWithdrawn[user]) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_26:\n        /* \"Dcoffer/treasury.sol\":917:970  uint256 afterScore = _Score.sub(ScoreWithdrawn[user]) */\n      swap1\n      pop\n        /* \"Dcoffer/treasury.sol\":986:996  afterScore */\n      dup1\n        /* \"Dcoffer/treasury.sol\":979:996  return afterScore */\n      swap3\n      pop\n      pop\n      pop\n        /* \"Dcoffer/treasury.sol\":803:1002  function Score(address user)internal view returns(uint256){... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3465:3561  function mul(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_10:\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3523:3530  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3553:3554  b */\n      dup2\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3549:3550  a */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3549:3554  a * b */\n      tag_29\n      swap2\n      swap1\n      tag_30\n      jump\t// in\n    tag_29:\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3542:3554  return a * b */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3465:3561  function mul(uint256 a, uint256 b) internal pure returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":2755:2851  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_18:\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":2813:2820  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":2843:2844  b */\n      dup2\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":2839:2840  a */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":2839:2844  a + b */\n      tag_32\n      swap2\n      swap1\n      tag_33\n      jump\t// in\n    tag_32:\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":2832:2844  return a + b */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":2755:2851  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3122:3218  function sub(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_27:\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3180:3187  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3210:3211  b */\n      dup2\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3206:3207  a */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3206:3211  a - b */\n      tag_35\n      swap2\n      swap1\n      tag_36\n      jump\t// in\n    tag_35:\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3199:3211  return a - b */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3122:3218  function sub(uint256 a, uint256 b) internal pure returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7:133   */\n    tag_37:\n        /* \"#utility.yul\":44:51   */\n      0x00\n        /* \"#utility.yul\":84:126   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":77:82   */\n      dup3\n        /* \"#utility.yul\":73:127   */\n      and\n        /* \"#utility.yul\":62:127   */\n      swap1\n      pop\n        /* \"#utility.yul\":7:133   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":139:235   */\n    tag_38:\n        /* \"#utility.yul\":176:183   */\n      0x00\n        /* \"#utility.yul\":205:229   */\n      tag_54\n        /* \"#utility.yul\":223:228   */\n      dup3\n        /* \"#utility.yul\":205:229   */\n      tag_37\n      jump\t// in\n    tag_54:\n        /* \"#utility.yul\":194:229   */\n      swap1\n      pop\n        /* \"#utility.yul\":139:235   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":241:359   */\n    tag_39:\n        /* \"#utility.yul\":328:352   */\n      tag_56\n        /* \"#utility.yul\":346:351   */\n      dup2\n        /* \"#utility.yul\":328:352   */\n      tag_38\n      jump\t// in\n    tag_56:\n        /* \"#utility.yul\":323:326   */\n      dup3\n        /* \"#utility.yul\":316:353   */\n      mstore\n        /* \"#utility.yul\":241:359   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":365:442   */\n    tag_40:\n        /* \"#utility.yul\":402:409   */\n      0x00\n        /* \"#utility.yul\":431:436   */\n      dup2\n        /* \"#utility.yul\":420:436   */\n      swap1\n      pop\n        /* \"#utility.yul\":365:442   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":448:566   */\n    tag_41:\n        /* \"#utility.yul\":535:559   */\n      tag_59\n        /* \"#utility.yul\":553:558   */\n      dup2\n        /* \"#utility.yul\":535:559   */\n      tag_40\n      jump\t// in\n    tag_59:\n        /* \"#utility.yul\":530:533   */\n      dup3\n        /* \"#utility.yul\":523:560   */\n      mstore\n        /* \"#utility.yul\":448:566   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":572:904   */\n    tag_12:\n        /* \"#utility.yul\":693:697   */\n      0x00\n        /* \"#utility.yul\":731:733   */\n      0x40\n        /* \"#utility.yul\":720:729   */\n      dup3\n        /* \"#utility.yul\":716:734   */\n      add\n        /* \"#utility.yul\":708:734   */\n      swap1\n      pop\n        /* \"#utility.yul\":744:815   */\n      tag_61\n        /* \"#utility.yul\":812:813   */\n      0x00\n        /* \"#utility.yul\":801:810   */\n      dup4\n        /* \"#utility.yul\":797:814   */\n      add\n        /* \"#utility.yul\":788:794   */\n      dup6\n        /* \"#utility.yul\":744:815   */\n      tag_39\n      jump\t// in\n    tag_61:\n        /* \"#utility.yul\":825:897   */\n      tag_62\n        /* \"#utility.yul\":893:895   */\n      0x20\n        /* \"#utility.yul\":882:891   */\n      dup4\n        /* \"#utility.yul\":878:896   */\n      add\n        /* \"#utility.yul\":869:875   */\n      dup5\n        /* \"#utility.yul\":825:897   */\n      tag_41\n      jump\t// in\n    tag_62:\n        /* \"#utility.yul\":572:904   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":991:1108   */\n    tag_43:\n        /* \"#utility.yul\":1100:1101   */\n      0x00\n        /* \"#utility.yul\":1097:1098   */\n      dup1\n        /* \"#utility.yul\":1090:1102   */\n      revert\n        /* \"#utility.yul\":1237:1327   */\n    tag_45:\n        /* \"#utility.yul\":1271:1278   */\n      0x00\n        /* \"#utility.yul\":1314:1319   */\n      dup2\n        /* \"#utility.yul\":1307:1320   */\n      iszero\n        /* \"#utility.yul\":1300:1321   */\n      iszero\n        /* \"#utility.yul\":1289:1321   */\n      swap1\n      pop\n        /* \"#utility.yul\":1237:1327   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1333:1449   */\n    tag_46:\n        /* \"#utility.yul\":1403:1424   */\n      tag_68\n        /* \"#utility.yul\":1418:1423   */\n      dup2\n        /* \"#utility.yul\":1403:1424   */\n      tag_45\n      jump\t// in\n    tag_68:\n        /* \"#utility.yul\":1396:1401   */\n      dup2\n        /* \"#utility.yul\":1393:1425   */\n      eq\n        /* \"#utility.yul\":1383:1443   */\n      tag_69\n      jumpi\n        /* \"#utility.yul\":1439:1440   */\n      0x00\n        /* \"#utility.yul\":1436:1437   */\n      dup1\n        /* \"#utility.yul\":1429:1441   */\n      revert\n        /* \"#utility.yul\":1383:1443   */\n    tag_69:\n        /* \"#utility.yul\":1333:1449   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1455:1592   */\n    tag_47:\n        /* \"#utility.yul\":1509:1514   */\n      0x00\n        /* \"#utility.yul\":1540:1546   */\n      dup2\n        /* \"#utility.yul\":1534:1547   */\n      mload\n        /* \"#utility.yul\":1525:1547   */\n      swap1\n      pop\n        /* \"#utility.yul\":1556:1586   */\n      tag_71\n        /* \"#utility.yul\":1580:1585   */\n      dup2\n        /* \"#utility.yul\":1556:1586   */\n      tag_46\n      jump\t// in\n    tag_71:\n        /* \"#utility.yul\":1455:1592   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1598:1943   */\n    tag_16:\n        /* \"#utility.yul\":1665:1671   */\n      0x00\n        /* \"#utility.yul\":1714:1716   */\n      0x20\n        /* \"#utility.yul\":1702:1711   */\n      dup3\n        /* \"#utility.yul\":1693:1700   */\n      dup5\n        /* \"#utility.yul\":1689:1712   */\n      sub\n        /* \"#utility.yul\":1685:1717   */\n      slt\n        /* \"#utility.yul\":1682:1801   */\n      iszero\n      tag_73\n      jumpi\n        /* \"#utility.yul\":1720:1799   */\n      tag_74\n      tag_43\n      jump\t// in\n    tag_74:\n        /* \"#utility.yul\":1682:1801   */\n    tag_73:\n        /* \"#utility.yul\":1840:1841   */\n      0x00\n        /* \"#utility.yul\":1865:1926   */\n      tag_75\n        /* \"#utility.yul\":1918:1925   */\n      dup5\n        /* \"#utility.yul\":1909:1915   */\n      dup3\n        /* \"#utility.yul\":1898:1907   */\n      dup6\n        /* \"#utility.yul\":1894:1916   */\n      add\n        /* \"#utility.yul\":1865:1926   */\n      tag_47\n      jump\t// in\n    tag_75:\n        /* \"#utility.yul\":1855:1926   */\n      swap2\n      pop\n        /* \"#utility.yul\":1811:1936   */\n      pop\n        /* \"#utility.yul\":1598:1943   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1949:2171   */\n    tag_21:\n        /* \"#utility.yul\":2042:2046   */\n      0x00\n        /* \"#utility.yul\":2080:2082   */\n      0x20\n        /* \"#utility.yul\":2069:2078   */\n      dup3\n        /* \"#utility.yul\":2065:2083   */\n      add\n        /* \"#utility.yul\":2057:2083   */\n      swap1\n      pop\n        /* \"#utility.yul\":2093:2164   */\n      tag_77\n        /* \"#utility.yul\":2161:2162   */\n      0x00\n        /* \"#utility.yul\":2150:2159   */\n      dup4\n        /* \"#utility.yul\":2146:2163   */\n      add\n        /* \"#utility.yul\":2137:2143   */\n      dup5\n        /* \"#utility.yul\":2093:2164   */\n      tag_39\n      jump\t// in\n    tag_77:\n        /* \"#utility.yul\":1949:2171   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2177:2299   */\n    tag_48:\n        /* \"#utility.yul\":2250:2274   */\n      tag_79\n        /* \"#utility.yul\":2268:2273   */\n      dup2\n        /* \"#utility.yul\":2250:2274   */\n      tag_40\n      jump\t// in\n    tag_79:\n        /* \"#utility.yul\":2243:2248   */\n      dup2\n        /* \"#utility.yul\":2240:2275   */\n      eq\n        /* \"#utility.yul\":2230:2293   */\n      tag_80\n      jumpi\n        /* \"#utility.yul\":2289:2290   */\n      0x00\n        /* \"#utility.yul\":2286:2287   */\n      dup1\n        /* \"#utility.yul\":2279:2291   */\n      revert\n        /* \"#utility.yul\":2230:2293   */\n    tag_80:\n        /* \"#utility.yul\":2177:2299   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2305:2448   */\n    tag_49:\n        /* \"#utility.yul\":2362:2367   */\n      0x00\n        /* \"#utility.yul\":2393:2399   */\n      dup2\n        /* \"#utility.yul\":2387:2400   */\n      mload\n        /* \"#utility.yul\":2378:2400   */\n      swap1\n      pop\n        /* \"#utility.yul\":2409:2442   */\n      tag_82\n        /* \"#utility.yul\":2436:2441   */\n      dup2\n        /* \"#utility.yul\":2409:2442   */\n      tag_48\n      jump\t// in\n    tag_82:\n        /* \"#utility.yul\":2305:2448   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2454:2805   */\n    tag_25:\n        /* \"#utility.yul\":2524:2530   */\n      0x00\n        /* \"#utility.yul\":2573:2575   */\n      0x20\n        /* \"#utility.yul\":2561:2570   */\n      dup3\n        /* \"#utility.yul\":2552:2559   */\n      dup5\n        /* \"#utility.yul\":2548:2571   */\n      sub\n        /* \"#utility.yul\":2544:2576   */\n      slt\n        /* \"#utility.yul\":2541:2660   */\n      iszero\n      tag_84\n      jumpi\n        /* \"#utility.yul\":2579:2658   */\n      tag_85\n      tag_43\n      jump\t// in\n    tag_85:\n        /* \"#utility.yul\":2541:2660   */\n    tag_84:\n        /* \"#utility.yul\":2699:2700   */\n      0x00\n        /* \"#utility.yul\":2724:2788   */\n      tag_86\n        /* \"#utility.yul\":2780:2787   */\n      dup5\n        /* \"#utility.yul\":2771:2777   */\n      dup3\n        /* \"#utility.yul\":2760:2769   */\n      dup6\n        /* \"#utility.yul\":2756:2778   */\n      add\n        /* \"#utility.yul\":2724:2788   */\n      tag_49\n      jump\t// in\n    tag_86:\n        /* \"#utility.yul\":2714:2788   */\n      swap2\n      pop\n        /* \"#utility.yul\":2670:2798   */\n      pop\n        /* \"#utility.yul\":2454:2805   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2811:2991   */\n    tag_50:\n        /* \"#utility.yul\":2859:2936   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":2856:2857   */\n      0x00\n        /* \"#utility.yul\":2849:2937   */\n      mstore\n        /* \"#utility.yul\":2956:2960   */\n      0x11\n        /* \"#utility.yul\":2953:2954   */\n      0x04\n        /* \"#utility.yul\":2946:2961   */\n      mstore\n        /* \"#utility.yul\":2980:2984   */\n      0x24\n        /* \"#utility.yul\":2977:2978   */\n      0x00\n        /* \"#utility.yul\":2970:2985   */\n      revert\n        /* \"#utility.yul\":2997:3345   */\n    tag_30:\n        /* \"#utility.yul\":3037:3044   */\n      0x00\n        /* \"#utility.yul\":3060:3080   */\n      tag_89\n        /* \"#utility.yul\":3078:3079   */\n      dup3\n        /* \"#utility.yul\":3060:3080   */\n      tag_40\n      jump\t// in\n    tag_89:\n        /* \"#utility.yul\":3055:3080   */\n      swap2\n      pop\n        /* \"#utility.yul\":3094:3114   */\n      tag_90\n        /* \"#utility.yul\":3112:3113   */\n      dup4\n        /* \"#utility.yul\":3094:3114   */\n      tag_40\n      jump\t// in\n    tag_90:\n        /* \"#utility.yul\":3089:3114   */\n      swap3\n      pop\n        /* \"#utility.yul\":3282:3283   */\n      dup2\n        /* \"#utility.yul\":3214:3280   */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":3210:3284   */\n      div\n        /* \"#utility.yul\":3207:3208   */\n      dup4\n        /* \"#utility.yul\":3204:3285   */\n      gt\n        /* \"#utility.yul\":3199:3200   */\n      dup3\n        /* \"#utility.yul\":3192:3201   */\n      iszero\n        /* \"#utility.yul\":3185:3202   */\n      iszero\n        /* \"#utility.yul\":3181:3286   */\n      and\n        /* \"#utility.yul\":3178:3309   */\n      iszero\n      tag_91\n      jumpi\n        /* \"#utility.yul\":3289:3307   */\n      tag_92\n      tag_50\n      jump\t// in\n    tag_92:\n        /* \"#utility.yul\":3178:3309   */\n    tag_91:\n        /* \"#utility.yul\":3337:3338   */\n      dup3\n        /* \"#utility.yul\":3334:3335   */\n      dup3\n        /* \"#utility.yul\":3330:3339   */\n      mul\n        /* \"#utility.yul\":3319:3339   */\n      swap1\n      pop\n        /* \"#utility.yul\":2997:3345   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3351:3656   */\n    tag_33:\n        /* \"#utility.yul\":3391:3394   */\n      0x00\n        /* \"#utility.yul\":3410:3430   */\n      tag_94\n        /* \"#utility.yul\":3428:3429   */\n      dup3\n        /* \"#utility.yul\":3410:3430   */\n      tag_40\n      jump\t// in\n    tag_94:\n        /* \"#utility.yul\":3405:3430   */\n      swap2\n      pop\n        /* \"#utility.yul\":3444:3464   */\n      tag_95\n        /* \"#utility.yul\":3462:3463   */\n      dup4\n        /* \"#utility.yul\":3444:3464   */\n      tag_40\n      jump\t// in\n    tag_95:\n        /* \"#utility.yul\":3439:3464   */\n      swap3\n      pop\n        /* \"#utility.yul\":3598:3599   */\n      dup3\n        /* \"#utility.yul\":3530:3596   */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":3526:3600   */\n      sub\n        /* \"#utility.yul\":3523:3524   */\n      dup3\n        /* \"#utility.yul\":3520:3601   */\n      gt\n        /* \"#utility.yul\":3517:3624   */\n      iszero\n      tag_96\n      jumpi\n        /* \"#utility.yul\":3604:3622   */\n      tag_97\n      tag_50\n      jump\t// in\n    tag_97:\n        /* \"#utility.yul\":3517:3624   */\n    tag_96:\n        /* \"#utility.yul\":3648:3649   */\n      dup3\n        /* \"#utility.yul\":3645:3646   */\n      dup3\n        /* \"#utility.yul\":3641:3650   */\n      add\n        /* \"#utility.yul\":3634:3650   */\n      swap1\n      pop\n        /* \"#utility.yul\":3351:3656   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3662:3853   */\n    tag_36:\n        /* \"#utility.yul\":3702:3706   */\n      0x00\n        /* \"#utility.yul\":3722:3742   */\n      tag_99\n        /* \"#utility.yul\":3740:3741   */\n      dup3\n        /* \"#utility.yul\":3722:3742   */\n      tag_40\n      jump\t// in\n    tag_99:\n        /* \"#utility.yul\":3717:3742   */\n      swap2\n      pop\n        /* \"#utility.yul\":3756:3776   */\n      tag_100\n        /* \"#utility.yul\":3774:3775   */\n      dup4\n        /* \"#utility.yul\":3756:3776   */\n      tag_40\n      jump\t// in\n    tag_100:\n        /* \"#utility.yul\":3751:3776   */\n      swap3\n      pop\n        /* \"#utility.yul\":3795:3796   */\n      dup3\n        /* \"#utility.yul\":3792:3793   */\n      dup3\n        /* \"#utility.yul\":3789:3797   */\n      lt\n        /* \"#utility.yul\":3786:3820   */\n      iszero\n      tag_101\n      jumpi\n        /* \"#utility.yul\":3800:3818   */\n      tag_102\n      tag_50\n      jump\t// in\n    tag_102:\n        /* \"#utility.yul\":3786:3820   */\n    tag_101:\n        /* \"#utility.yul\":3845:3846   */\n      dup3\n        /* \"#utility.yul\":3842:3843   */\n      dup3\n        /* \"#utility.yul\":3838:3847   */\n      sub\n        /* \"#utility.yul\":3830:3847   */\n      swap1\n      pop\n        /* \"#utility.yul\":3662:3853   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220bcc17f7d4307e19d34b5059c3e2fe8341123638faba91083fd04f52d0118e86664736f6c634300080d0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_434": {
									"entryPoint": null,
									"id": 434,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080604052736a544367fca7064b6ada5dc87f7e5058a9bb7af96000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073be0c856e2981b9f03d7613566dfc6679eee4708a600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503480156100b957600080fd5b5065b5e620f48000600281905550610585806100d66000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80638bed477814610030575b600080fd5b61003861003a565b005b60006100453361019a565b9050600061005e6002548361029990919063ffffffff16565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016100bd929190610335565b6020604051808303816000875af11580156100dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610100919061039b565b5061015382600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546102af90919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663325b272a846040518263ffffffff1660e01b81526004016101f691906103c8565b602060405180830381865afa158015610213573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610237919061040f565b9050600061028d600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836102c590919063ffffffff16565b90508092505050919050565b600081836102a7919061046b565b905092915050565b600081836102bd91906104c5565b905092915050565b600081836102d3919061051b565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610306826102db565b9050919050565b610316816102fb565b82525050565b6000819050919050565b61032f8161031c565b82525050565b600060408201905061034a600083018561030d565b6103576020830184610326565b9392505050565b600080fd5b60008115159050919050565b61037881610363565b811461038357600080fd5b50565b6000815190506103958161036f565b92915050565b6000602082840312156103b1576103b061035e565b5b60006103bf84828501610386565b91505092915050565b60006020820190506103dd600083018461030d565b92915050565b6103ec8161031c565b81146103f757600080fd5b50565b600081519050610409816103e3565b92915050565b6000602082840312156104255761042461035e565b5b6000610433848285016103fa565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006104768261031c565b91506104818361031c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156104ba576104b961043c565b5b828202905092915050565b60006104d08261031c565b91506104db8361031c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156105105761050f61043c565b5b828201905092915050565b60006105268261031c565b91506105318361031c565b9250828210156105445761054361043c565b5b82820390509291505056fea2646970667358221220bcc17f7d4307e19d34b5059c3e2fe8341123638faba91083fd04f52d0118e86664736f6c634300080d0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH20 0x6A544367FCA7064B6ADA5DC87F7E5058A9BB7AF9 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH20 0xBE0C856E2981B9F03D7613566DFC6679EEE4708A PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLVALUE DUP1 ISZERO PUSH2 0xB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH6 0xB5E620F48000 PUSH1 0x2 DUP2 SWAP1 SSTORE POP PUSH2 0x585 DUP1 PUSH2 0xD6 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8BED4778 EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x38 PUSH2 0x3A JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH2 0x45 CALLER PUSH2 0x19A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x5E PUSH1 0x2 SLOAD DUP4 PUSH2 0x299 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB CALLER DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBD SWAP3 SWAP2 SWAP1 PUSH2 0x335 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xDC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x100 SWAP2 SWAP1 PUSH2 0x39B JUMP JUMPDEST POP PUSH2 0x153 DUP3 PUSH1 0x3 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x2AF SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x325B272A DUP5 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F6 SWAP2 SWAP1 PUSH2 0x3C8 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x213 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x237 SWAP2 SWAP1 PUSH2 0x40F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x28D PUSH1 0x3 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP4 PUSH2 0x2C5 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 PUSH2 0x2A7 SWAP2 SWAP1 PUSH2 0x46B JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 PUSH2 0x2BD SWAP2 SWAP1 PUSH2 0x4C5 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 PUSH2 0x2D3 SWAP2 SWAP1 PUSH2 0x51B JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x306 DUP3 PUSH2 0x2DB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x316 DUP2 PUSH2 0x2FB JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x32F DUP2 PUSH2 0x31C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x34A PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x30D JUMP JUMPDEST PUSH2 0x357 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x326 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x378 DUP2 PUSH2 0x363 JUMP JUMPDEST DUP2 EQ PUSH2 0x383 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x395 DUP2 PUSH2 0x36F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3B1 JUMPI PUSH2 0x3B0 PUSH2 0x35E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3BF DUP5 DUP3 DUP6 ADD PUSH2 0x386 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3DD PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x30D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3EC DUP2 PUSH2 0x31C JUMP JUMPDEST DUP2 EQ PUSH2 0x3F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x409 DUP2 PUSH2 0x3E3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x425 JUMPI PUSH2 0x424 PUSH2 0x35E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x433 DUP5 DUP3 DUP6 ADD PUSH2 0x3FA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x476 DUP3 PUSH2 0x31C JUMP JUMPDEST SWAP2 POP PUSH2 0x481 DUP4 PUSH2 0x31C JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x4BA JUMPI PUSH2 0x4B9 PUSH2 0x43C JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4D0 DUP3 PUSH2 0x31C JUMP JUMPDEST SWAP2 POP PUSH2 0x4DB DUP4 PUSH2 0x31C JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x510 JUMPI PUSH2 0x50F PUSH2 0x43C JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x526 DUP3 PUSH2 0x31C JUMP JUMPDEST SWAP2 POP PUSH2 0x531 DUP4 PUSH2 0x31C JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x544 JUMPI PUSH2 0x543 PUSH2 0x43C JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBC 0xC1 PUSH32 0x7D4307E19D34B5059C3E2FE8341123638FABA91083FD04F52D0118E86664736F PUSH13 0x634300080D0033000000000000 ",
							"sourceMap": "206:812:3:-:0;;;277:42;260:60;;;;;;;;;;;;;;;;;;;;348:42;325:66;;;;;;;;;;;;;;;;;;;;483:46;;;;;;;;;;519:4;503:13;:20;;;;206:812;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@MineDcoff_473": {
									"entryPoint": 58,
									"id": 473,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@Score_499": {
									"entryPoint": 410,
									"id": 499,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@add_253": {
									"entryPoint": 687,
									"id": 253,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@mul_283": {
									"entryPoint": 665,
									"id": 283,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@sub_268": {
									"entryPoint": 709,
									"id": 268,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_bool_fromMemory": {
									"entryPoint": 902,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint256_fromMemory": {
									"entryPoint": 1018,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_bool_fromMemory": {
									"entryPoint": 923,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256_fromMemory": {
									"entryPoint": 1039,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_address_to_t_address_fromStack": {
									"entryPoint": 781,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_uint256_to_t_uint256_fromStack": {
									"entryPoint": 806,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": 968,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": 821,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 1221,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 1131,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 1307,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 763,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bool": {
									"entryPoint": 867,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 731,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint256": {
									"entryPoint": 796,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 1084,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 862,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"validator_revert_t_bool": {
									"entryPoint": 879,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint256": {
									"entryPoint": 995,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:3856:4",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "52:81:4",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "62:65:4",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "77:5:4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "84:42:4",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "73:3:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "73:54:4"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "62:7:4"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "34:5:4",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "44:7:4",
														"type": ""
													}
												],
												"src": "7:126:4"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "184:51:4",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "194:35:4",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "223:5:4"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "205:17:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "205:24:4"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "194:7:4"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "166:5:4",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "176:7:4",
														"type": ""
													}
												],
												"src": "139:96:4"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "306:53:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "323:3:4"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "346:5:4"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "328:17:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "328:24:4"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "316:6:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "316:37:4"
															},
															"nodeType": "YulExpressionStatement",
															"src": "316:37:4"
														}
													]
												},
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "294:5:4",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "301:3:4",
														"type": ""
													}
												],
												"src": "241:118:4"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "410:32:4",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "420:16:4",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "431:5:4"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "420:7:4"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "392:5:4",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "402:7:4",
														"type": ""
													}
												],
												"src": "365:77:4"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "513:53:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "530:3:4"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "553:5:4"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "535:17:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "535:24:4"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "523:6:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "523:37:4"
															},
															"nodeType": "YulExpressionStatement",
															"src": "523:37:4"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "501:5:4",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "508:3:4",
														"type": ""
													}
												],
												"src": "448:118:4"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "698:206:4",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "708:26:4",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "720:9:4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "731:2:4",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "716:3:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "716:18:4"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "708:4:4"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "788:6:4"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "801:9:4"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "812:1:4",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "797:3:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "797:17:4"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "744:43:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "744:71:4"
															},
															"nodeType": "YulExpressionStatement",
															"src": "744:71:4"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "869:6:4"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "882:9:4"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "893:2:4",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "878:3:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "878:18:4"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "825:43:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "825:72:4"
															},
															"nodeType": "YulExpressionStatement",
															"src": "825:72:4"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "662:9:4",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "674:6:4",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "682:6:4",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "693:4:4",
														"type": ""
													}
												],
												"src": "572:332:4"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "950:35:4",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "960:19:4",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "976:2:4",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "970:5:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "970:9:4"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "960:6:4"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "943:6:4",
														"type": ""
													}
												],
												"src": "910:75:4"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1080:28:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1097:1:4",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1100:1:4",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1090:6:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "1090:12:4"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1090:12:4"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nodeType": "YulFunctionDefinition",
												"src": "991:117:4"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1203:28:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1220:1:4",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1223:1:4",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1213:6:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "1213:12:4"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1213:12:4"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nodeType": "YulFunctionDefinition",
												"src": "1114:117:4"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1279:48:4",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1289:32:4",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1314:5:4"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "1307:6:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1307:13:4"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1300:6:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "1300:21:4"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "1289:7:4"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1261:5:4",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "1271:7:4",
														"type": ""
													}
												],
												"src": "1237:90:4"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1373:76:4",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1427:16:4",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1436:1:4",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1439:1:4",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1429:6:4"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1429:12:4"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1429:12:4"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1396:5:4"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1418:5:4"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_bool",
																					"nodeType": "YulIdentifier",
																					"src": "1403:14:4"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1403:21:4"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "1393:2:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1393:32:4"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1386:6:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "1386:40:4"
															},
															"nodeType": "YulIf",
															"src": "1383:60:4"
														}
													]
												},
												"name": "validator_revert_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1366:5:4",
														"type": ""
													}
												],
												"src": "1333:116:4"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1515:77:4",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1525:22:4",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1540:6:4"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1534:5:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "1534:13:4"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "1525:5:4"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1580:5:4"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_bool",
																	"nodeType": "YulIdentifier",
																	"src": "1556:23:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "1556:30:4"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1556:30:4"
														}
													]
												},
												"name": "abi_decode_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "1493:6:4",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "1501:3:4",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1509:5:4",
														"type": ""
													}
												],
												"src": "1455:137:4"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1672:271:4",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1718:83:4",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "1720:77:4"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1720:79:4"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1720:79:4"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1693:7:4"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1702:9:4"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1689:3:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1689:23:4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1714:2:4",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1685:3:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "1685:32:4"
															},
															"nodeType": "YulIf",
															"src": "1682:119:4"
														},
														{
															"nodeType": "YulBlock",
															"src": "1811:125:4",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1826:15:4",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1840:1:4",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1830:6:4",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1855:71:4",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1898:9:4"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1909:6:4"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1894:3:4"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1894:22:4"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1918:7:4"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bool_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "1865:28:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1865:61:4"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "1855:6:4"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1642:9:4",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1653:7:4",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1665:6:4",
														"type": ""
													}
												],
												"src": "1598:345:4"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2047:124:4",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2057:26:4",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2069:9:4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2080:2:4",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2065:3:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "2065:18:4"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2057:4:4"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2137:6:4"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2150:9:4"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2161:1:4",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2146:3:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2146:17:4"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "2093:43:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "2093:71:4"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2093:71:4"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2019:9:4",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2031:6:4",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2042:4:4",
														"type": ""
													}
												],
												"src": "1949:222:4"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2220:79:4",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2277:16:4",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2286:1:4",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2289:1:4",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2279:6:4"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2279:12:4"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2279:12:4"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2243:5:4"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "2268:5:4"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nodeType": "YulIdentifier",
																					"src": "2250:17:4"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2250:24:4"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "2240:2:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2240:35:4"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2233:6:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "2233:43:4"
															},
															"nodeType": "YulIf",
															"src": "2230:63:4"
														}
													]
												},
												"name": "validator_revert_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2213:5:4",
														"type": ""
													}
												],
												"src": "2177:122:4"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2368:80:4",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2378:22:4",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "2393:6:4"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "2387:5:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "2387:13:4"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "2378:5:4"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2436:5:4"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "2409:26:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "2409:33:4"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2409:33:4"
														}
													]
												},
												"name": "abi_decode_t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "2346:6:4",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "2354:3:4",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2362:5:4",
														"type": ""
													}
												],
												"src": "2305:143:4"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2531:274:4",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2577:83:4",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "2579:77:4"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2579:79:4"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2579:79:4"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2552:7:4"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2561:9:4"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2548:3:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2548:23:4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2573:2:4",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2544:3:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "2544:32:4"
															},
															"nodeType": "YulIf",
															"src": "2541:119:4"
														},
														{
															"nodeType": "YulBlock",
															"src": "2670:128:4",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2685:15:4",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2699:1:4",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "2689:6:4",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2714:74:4",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2760:9:4"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2771:6:4"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2756:3:4"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2756:22:4"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2780:7:4"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "2724:31:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2724:64:4"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "2714:6:4"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2501:9:4",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2512:7:4",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2524:6:4",
														"type": ""
													}
												],
												"src": "2454:351:4"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2839:152:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2856:1:4",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2859:77:4",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2849:6:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "2849:88:4"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2849:88:4"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2953:1:4",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2956:4:4",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2946:6:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "2946:15:4"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2946:15:4"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2977:1:4",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2980:4:4",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2970:6:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "2970:15:4"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2970:15:4"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "2811:180:4"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3045:300:4",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3055:25:4",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3078:1:4"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "3060:17:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "3060:20:4"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "3055:1:4"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3089:25:4",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3112:1:4"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "3094:17:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "3094:20:4"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "3089:1:4"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3287:22:4",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "3289:16:4"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3289:18:4"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3289:18:4"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "3199:1:4"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "3192:6:4"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3192:9:4"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "3185:6:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3185:17:4"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "3207:1:4"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3214:66:4",
																						"type": "",
																						"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																					},
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "3282:1:4"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "3210:3:4"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3210:74:4"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "3204:2:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3204:81:4"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "3181:3:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "3181:105:4"
															},
															"nodeType": "YulIf",
															"src": "3178:131:4"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3319:20:4",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3334:1:4"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3337:1:4"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "3330:3:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "3330:9:4"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "3319:7:4"
																}
															]
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "3028:1:4",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "3031:1:4",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "3037:7:4",
														"type": ""
													}
												],
												"src": "2997:348:4"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3395:261:4",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3405:25:4",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3428:1:4"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "3410:17:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "3410:20:4"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "3405:1:4"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3439:25:4",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3462:1:4"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "3444:17:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "3444:20:4"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "3439:1:4"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3602:22:4",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "3604:16:4"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3604:18:4"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3604:18:4"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3523:1:4"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3530:66:4",
																				"type": "",
																				"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "3598:1:4"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3526:3:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3526:74:4"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3520:2:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "3520:81:4"
															},
															"nodeType": "YulIf",
															"src": "3517:107:4"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3634:16:4",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3645:1:4"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3648:1:4"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3641:3:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "3641:9:4"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "3634:3:4"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "3382:1:4",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "3385:1:4",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "3391:3:4",
														"type": ""
													}
												],
												"src": "3351:305:4"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3707:146:4",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3717:25:4",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3740:1:4"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "3722:17:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "3722:20:4"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "3717:1:4"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3751:25:4",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3774:1:4"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "3756:17:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "3756:20:4"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "3751:1:4"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3798:22:4",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "3800:16:4"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3800:18:4"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3800:18:4"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3792:1:4"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3795:1:4"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "3789:2:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "3789:8:4"
															},
															"nodeType": "YulIf",
															"src": "3786:34:4"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3830:17:4",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3842:1:4"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3845:1:4"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "3838:3:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "3838:9:4"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "3830:4:4"
																}
															]
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "3693:1:4",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "3696:1:4",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "3702:4:4",
														"type": ""
													}
												],
												"src": "3662:191:4"
											}
										]
									},
									"contents": "{\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x != 0 and y > (maxValue / x)\n        if and(iszero(iszero(x)), gt(y, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x))) { panic_error_0x11() }\n\n        product := mul(x, y)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x > (maxValue - y)\n        if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }\n\n        sum := add(x, y)\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        if lt(x, y) { panic_error_0x11() }\n\n        diff := sub(x, y)\n    }\n\n}\n",
									"id": 4,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b506004361061002b5760003560e01c80638bed477814610030575b600080fd5b61003861003a565b005b60006100453361019a565b9050600061005e6002548361029990919063ffffffff16565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016100bd929190610335565b6020604051808303816000875af11580156100dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610100919061039b565b5061015382600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546102af90919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663325b272a846040518263ffffffff1660e01b81526004016101f691906103c8565b602060405180830381865afa158015610213573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610237919061040f565b9050600061028d600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836102c590919063ffffffff16565b90508092505050919050565b600081836102a7919061046b565b905092915050565b600081836102bd91906104c5565b905092915050565b600081836102d3919061051b565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610306826102db565b9050919050565b610316816102fb565b82525050565b6000819050919050565b61032f8161031c565b82525050565b600060408201905061034a600083018561030d565b6103576020830184610326565b9392505050565b600080fd5b60008115159050919050565b61037881610363565b811461038357600080fd5b50565b6000815190506103958161036f565b92915050565b6000602082840312156103b1576103b061035e565b5b60006103bf84828501610386565b91505092915050565b60006020820190506103dd600083018461030d565b92915050565b6103ec8161031c565b81146103f757600080fd5b50565b600081519050610409816103e3565b92915050565b6000602082840312156104255761042461035e565b5b6000610433848285016103fa565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006104768261031c565b91506104818361031c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156104ba576104b961043c565b5b828202905092915050565b60006104d08261031c565b91506104db8361031c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156105105761050f61043c565b5b828201905092915050565b60006105268261031c565b91506105318361031c565b9250828210156105445761054361043c565b5b82820390509291505056fea2646970667358221220bcc17f7d4307e19d34b5059c3e2fe8341123638faba91083fd04f52d0118e86664736f6c634300080d0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8BED4778 EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x38 PUSH2 0x3A JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH2 0x45 CALLER PUSH2 0x19A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x5E PUSH1 0x2 SLOAD DUP4 PUSH2 0x299 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB CALLER DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBD SWAP3 SWAP2 SWAP1 PUSH2 0x335 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xDC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x100 SWAP2 SWAP1 PUSH2 0x39B JUMP JUMPDEST POP PUSH2 0x153 DUP3 PUSH1 0x3 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x2AF SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x325B272A DUP5 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F6 SWAP2 SWAP1 PUSH2 0x3C8 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x213 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x237 SWAP2 SWAP1 PUSH2 0x40F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x28D PUSH1 0x3 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP4 PUSH2 0x2C5 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 PUSH2 0x2A7 SWAP2 SWAP1 PUSH2 0x46B JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 PUSH2 0x2BD SWAP2 SWAP1 PUSH2 0x4C5 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 PUSH2 0x2D3 SWAP2 SWAP1 PUSH2 0x51B JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x306 DUP3 PUSH2 0x2DB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x316 DUP2 PUSH2 0x2FB JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x32F DUP2 PUSH2 0x31C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x34A PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x30D JUMP JUMPDEST PUSH2 0x357 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x326 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x378 DUP2 PUSH2 0x363 JUMP JUMPDEST DUP2 EQ PUSH2 0x383 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x395 DUP2 PUSH2 0x36F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3B1 JUMPI PUSH2 0x3B0 PUSH2 0x35E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3BF DUP5 DUP3 DUP6 ADD PUSH2 0x386 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3DD PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x30D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3EC DUP2 PUSH2 0x31C JUMP JUMPDEST DUP2 EQ PUSH2 0x3F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x409 DUP2 PUSH2 0x3E3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x425 JUMPI PUSH2 0x424 PUSH2 0x35E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x433 DUP5 DUP3 DUP6 ADD PUSH2 0x3FA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x476 DUP3 PUSH2 0x31C JUMP JUMPDEST SWAP2 POP PUSH2 0x481 DUP4 PUSH2 0x31C JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x4BA JUMPI PUSH2 0x4B9 PUSH2 0x43C JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4D0 DUP3 PUSH2 0x31C JUMP JUMPDEST SWAP2 POP PUSH2 0x4DB DUP4 PUSH2 0x31C JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x510 JUMPI PUSH2 0x50F PUSH2 0x43C JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x526 DUP3 PUSH2 0x31C JUMP JUMPDEST SWAP2 POP PUSH2 0x531 DUP4 PUSH2 0x31C JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x544 JUMPI PUSH2 0x543 PUSH2 0x43C JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBC 0xC1 PUSH32 0x7D4307E19D34B5059C3E2FE8341123638FABA91083FD04F52D0118E86664736F PUSH13 0x634300080D0033000000000000 ",
							"sourceMap": "206:812:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;537:258;;;:::i;:::-;;;574:18;595:17;601:10;595:5;:17::i;:::-;574:38;;621:14;638:29;653:13;;638:10;:14;;:29;;;;:::i;:::-;621:46;;676:5;;;;;;;;;;;:14;;;691:10;702:6;676:33;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;747:42;778:10;747:14;:26;762:10;747:26;;;;;;;;;;;;;;;;:30;;:42;;;;:::i;:::-;718:14;:26;733:10;718:26;;;;;;;;;;;;;;;:71;;;;565:230;;537:258::o;803:199::-;853:7;870:14;887:4;;;;;;;;;;:15;;;903:4;887:21;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;870:38;;917:18;938:32;949:14;:20;964:4;949:20;;;;;;;;;;;;;;;;938:6;:10;;:32;;;;:::i;:::-;917:53;;986:10;979:17;;;;803:199;;;:::o;3465:96:1:-;3523:7;3553:1;3549;:5;;;;:::i;:::-;3542:12;;3465:96;;;;:::o;2755:::-;2813:7;2843:1;2839;:5;;;;:::i;:::-;2832:12;;2755:96;;;;:::o;3122:::-;3180:7;3210:1;3206;:5;;;;:::i;:::-;3199:12;;3122:96;;;;:::o;7:126:4:-;44:7;84:42;77:5;73:54;62:65;;7:126;;;:::o;139:96::-;176:7;205:24;223:5;205:24;:::i;:::-;194:35;;139:96;;;:::o;241:118::-;328:24;346:5;328:24;:::i;:::-;323:3;316:37;241:118;;:::o;365:77::-;402:7;431:5;420:16;;365:77;;;:::o;448:118::-;535:24;553:5;535:24;:::i;:::-;530:3;523:37;448:118;;:::o;572:332::-;693:4;731:2;720:9;716:18;708:26;;744:71;812:1;801:9;797:17;788:6;744:71;:::i;:::-;825:72;893:2;882:9;878:18;869:6;825:72;:::i;:::-;572:332;;;;;:::o;991:117::-;1100:1;1097;1090:12;1237:90;1271:7;1314:5;1307:13;1300:21;1289:32;;1237:90;;;:::o;1333:116::-;1403:21;1418:5;1403:21;:::i;:::-;1396:5;1393:32;1383:60;;1439:1;1436;1429:12;1383:60;1333:116;:::o;1455:137::-;1509:5;1540:6;1534:13;1525:22;;1556:30;1580:5;1556:30;:::i;:::-;1455:137;;;;:::o;1598:345::-;1665:6;1714:2;1702:9;1693:7;1689:23;1685:32;1682:119;;;1720:79;;:::i;:::-;1682:119;1840:1;1865:61;1918:7;1909:6;1898:9;1894:22;1865:61;:::i;:::-;1855:71;;1811:125;1598:345;;;;:::o;1949:222::-;2042:4;2080:2;2069:9;2065:18;2057:26;;2093:71;2161:1;2150:9;2146:17;2137:6;2093:71;:::i;:::-;1949:222;;;;:::o;2177:122::-;2250:24;2268:5;2250:24;:::i;:::-;2243:5;2240:35;2230:63;;2289:1;2286;2279:12;2230:63;2177:122;:::o;2305:143::-;2362:5;2393:6;2387:13;2378:22;;2409:33;2436:5;2409:33;:::i;:::-;2305:143;;;;:::o;2454:351::-;2524:6;2573:2;2561:9;2552:7;2548:23;2544:32;2541:119;;;2579:79;;:::i;:::-;2541:119;2699:1;2724:64;2780:7;2771:6;2760:9;2756:22;2724:64;:::i;:::-;2714:74;;2670:128;2454:351;;;;:::o;2811:180::-;2859:77;2856:1;2849:88;2956:4;2953:1;2946:15;2980:4;2977:1;2970:15;2997:348;3037:7;3060:20;3078:1;3060:20;:::i;:::-;3055:25;;3094:20;3112:1;3094:20;:::i;:::-;3089:25;;3282:1;3214:66;3210:74;3207:1;3204:81;3199:1;3192:9;3185:17;3181:105;3178:131;;;3289:18;;:::i;:::-;3178:131;3337:1;3334;3330:9;3319:20;;2997:348;;;;:::o;3351:305::-;3391:3;3410:20;3428:1;3410:20;:::i;:::-;3405:25;;3444:20;3462:1;3444:20;:::i;:::-;3439:25;;3598:1;3530:66;3526:74;3523:1;3520:81;3517:107;;;3604:18;;:::i;:::-;3517:107;3648:1;3645;3641:9;3634:16;;3351:305;;;;:::o;3662:191::-;3702:4;3722:20;3740:1;3722:20;:::i;:::-;3717:25;;3756:20;3774:1;3756:20;:::i;:::-;3751:25;;3795:1;3792;3789:8;3786:34;;;3800:18;;:::i;:::-;3786:34;3845:1;3842;3838:9;3830:17;;3662:191;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "282600",
								"executionCost": "70972",
								"totalCost": "353572"
							},
							"external": {
								"MineDcoff()": "infinite"
							},
							"internal": {
								"Score(address)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 206,
									"end": 1018,
									"name": "PUSH",
									"source": 3,
									"value": "80"
								},
								{
									"begin": 206,
									"end": 1018,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 206,
									"end": 1018,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 277,
									"end": 319,
									"name": "PUSH",
									"source": 3,
									"value": "6A544367FCA7064B6ADA5DC87F7E5058A9BB7AF9"
								},
								{
									"begin": 260,
									"end": 320,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 260,
									"end": 320,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 260,
									"end": 320,
									"name": "PUSH",
									"source": 3,
									"value": "100"
								},
								{
									"begin": 260,
									"end": 320,
									"name": "EXP",
									"source": 3
								},
								{
									"begin": 260,
									"end": 320,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 260,
									"end": 320,
									"name": "SLOAD",
									"source": 3
								},
								{
									"begin": 260,
									"end": 320,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 260,
									"end": 320,
									"name": "PUSH",
									"source": 3,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 260,
									"end": 320,
									"name": "MUL",
									"source": 3
								},
								{
									"begin": 260,
									"end": 320,
									"name": "NOT",
									"source": 3
								},
								{
									"begin": 260,
									"end": 320,
									"name": "AND",
									"source": 3
								},
								{
									"begin": 260,
									"end": 320,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 260,
									"end": 320,
									"name": "DUP4",
									"source": 3
								},
								{
									"begin": 260,
									"end": 320,
									"name": "PUSH",
									"source": 3,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 260,
									"end": 320,
									"name": "AND",
									"source": 3
								},
								{
									"begin": 260,
									"end": 320,
									"name": "MUL",
									"source": 3
								},
								{
									"begin": 260,
									"end": 320,
									"name": "OR",
									"source": 3
								},
								{
									"begin": 260,
									"end": 320,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 260,
									"end": 320,
									"name": "SSTORE",
									"source": 3
								},
								{
									"begin": 260,
									"end": 320,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 348,
									"end": 390,
									"name": "PUSH",
									"source": 3,
									"value": "BE0C856E2981B9F03D7613566DFC6679EEE4708A"
								},
								{
									"begin": 325,
									"end": 391,
									"name": "PUSH",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 325,
									"end": 391,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 325,
									"end": 391,
									"name": "PUSH",
									"source": 3,
									"value": "100"
								},
								{
									"begin": 325,
									"end": 391,
									"name": "EXP",
									"source": 3
								},
								{
									"begin": 325,
									"end": 391,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 325,
									"end": 391,
									"name": "SLOAD",
									"source": 3
								},
								{
									"begin": 325,
									"end": 391,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 325,
									"end": 391,
									"name": "PUSH",
									"source": 3,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 325,
									"end": 391,
									"name": "MUL",
									"source": 3
								},
								{
									"begin": 325,
									"end": 391,
									"name": "NOT",
									"source": 3
								},
								{
									"begin": 325,
									"end": 391,
									"name": "AND",
									"source": 3
								},
								{
									"begin": 325,
									"end": 391,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 325,
									"end": 391,
									"name": "DUP4",
									"source": 3
								},
								{
									"begin": 325,
									"end": 391,
									"name": "PUSH",
									"source": 3,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 325,
									"end": 391,
									"name": "AND",
									"source": 3
								},
								{
									"begin": 325,
									"end": 391,
									"name": "MUL",
									"source": 3
								},
								{
									"begin": 325,
									"end": 391,
									"name": "OR",
									"source": 3
								},
								{
									"begin": 325,
									"end": 391,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 325,
									"end": 391,
									"name": "SSTORE",
									"source": 3
								},
								{
									"begin": 325,
									"end": 391,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 483,
									"end": 529,
									"name": "CALLVALUE",
									"source": 3
								},
								{
									"begin": 483,
									"end": 529,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 483,
									"end": 529,
									"name": "ISZERO",
									"source": 3
								},
								{
									"begin": 483,
									"end": 529,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 483,
									"end": 529,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 483,
									"end": 529,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 483,
									"end": 529,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 483,
									"end": 529,
									"name": "REVERT",
									"source": 3
								},
								{
									"begin": 483,
									"end": 529,
									"name": "tag",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 483,
									"end": 529,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 483,
									"end": 529,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 519,
									"end": 523,
									"name": "PUSH",
									"source": 3,
									"value": "B5E620F48000"
								},
								{
									"begin": 503,
									"end": 516,
									"name": "PUSH",
									"source": 3,
									"value": "2"
								},
								{
									"begin": 503,
									"end": 523,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 503,
									"end": 523,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 503,
									"end": 523,
									"name": "SSTORE",
									"source": 3
								},
								{
									"begin": 503,
									"end": 523,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 206,
									"end": 1018,
									"name": "PUSH #[$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 206,
									"end": 1018,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 206,
									"end": 1018,
									"name": "PUSH [$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 206,
									"end": 1018,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 206,
									"end": 1018,
									"name": "CODECOPY",
									"source": 3
								},
								{
									"begin": 206,
									"end": 1018,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 206,
									"end": 1018,
									"name": "RETURN",
									"source": 3
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220bcc17f7d4307e19d34b5059c3e2fe8341123638faba91083fd04f52d0118e86664736f6c634300080d0033",
									".code": [
										{
											"begin": 206,
											"end": 1018,
											"name": "PUSH",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 206,
											"end": 1018,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 206,
											"end": 1018,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 206,
											"end": 1018,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 206,
											"end": 1018,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 206,
											"end": 1018,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 206,
											"end": 1018,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 206,
											"end": 1018,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 206,
											"end": 1018,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 206,
											"end": 1018,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 206,
											"end": 1018,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 206,
											"end": 1018,
											"name": "tag",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 206,
											"end": 1018,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 206,
											"end": 1018,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 206,
											"end": 1018,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 206,
											"end": 1018,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 206,
											"end": 1018,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 206,
											"end": 1018,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 206,
											"end": 1018,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 206,
											"end": 1018,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 206,
											"end": 1018,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 206,
											"end": 1018,
											"name": "PUSH",
											"source": 3,
											"value": "E0"
										},
										{
											"begin": 206,
											"end": 1018,
											"name": "SHR",
											"source": 3
										},
										{
											"begin": 206,
											"end": 1018,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 206,
											"end": 1018,
											"name": "PUSH",
											"source": 3,
											"value": "8BED4778"
										},
										{
											"begin": 206,
											"end": 1018,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 206,
											"end": 1018,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 206,
											"end": 1018,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 206,
											"end": 1018,
											"name": "tag",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 206,
											"end": 1018,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 206,
											"end": 1018,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 206,
											"end": 1018,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 206,
											"end": 1018,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 537,
											"end": 795,
											"name": "tag",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 537,
											"end": 795,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 537,
											"end": 795,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 537,
											"end": 795,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "5"
										},
										{
											"begin": 537,
											"end": 795,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 537,
											"end": 795,
											"name": "tag",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 537,
											"end": 795,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 537,
											"end": 795,
											"name": "STOP",
											"source": 3
										},
										{
											"begin": 537,
											"end": 795,
											"name": "tag",
											"source": 3,
											"value": "5"
										},
										{
											"begin": 537,
											"end": 795,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 574,
											"end": 592,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 595,
											"end": 612,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "7"
										},
										{
											"begin": 601,
											"end": 611,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 595,
											"end": 600,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "8"
										},
										{
											"begin": 595,
											"end": 612,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 595,
											"end": 612,
											"name": "tag",
											"source": 3,
											"value": "7"
										},
										{
											"begin": 595,
											"end": 612,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 574,
											"end": 612,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 574,
											"end": 612,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 621,
											"end": 635,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 638,
											"end": 667,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "9"
										},
										{
											"begin": 653,
											"end": 666,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 653,
											"end": 666,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 638,
											"end": 648,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 638,
											"end": 652,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "10"
										},
										{
											"begin": 638,
											"end": 652,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 638,
											"end": 667,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 638,
											"end": 667,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 638,
											"end": 667,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFF"
										},
										{
											"begin": 638,
											"end": 667,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 638,
											"end": 667,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 638,
											"end": 667,
											"name": "tag",
											"source": 3,
											"value": "9"
										},
										{
											"begin": 638,
											"end": 667,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 621,
											"end": 667,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 621,
											"end": 667,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 676,
											"end": 681,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 676,
											"end": 681,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 676,
											"end": 681,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 676,
											"end": 681,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 676,
											"end": 681,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 676,
											"end": 681,
											"name": "PUSH",
											"source": 3,
											"value": "100"
										},
										{
											"begin": 676,
											"end": 681,
											"name": "EXP",
											"source": 3
										},
										{
											"begin": 676,
											"end": 681,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 676,
											"end": 681,
											"name": "DIV",
											"source": 3
										},
										{
											"begin": 676,
											"end": 681,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 676,
											"end": 681,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 676,
											"end": 690,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 676,
											"end": 690,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 676,
											"end": 690,
											"name": "PUSH",
											"source": 3,
											"value": "A9059CBB"
										},
										{
											"begin": 691,
											"end": 701,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 702,
											"end": 708,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 676,
											"end": 709,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 676,
											"end": 709,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 676,
											"end": 709,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 676,
											"end": 709,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFF"
										},
										{
											"begin": 676,
											"end": 709,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 676,
											"end": 709,
											"name": "PUSH",
											"source": 3,
											"value": "E0"
										},
										{
											"begin": 676,
											"end": 709,
											"name": "SHL",
											"source": 3
										},
										{
											"begin": 676,
											"end": 709,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 676,
											"end": 709,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 676,
											"end": 709,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 676,
											"end": 709,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 676,
											"end": 709,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "11"
										},
										{
											"begin": 676,
											"end": 709,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 676,
											"end": 709,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 676,
											"end": 709,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 676,
											"end": 709,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "12"
										},
										{
											"begin": 676,
											"end": 709,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 676,
											"end": 709,
											"name": "tag",
											"source": 3,
											"value": "11"
										},
										{
											"begin": 676,
											"end": 709,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 676,
											"end": 709,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 676,
											"end": 709,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 676,
											"end": 709,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 676,
											"end": 709,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 676,
											"end": 709,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 676,
											"end": 709,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 676,
											"end": 709,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 676,
											"end": 709,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 676,
											"end": 709,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 676,
											"end": 709,
											"name": "GAS",
											"source": 3
										},
										{
											"begin": 676,
											"end": 709,
											"name": "CALL",
											"source": 3
										},
										{
											"begin": 676,
											"end": 709,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 676,
											"end": 709,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 676,
											"end": 709,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 676,
											"end": 709,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "14"
										},
										{
											"begin": 676,
											"end": 709,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 676,
											"end": 709,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 676,
											"end": 709,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 676,
											"end": 709,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 676,
											"end": 709,
											"name": "RETURNDATACOPY",
											"source": 3
										},
										{
											"begin": 676,
											"end": 709,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 676,
											"end": 709,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 676,
											"end": 709,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 676,
											"end": 709,
											"name": "tag",
											"source": 3,
											"value": "14"
										},
										{
											"begin": 676,
											"end": 709,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 676,
											"end": 709,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 676,
											"end": 709,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 676,
											"end": 709,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 676,
											"end": 709,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 676,
											"end": 709,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 676,
											"end": 709,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 676,
											"end": 709,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 676,
											"end": 709,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 676,
											"end": 709,
											"name": "NOT",
											"source": 3
										},
										{
											"begin": 676,
											"end": 709,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 676,
											"end": 709,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 676,
											"end": 709,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 676,
											"end": 709,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 676,
											"end": 709,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 676,
											"end": 709,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 676,
											"end": 709,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 676,
											"end": 709,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 676,
											"end": 709,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 676,
											"end": 709,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 676,
											"end": 709,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 676,
											"end": 709,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 676,
											"end": 709,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 676,
											"end": 709,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "15"
										},
										{
											"begin": 676,
											"end": 709,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 676,
											"end": 709,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 676,
											"end": 709,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "16"
										},
										{
											"begin": 676,
											"end": 709,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 676,
											"end": 709,
											"name": "tag",
											"source": 3,
											"value": "15"
										},
										{
											"begin": 676,
											"end": 709,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 676,
											"end": 709,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 747,
											"end": 789,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "17"
										},
										{
											"begin": 778,
											"end": 788,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 747,
											"end": 761,
											"name": "PUSH",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 747,
											"end": 773,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 762,
											"end": 772,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 747,
											"end": 773,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 747,
											"end": 773,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 747,
											"end": 773,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 747,
											"end": 773,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 747,
											"end": 773,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 747,
											"end": 773,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 747,
											"end": 773,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 747,
											"end": 773,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 747,
											"end": 773,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 747,
											"end": 773,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 747,
											"end": 773,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 747,
											"end": 773,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 747,
											"end": 773,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 747,
											"end": 773,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 747,
											"end": 773,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 747,
											"end": 773,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 747,
											"end": 777,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "18"
										},
										{
											"begin": 747,
											"end": 777,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 747,
											"end": 789,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 747,
											"end": 789,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 747,
											"end": 789,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFF"
										},
										{
											"begin": 747,
											"end": 789,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 747,
											"end": 789,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 747,
											"end": 789,
											"name": "tag",
											"source": 3,
											"value": "17"
										},
										{
											"begin": 747,
											"end": 789,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 718,
											"end": 732,
											"name": "PUSH",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 718,
											"end": 744,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 733,
											"end": 743,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 718,
											"end": 744,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 718,
											"end": 744,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 718,
											"end": 744,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 718,
											"end": 744,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 718,
											"end": 744,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 718,
											"end": 744,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 718,
											"end": 744,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 718,
											"end": 744,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 718,
											"end": 744,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 718,
											"end": 744,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 718,
											"end": 744,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 718,
											"end": 744,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 718,
											"end": 744,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 718,
											"end": 744,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 718,
											"end": 744,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 718,
											"end": 789,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 718,
											"end": 789,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 718,
											"end": 789,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 718,
											"end": 789,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 565,
											"end": 795,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 565,
											"end": 795,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 537,
											"end": 795,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 803,
											"end": 1002,
											"name": "tag",
											"source": 3,
											"value": "8"
										},
										{
											"begin": 803,
											"end": 1002,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 853,
											"end": 860,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 870,
											"end": 884,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 887,
											"end": 891,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 887,
											"end": 891,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 887,
											"end": 891,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 887,
											"end": 891,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 887,
											"end": 891,
											"name": "PUSH",
											"source": 3,
											"value": "100"
										},
										{
											"begin": 887,
											"end": 891,
											"name": "EXP",
											"source": 3
										},
										{
											"begin": 887,
											"end": 891,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 887,
											"end": 891,
											"name": "DIV",
											"source": 3
										},
										{
											"begin": 887,
											"end": 891,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 887,
											"end": 891,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 887,
											"end": 902,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 887,
											"end": 902,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 887,
											"end": 902,
											"name": "PUSH",
											"source": 3,
											"value": "325B272A"
										},
										{
											"begin": 903,
											"end": 907,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 887,
											"end": 908,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 887,
											"end": 908,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 887,
											"end": 908,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 887,
											"end": 908,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFF"
										},
										{
											"begin": 887,
											"end": 908,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 887,
											"end": 908,
											"name": "PUSH",
											"source": 3,
											"value": "E0"
										},
										{
											"begin": 887,
											"end": 908,
											"name": "SHL",
											"source": 3
										},
										{
											"begin": 887,
											"end": 908,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 887,
											"end": 908,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 887,
											"end": 908,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 887,
											"end": 908,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 887,
											"end": 908,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 887,
											"end": 908,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 887,
											"end": 908,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 887,
											"end": 908,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "21"
										},
										{
											"begin": 887,
											"end": 908,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 887,
											"end": 908,
											"name": "tag",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 887,
											"end": 908,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 887,
											"end": 908,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 887,
											"end": 908,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 887,
											"end": 908,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 887,
											"end": 908,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 887,
											"end": 908,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 887,
											"end": 908,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 887,
											"end": 908,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 887,
											"end": 908,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 887,
											"end": 908,
											"name": "GAS",
											"source": 3
										},
										{
											"begin": 887,
											"end": 908,
											"name": "STATICCALL",
											"source": 3
										},
										{
											"begin": 887,
											"end": 908,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 887,
											"end": 908,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 887,
											"end": 908,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 887,
											"end": 908,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "23"
										},
										{
											"begin": 887,
											"end": 908,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 887,
											"end": 908,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 887,
											"end": 908,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 887,
											"end": 908,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 887,
											"end": 908,
											"name": "RETURNDATACOPY",
											"source": 3
										},
										{
											"begin": 887,
											"end": 908,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 887,
											"end": 908,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 887,
											"end": 908,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 887,
											"end": 908,
											"name": "tag",
											"source": 3,
											"value": "23"
										},
										{
											"begin": 887,
											"end": 908,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 887,
											"end": 908,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 887,
											"end": 908,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 887,
											"end": 908,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 887,
											"end": 908,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 887,
											"end": 908,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 887,
											"end": 908,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 887,
											"end": 908,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 887,
											"end": 908,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 887,
											"end": 908,
											"name": "NOT",
											"source": 3
										},
										{
											"begin": 887,
											"end": 908,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 887,
											"end": 908,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 887,
											"end": 908,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 887,
											"end": 908,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 887,
											"end": 908,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 887,
											"end": 908,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 887,
											"end": 908,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 887,
											"end": 908,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 887,
											"end": 908,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 887,
											"end": 908,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 887,
											"end": 908,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 887,
											"end": 908,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 887,
											"end": 908,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 887,
											"end": 908,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 887,
											"end": 908,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 887,
											"end": 908,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 887,
											"end": 908,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "25"
										},
										{
											"begin": 887,
											"end": 908,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 887,
											"end": 908,
											"name": "tag",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 887,
											"end": 908,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 870,
											"end": 908,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 870,
											"end": 908,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 917,
											"end": 935,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 938,
											"end": 970,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "26"
										},
										{
											"begin": 949,
											"end": 963,
											"name": "PUSH",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 949,
											"end": 969,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 964,
											"end": 968,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 949,
											"end": 969,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 949,
											"end": 969,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 949,
											"end": 969,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 949,
											"end": 969,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 949,
											"end": 969,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 949,
											"end": 969,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 949,
											"end": 969,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 949,
											"end": 969,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 949,
											"end": 969,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 949,
											"end": 969,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 949,
											"end": 969,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 949,
											"end": 969,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 949,
											"end": 969,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 949,
											"end": 969,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 949,
											"end": 969,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 949,
											"end": 969,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 938,
											"end": 944,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 938,
											"end": 948,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "27"
										},
										{
											"begin": 938,
											"end": 948,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 938,
											"end": 970,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 938,
											"end": 970,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 938,
											"end": 970,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFF"
										},
										{
											"begin": 938,
											"end": 970,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 938,
											"end": 970,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 938,
											"end": 970,
											"name": "tag",
											"source": 3,
											"value": "26"
										},
										{
											"begin": 938,
											"end": 970,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 917,
											"end": 970,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 917,
											"end": 970,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 986,
											"end": 996,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 979,
											"end": 996,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 979,
											"end": 996,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 979,
											"end": 996,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 979,
											"end": 996,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 803,
											"end": 1002,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 803,
											"end": 1002,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 803,
											"end": 1002,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 803,
											"end": 1002,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 3465,
											"end": 3561,
											"name": "tag",
											"source": 1,
											"value": "10"
										},
										{
											"begin": 3465,
											"end": 3561,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3523,
											"end": 3530,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3553,
											"end": 3554,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3549,
											"end": 3550,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 3549,
											"end": 3554,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "29"
										},
										{
											"begin": 3549,
											"end": 3554,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3549,
											"end": 3554,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3549,
											"end": 3554,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "30"
										},
										{
											"begin": 3549,
											"end": 3554,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3549,
											"end": 3554,
											"name": "tag",
											"source": 1,
											"value": "29"
										},
										{
											"begin": 3549,
											"end": 3554,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3542,
											"end": 3554,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3542,
											"end": 3554,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3465,
											"end": 3561,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 3465,
											"end": 3561,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3465,
											"end": 3561,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3465,
											"end": 3561,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3465,
											"end": 3561,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 2755,
											"end": 2851,
											"name": "tag",
											"source": 1,
											"value": "18"
										},
										{
											"begin": 2755,
											"end": 2851,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2813,
											"end": 2820,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2843,
											"end": 2844,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2839,
											"end": 2840,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 2839,
											"end": 2844,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "32"
										},
										{
											"begin": 2839,
											"end": 2844,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2839,
											"end": 2844,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2839,
											"end": 2844,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "33"
										},
										{
											"begin": 2839,
											"end": 2844,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2839,
											"end": 2844,
											"name": "tag",
											"source": 1,
											"value": "32"
										},
										{
											"begin": 2839,
											"end": 2844,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2832,
											"end": 2844,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2832,
											"end": 2844,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2755,
											"end": 2851,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 2755,
											"end": 2851,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2755,
											"end": 2851,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2755,
											"end": 2851,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2755,
											"end": 2851,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 3122,
											"end": 3218,
											"name": "tag",
											"source": 1,
											"value": "27"
										},
										{
											"begin": 3122,
											"end": 3218,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3180,
											"end": 3187,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3210,
											"end": 3211,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3206,
											"end": 3207,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 3206,
											"end": 3211,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "35"
										},
										{
											"begin": 3206,
											"end": 3211,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3206,
											"end": 3211,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3206,
											"end": 3211,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "36"
										},
										{
											"begin": 3206,
											"end": 3211,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3206,
											"end": 3211,
											"name": "tag",
											"source": 1,
											"value": "35"
										},
										{
											"begin": 3206,
											"end": 3211,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3199,
											"end": 3211,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3199,
											"end": 3211,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3122,
											"end": 3218,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 3122,
											"end": 3218,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3122,
											"end": 3218,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3122,
											"end": 3218,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3122,
											"end": 3218,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 7,
											"end": 133,
											"name": "tag",
											"source": 4,
											"value": "37"
										},
										{
											"begin": 7,
											"end": 133,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 44,
											"end": 51,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 84,
											"end": 126,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 77,
											"end": 82,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 73,
											"end": 127,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 62,
											"end": 127,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 62,
											"end": 127,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 7,
											"end": 133,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 7,
											"end": 133,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7,
											"end": 133,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 7,
											"end": 133,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 139,
											"end": 235,
											"name": "tag",
											"source": 4,
											"value": "38"
										},
										{
											"begin": 139,
											"end": 235,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 176,
											"end": 183,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 205,
											"end": 229,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "54"
										},
										{
											"begin": 223,
											"end": 228,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 205,
											"end": 229,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "37"
										},
										{
											"begin": 205,
											"end": 229,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 205,
											"end": 229,
											"name": "tag",
											"source": 4,
											"value": "54"
										},
										{
											"begin": 205,
											"end": 229,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 194,
											"end": 229,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 194,
											"end": 229,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 139,
											"end": 235,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 139,
											"end": 235,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 139,
											"end": 235,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 139,
											"end": 235,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 241,
											"end": 359,
											"name": "tag",
											"source": 4,
											"value": "39"
										},
										{
											"begin": 241,
											"end": 359,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 328,
											"end": 352,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "56"
										},
										{
											"begin": 346,
											"end": 351,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 328,
											"end": 352,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "38"
										},
										{
											"begin": 328,
											"end": 352,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 328,
											"end": 352,
											"name": "tag",
											"source": 4,
											"value": "56"
										},
										{
											"begin": 328,
											"end": 352,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 323,
											"end": 326,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 316,
											"end": 353,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 241,
											"end": 359,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 241,
											"end": 359,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 241,
											"end": 359,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 365,
											"end": 442,
											"name": "tag",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 365,
											"end": 442,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 402,
											"end": 409,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 431,
											"end": 436,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 420,
											"end": 436,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 420,
											"end": 436,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 365,
											"end": 442,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 365,
											"end": 442,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 365,
											"end": 442,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 365,
											"end": 442,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 448,
											"end": 566,
											"name": "tag",
											"source": 4,
											"value": "41"
										},
										{
											"begin": 448,
											"end": 566,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 535,
											"end": 559,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "59"
										},
										{
											"begin": 553,
											"end": 558,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 535,
											"end": 559,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 535,
											"end": 559,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 535,
											"end": 559,
											"name": "tag",
											"source": 4,
											"value": "59"
										},
										{
											"begin": 535,
											"end": 559,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 530,
											"end": 533,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 523,
											"end": 560,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 448,
											"end": 566,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 448,
											"end": 566,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 448,
											"end": 566,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 572,
											"end": 904,
											"name": "tag",
											"source": 4,
											"value": "12"
										},
										{
											"begin": 572,
											"end": 904,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 693,
											"end": 697,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 731,
											"end": 733,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 720,
											"end": 729,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 716,
											"end": 734,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 708,
											"end": 734,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 708,
											"end": 734,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 744,
											"end": 815,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "61"
										},
										{
											"begin": 812,
											"end": 813,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 801,
											"end": 810,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 797,
											"end": 814,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 788,
											"end": 794,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 744,
											"end": 815,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "39"
										},
										{
											"begin": 744,
											"end": 815,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 744,
											"end": 815,
											"name": "tag",
											"source": 4,
											"value": "61"
										},
										{
											"begin": 744,
											"end": 815,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 825,
											"end": 897,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "62"
										},
										{
											"begin": 893,
											"end": 895,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 882,
											"end": 891,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 878,
											"end": 896,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 869,
											"end": 875,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 825,
											"end": 897,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "41"
										},
										{
											"begin": 825,
											"end": 897,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 825,
											"end": 897,
											"name": "tag",
											"source": 4,
											"value": "62"
										},
										{
											"begin": 825,
											"end": 897,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 572,
											"end": 904,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 572,
											"end": 904,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 572,
											"end": 904,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 572,
											"end": 904,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 572,
											"end": 904,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 572,
											"end": 904,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 991,
											"end": 1108,
											"name": "tag",
											"source": 4,
											"value": "43"
										},
										{
											"begin": 991,
											"end": 1108,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1100,
											"end": 1101,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1097,
											"end": 1098,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1090,
											"end": 1102,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 1237,
											"end": 1327,
											"name": "tag",
											"source": 4,
											"value": "45"
										},
										{
											"begin": 1237,
											"end": 1327,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1271,
											"end": 1278,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1314,
											"end": 1319,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1307,
											"end": 1320,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 1300,
											"end": 1321,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 1289,
											"end": 1321,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1289,
											"end": 1321,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1237,
											"end": 1327,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1237,
											"end": 1327,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1237,
											"end": 1327,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1237,
											"end": 1327,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 1333,
											"end": 1449,
											"name": "tag",
											"source": 4,
											"value": "46"
										},
										{
											"begin": 1333,
											"end": 1449,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1403,
											"end": 1424,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "68"
										},
										{
											"begin": 1418,
											"end": 1423,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1403,
											"end": 1424,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "45"
										},
										{
											"begin": 1403,
											"end": 1424,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1403,
											"end": 1424,
											"name": "tag",
											"source": 4,
											"value": "68"
										},
										{
											"begin": 1403,
											"end": 1424,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1396,
											"end": 1401,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1393,
											"end": 1425,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 1383,
											"end": 1443,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "69"
										},
										{
											"begin": 1383,
											"end": 1443,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1439,
											"end": 1440,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1436,
											"end": 1437,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1429,
											"end": 1441,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 1383,
											"end": 1443,
											"name": "tag",
											"source": 4,
											"value": "69"
										},
										{
											"begin": 1383,
											"end": 1443,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1333,
											"end": 1449,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1333,
											"end": 1449,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 1455,
											"end": 1592,
											"name": "tag",
											"source": 4,
											"value": "47"
										},
										{
											"begin": 1455,
											"end": 1592,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1509,
											"end": 1514,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1540,
											"end": 1546,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1534,
											"end": 1547,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1525,
											"end": 1547,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1525,
											"end": 1547,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1556,
											"end": 1586,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "71"
										},
										{
											"begin": 1580,
											"end": 1585,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1556,
											"end": 1586,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "46"
										},
										{
											"begin": 1556,
											"end": 1586,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1556,
											"end": 1586,
											"name": "tag",
											"source": 4,
											"value": "71"
										},
										{
											"begin": 1556,
											"end": 1586,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1455,
											"end": 1592,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 1455,
											"end": 1592,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1455,
											"end": 1592,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1455,
											"end": 1592,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1455,
											"end": 1592,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 1598,
											"end": 1943,
											"name": "tag",
											"source": 4,
											"value": "16"
										},
										{
											"begin": 1598,
											"end": 1943,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1665,
											"end": 1671,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1714,
											"end": 1716,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1702,
											"end": 1711,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1693,
											"end": 1700,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 1689,
											"end": 1712,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 1685,
											"end": 1717,
											"name": "SLT",
											"source": 4
										},
										{
											"begin": 1682,
											"end": 1801,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 1682,
											"end": 1801,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "73"
										},
										{
											"begin": 1682,
											"end": 1801,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1720,
											"end": 1799,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "74"
										},
										{
											"begin": 1720,
											"end": 1799,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "43"
										},
										{
											"begin": 1720,
											"end": 1799,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1720,
											"end": 1799,
											"name": "tag",
											"source": 4,
											"value": "74"
										},
										{
											"begin": 1720,
											"end": 1799,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1682,
											"end": 1801,
											"name": "tag",
											"source": 4,
											"value": "73"
										},
										{
											"begin": 1682,
											"end": 1801,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1840,
											"end": 1841,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1865,
											"end": 1926,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "75"
										},
										{
											"begin": 1918,
											"end": 1925,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 1909,
											"end": 1915,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1898,
											"end": 1907,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 1894,
											"end": 1916,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1865,
											"end": 1926,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "47"
										},
										{
											"begin": 1865,
											"end": 1926,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1865,
											"end": 1926,
											"name": "tag",
											"source": 4,
											"value": "75"
										},
										{
											"begin": 1865,
											"end": 1926,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1855,
											"end": 1926,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1855,
											"end": 1926,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1811,
											"end": 1936,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1598,
											"end": 1943,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 1598,
											"end": 1943,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1598,
											"end": 1943,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1598,
											"end": 1943,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1598,
											"end": 1943,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 1949,
											"end": 2171,
											"name": "tag",
											"source": 4,
											"value": "21"
										},
										{
											"begin": 1949,
											"end": 2171,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2042,
											"end": 2046,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2080,
											"end": 2082,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 2069,
											"end": 2078,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2065,
											"end": 2083,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2057,
											"end": 2083,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2057,
											"end": 2083,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2093,
											"end": 2164,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "77"
										},
										{
											"begin": 2161,
											"end": 2162,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2150,
											"end": 2159,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 2146,
											"end": 2163,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2137,
											"end": 2143,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 2093,
											"end": 2164,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "39"
										},
										{
											"begin": 2093,
											"end": 2164,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 2093,
											"end": 2164,
											"name": "tag",
											"source": 4,
											"value": "77"
										},
										{
											"begin": 2093,
											"end": 2164,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1949,
											"end": 2171,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 1949,
											"end": 2171,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1949,
											"end": 2171,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1949,
											"end": 2171,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1949,
											"end": 2171,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 2177,
											"end": 2299,
											"name": "tag",
											"source": 4,
											"value": "48"
										},
										{
											"begin": 2177,
											"end": 2299,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2250,
											"end": 2274,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "79"
										},
										{
											"begin": 2268,
											"end": 2273,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2250,
											"end": 2274,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2250,
											"end": 2274,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 2250,
											"end": 2274,
											"name": "tag",
											"source": 4,
											"value": "79"
										},
										{
											"begin": 2250,
											"end": 2274,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2243,
											"end": 2248,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2240,
											"end": 2275,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 2230,
											"end": 2293,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 2230,
											"end": 2293,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 2289,
											"end": 2290,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2286,
											"end": 2287,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2279,
											"end": 2291,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 2230,
											"end": 2293,
											"name": "tag",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 2230,
											"end": 2293,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2177,
											"end": 2299,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2177,
											"end": 2299,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 2305,
											"end": 2448,
											"name": "tag",
											"source": 4,
											"value": "49"
										},
										{
											"begin": 2305,
											"end": 2448,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2362,
											"end": 2367,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2393,
											"end": 2399,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2387,
											"end": 2400,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 2378,
											"end": 2400,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2378,
											"end": 2400,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2409,
											"end": 2442,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "82"
										},
										{
											"begin": 2436,
											"end": 2441,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2409,
											"end": 2442,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "48"
										},
										{
											"begin": 2409,
											"end": 2442,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 2409,
											"end": 2442,
											"name": "tag",
											"source": 4,
											"value": "82"
										},
										{
											"begin": 2409,
											"end": 2442,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2305,
											"end": 2448,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 2305,
											"end": 2448,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2305,
											"end": 2448,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2305,
											"end": 2448,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2305,
											"end": 2448,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 2454,
											"end": 2805,
											"name": "tag",
											"source": 4,
											"value": "25"
										},
										{
											"begin": 2454,
											"end": 2805,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2524,
											"end": 2530,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2573,
											"end": 2575,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 2561,
											"end": 2570,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2552,
											"end": 2559,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 2548,
											"end": 2571,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 2544,
											"end": 2576,
											"name": "SLT",
											"source": 4
										},
										{
											"begin": 2541,
											"end": 2660,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 2541,
											"end": 2660,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "84"
										},
										{
											"begin": 2541,
											"end": 2660,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 2579,
											"end": 2658,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "85"
										},
										{
											"begin": 2579,
											"end": 2658,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "43"
										},
										{
											"begin": 2579,
											"end": 2658,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 2579,
											"end": 2658,
											"name": "tag",
											"source": 4,
											"value": "85"
										},
										{
											"begin": 2579,
											"end": 2658,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2541,
											"end": 2660,
											"name": "tag",
											"source": 4,
											"value": "84"
										},
										{
											"begin": 2541,
											"end": 2660,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2699,
											"end": 2700,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2724,
											"end": 2788,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "86"
										},
										{
											"begin": 2780,
											"end": 2787,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 2771,
											"end": 2777,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2760,
											"end": 2769,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 2756,
											"end": 2778,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2724,
											"end": 2788,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "49"
										},
										{
											"begin": 2724,
											"end": 2788,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 2724,
											"end": 2788,
											"name": "tag",
											"source": 4,
											"value": "86"
										},
										{
											"begin": 2724,
											"end": 2788,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2714,
											"end": 2788,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2714,
											"end": 2788,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2670,
											"end": 2798,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2454,
											"end": 2805,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 2454,
											"end": 2805,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2454,
											"end": 2805,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2454,
											"end": 2805,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2454,
											"end": 2805,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 2811,
											"end": 2991,
											"name": "tag",
											"source": 4,
											"value": "50"
										},
										{
											"begin": 2811,
											"end": 2991,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2859,
											"end": 2936,
											"name": "PUSH",
											"source": 4,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2856,
											"end": 2857,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2849,
											"end": 2937,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2956,
											"end": 2960,
											"name": "PUSH",
											"source": 4,
											"value": "11"
										},
										{
											"begin": 2953,
											"end": 2954,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 2946,
											"end": 2961,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2980,
											"end": 2984,
											"name": "PUSH",
											"source": 4,
											"value": "24"
										},
										{
											"begin": 2977,
											"end": 2978,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2970,
											"end": 2985,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 2997,
											"end": 3345,
											"name": "tag",
											"source": 4,
											"value": "30"
										},
										{
											"begin": 2997,
											"end": 3345,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3037,
											"end": 3044,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3060,
											"end": 3080,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "89"
										},
										{
											"begin": 3078,
											"end": 3079,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 3060,
											"end": 3080,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3060,
											"end": 3080,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 3060,
											"end": 3080,
											"name": "tag",
											"source": 4,
											"value": "89"
										},
										{
											"begin": 3060,
											"end": 3080,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3055,
											"end": 3080,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 3055,
											"end": 3080,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3094,
											"end": 3114,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "90"
										},
										{
											"begin": 3112,
											"end": 3113,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 3094,
											"end": 3114,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3094,
											"end": 3114,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 3094,
											"end": 3114,
											"name": "tag",
											"source": 4,
											"value": "90"
										},
										{
											"begin": 3094,
											"end": 3114,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3089,
											"end": 3114,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 3089,
											"end": 3114,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3282,
											"end": 3283,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3214,
											"end": 3280,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3210,
											"end": 3284,
											"name": "DIV",
											"source": 4
										},
										{
											"begin": 3207,
											"end": 3208,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 3204,
											"end": 3285,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 3199,
											"end": 3200,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 3192,
											"end": 3201,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 3185,
											"end": 3202,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 3181,
											"end": 3286,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 3178,
											"end": 3309,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 3178,
											"end": 3309,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "91"
										},
										{
											"begin": 3178,
											"end": 3309,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 3289,
											"end": 3307,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "92"
										},
										{
											"begin": 3289,
											"end": 3307,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "50"
										},
										{
											"begin": 3289,
											"end": 3307,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 3289,
											"end": 3307,
											"name": "tag",
											"source": 4,
											"value": "92"
										},
										{
											"begin": 3289,
											"end": 3307,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3178,
											"end": 3309,
											"name": "tag",
											"source": 4,
											"value": "91"
										},
										{
											"begin": 3178,
											"end": 3309,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3337,
											"end": 3338,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 3334,
											"end": 3335,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 3330,
											"end": 3339,
											"name": "MUL",
											"source": 4
										},
										{
											"begin": 3319,
											"end": 3339,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3319,
											"end": 3339,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2997,
											"end": 3345,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 2997,
											"end": 3345,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2997,
											"end": 3345,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2997,
											"end": 3345,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2997,
											"end": 3345,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 3351,
											"end": 3656,
											"name": "tag",
											"source": 4,
											"value": "33"
										},
										{
											"begin": 3351,
											"end": 3656,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3391,
											"end": 3394,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3410,
											"end": 3430,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "94"
										},
										{
											"begin": 3428,
											"end": 3429,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 3410,
											"end": 3430,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3410,
											"end": 3430,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 3410,
											"end": 3430,
											"name": "tag",
											"source": 4,
											"value": "94"
										},
										{
											"begin": 3410,
											"end": 3430,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3405,
											"end": 3430,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 3405,
											"end": 3430,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3444,
											"end": 3464,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "95"
										},
										{
											"begin": 3462,
											"end": 3463,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 3444,
											"end": 3464,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3444,
											"end": 3464,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 3444,
											"end": 3464,
											"name": "tag",
											"source": 4,
											"value": "95"
										},
										{
											"begin": 3444,
											"end": 3464,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3439,
											"end": 3464,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 3439,
											"end": 3464,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3598,
											"end": 3599,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 3530,
											"end": 3596,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3526,
											"end": 3600,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 3523,
											"end": 3524,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 3520,
											"end": 3601,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 3517,
											"end": 3624,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 3517,
											"end": 3624,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "96"
										},
										{
											"begin": 3517,
											"end": 3624,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 3604,
											"end": 3622,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "97"
										},
										{
											"begin": 3604,
											"end": 3622,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "50"
										},
										{
											"begin": 3604,
											"end": 3622,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 3604,
											"end": 3622,
											"name": "tag",
											"source": 4,
											"value": "97"
										},
										{
											"begin": 3604,
											"end": 3622,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3517,
											"end": 3624,
											"name": "tag",
											"source": 4,
											"value": "96"
										},
										{
											"begin": 3517,
											"end": 3624,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3648,
											"end": 3649,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 3645,
											"end": 3646,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 3641,
											"end": 3650,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3634,
											"end": 3650,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3634,
											"end": 3650,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3351,
											"end": 3656,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 3351,
											"end": 3656,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 3351,
											"end": 3656,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3351,
											"end": 3656,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3351,
											"end": 3656,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 3662,
											"end": 3853,
											"name": "tag",
											"source": 4,
											"value": "36"
										},
										{
											"begin": 3662,
											"end": 3853,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3702,
											"end": 3706,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3722,
											"end": 3742,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "99"
										},
										{
											"begin": 3740,
											"end": 3741,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 3722,
											"end": 3742,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3722,
											"end": 3742,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 3722,
											"end": 3742,
											"name": "tag",
											"source": 4,
											"value": "99"
										},
										{
											"begin": 3722,
											"end": 3742,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3717,
											"end": 3742,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 3717,
											"end": 3742,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3756,
											"end": 3776,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 3774,
											"end": 3775,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 3756,
											"end": 3776,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3756,
											"end": 3776,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 3756,
											"end": 3776,
											"name": "tag",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 3756,
											"end": 3776,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3751,
											"end": 3776,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 3751,
											"end": 3776,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3795,
											"end": 3796,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 3792,
											"end": 3793,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 3789,
											"end": 3797,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 3786,
											"end": 3820,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 3786,
											"end": 3820,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "101"
										},
										{
											"begin": 3786,
											"end": 3820,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 3800,
											"end": 3818,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "102"
										},
										{
											"begin": 3800,
											"end": 3818,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "50"
										},
										{
											"begin": 3800,
											"end": 3818,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 3800,
											"end": 3818,
											"name": "tag",
											"source": 4,
											"value": "102"
										},
										{
											"begin": 3800,
											"end": 3818,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3786,
											"end": 3820,
											"name": "tag",
											"source": 4,
											"value": "101"
										},
										{
											"begin": 3786,
											"end": 3820,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3845,
											"end": 3846,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 3842,
											"end": 3843,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 3838,
											"end": 3847,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 3830,
											"end": 3847,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3830,
											"end": 3847,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3662,
											"end": 3853,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 3662,
											"end": 3853,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 3662,
											"end": 3853,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3662,
											"end": 3853,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3662,
											"end": 3853,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"MineDcoff()": "8bed4778"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"MineDcoff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"Dcoffer/treasury.sol\":\"treasury\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://864a40efcffdf408044c332a5aa38ec5618ed7b4eecb8f65faf45671bd6cdc65\",\"dweb:/ipfs/QmQJquTMtc6fgm5JQzGdsGpA2fqBe3MHWEdt2qzaLySMdN\"]},\"Dcoffer/IDCF/IDCF.sol\":{\"keccak256\":\"0x46f37359686638f9b09b85b67546f013da80a49dcbf195b3d27d0462cfacf135\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://715b10cc638500e1a1755f8612a35d906e2cf5a919629926ae43d51bace05911\",\"dweb:/ipfs/Qmb2Nxbut2U6yrr1hoqWj28VFPE7sGvG3BHbTfNnAkuVkM\"]},\"Dcoffer/treasury.sol\":{\"keccak256\":\"0x331ec46185232d1cc62de70ad3be125c91b5c558bae38b95fe2e9a7846a47ea7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://11ff3c9ccea06bcc467a7ceb13d8c169d146252aafdacc4e55e0ce80b1f13d7f\",\"dweb:/ipfs/QmYPgnHieHs97PxiJhpUwffc3cfuHSAdZ6Fk2BQai6m6Tv\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 414,
								"contract": "Dcoffer/treasury.sol:treasury",
								"label": "mine",
								"offset": 0,
								"slot": "0",
								"type": "t_contract(IDCF)400"
							},
							{
								"astId": 420,
								"contract": "Dcoffer/treasury.sol:treasury",
								"label": "dcoff",
								"offset": 0,
								"slot": "1",
								"type": "t_contract(IERC20)77"
							},
							{
								"astId": 422,
								"contract": "Dcoffer/treasury.sol:treasury",
								"label": "DcoffperBlock",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 426,
								"contract": "Dcoffer/treasury.sol:treasury",
								"label": "ScoreWithdrawn",
								"offset": 0,
								"slot": "3",
								"type": "t_mapping(t_address,t_uint256)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_contract(IDCF)400": {
								"encoding": "inplace",
								"label": "contract IDCF",
								"numberOfBytes": "20"
							},
							"t_contract(IERC20)77": {
								"encoding": "inplace",
								"label": "contract IERC20",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							77
						]
					},
					"id": 78,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "106:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "131:70:0",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 77,
							"linearizedBaseContracts": [
								77
							],
							"name": "IERC20",
							"nameLocation": "212:6:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "225:158:0",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 11,
									"name": "Transfer",
									"nameLocation": "394:8:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 10,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "419:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "403:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "403:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 7,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "441:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "425:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 6,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "425:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 9,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "453:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "445:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 8,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "445:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "402:57:0"
									},
									"src": "388:72:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 12,
										"nodeType": "StructuredDocumentation",
										"src": "466:148:0",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 20,
									"name": "Approval",
									"nameLocation": "625:8:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 19,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 14,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "650:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "634:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 13,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "634:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 16,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "673:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "657:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 15,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "657:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 18,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "690:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "682:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 17,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "682:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "633:63:0"
									},
									"src": "619:78:0"
								},
								{
									"documentation": {
										"id": 21,
										"nodeType": "StructuredDocumentation",
										"src": "703:66:0",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 26,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "783:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 22,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "794:2:0"
									},
									"returnParameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 24,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 26,
												"src": "820:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 23,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "820:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "819:9:0"
									},
									"scope": 77,
									"src": "774:55:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 27,
										"nodeType": "StructuredDocumentation",
										"src": "835:72:0",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 34,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "921:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 30,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 29,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "939:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "931:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 28,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "931:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "930:17:0"
									},
									"returnParameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 32,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "971:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 31,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "971:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "970:9:0"
									},
									"scope": 77,
									"src": "912:68:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 35,
										"nodeType": "StructuredDocumentation",
										"src": "986:202:0",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 44,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1202:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 40,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 37,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1219:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "1211:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 36,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1211:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 39,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1231:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "1223:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 38,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1223:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1210:28:0"
									},
									"returnParameters": {
										"id": 43,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 42,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "1257:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 41,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1257:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1256:6:0"
									},
									"scope": 77,
									"src": "1193:70:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 45,
										"nodeType": "StructuredDocumentation",
										"src": "1269:264:0",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 54,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1547:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 50,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 47,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1565:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "1557:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 46,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1557:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 49,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1580:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "1572:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 48,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1572:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1556:32:0"
									},
									"returnParameters": {
										"id": 53,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 52,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "1612:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 51,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1612:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1611:9:0"
									},
									"scope": 77,
									"src": "1538:83:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 55,
										"nodeType": "StructuredDocumentation",
										"src": "1627:642:0",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 64,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2283:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 60,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 57,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2299:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 64,
												"src": "2291:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 56,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2291:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 59,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2316:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 64,
												"src": "2308:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 58,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2308:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2290:33:0"
									},
									"returnParameters": {
										"id": 63,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 62,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 64,
												"src": "2342:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 61,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2342:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2341:6:0"
									},
									"scope": 77,
									"src": "2274:74:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 65,
										"nodeType": "StructuredDocumentation",
										"src": "2354:287:0",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 76,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2655:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 72,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 67,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2685:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "2677:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 66,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2677:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 69,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2707:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "2699:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 68,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2699:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 71,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2727:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "2719:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 70,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2719:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2667:72:0"
									},
									"returnParameters": {
										"id": 75,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 74,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "2758:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 73,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2758:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2757:6:0"
									},
									"scope": 77,
									"src": "2646:118:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 78,
							"src": "202:2564:0",
							"usedErrors": []
						}
					],
					"src": "106:2661:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/utils/math/SafeMath.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/math/SafeMath.sol",
					"exportedSymbols": {
						"SafeMath": [
							389
						]
					},
					"id": 390,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 79,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "107:23:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SafeMath",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 80,
								"nodeType": "StructuredDocumentation",
								"src": "285:196:1",
								"text": " @dev Wrappers over Solidity's arithmetic operations.\n NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n now has built in overflow checking."
							},
							"fullyImplemented": true,
							"id": 389,
							"linearizedBaseContracts": [
								389
							],
							"name": "SafeMath",
							"nameLocation": "490:8:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 111,
										"nodeType": "Block",
										"src": "717:140:1",
										"statements": [
											{
												"id": 110,
												"nodeType": "UncheckedBlock",
												"src": "727:124:1",
												"statements": [
													{
														"assignments": [
															93
														],
														"declarations": [
															{
																"constant": false,
																"id": 93,
																"mutability": "mutable",
																"name": "c",
																"nameLocation": "759:1:1",
																"nodeType": "VariableDeclaration",
																"scope": 110,
																"src": "751:9:1",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 92,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "751:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 97,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 96,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 94,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 83,
																"src": "763:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 95,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 85,
																"src": "767:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "763:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "751:17:1"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 100,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 98,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 93,
																"src": "786:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 99,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 83,
																"src": "790:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "786:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 105,
														"nodeType": "IfStatement",
														"src": "782:28:1",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 101,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "801:5:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 102,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "808:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 103,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "800:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 91,
															"id": 104,
															"nodeType": "Return",
															"src": "793:17:1"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 106,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "832:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 107,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 93,
																	"src": "838:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 108,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "831:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 91,
														"id": 109,
														"nodeType": "Return",
														"src": "824:16:1"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 81,
										"nodeType": "StructuredDocumentation",
										"src": "505:131:1",
										"text": " @dev Returns the addition of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 112,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryAdd",
									"nameLocation": "650:6:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 86,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 83,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "665:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 112,
												"src": "657:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 82,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "657:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 85,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "676:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 112,
												"src": "668:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 84,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "668:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "656:22:1"
									},
									"returnParameters": {
										"id": 91,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 88,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 112,
												"src": "702:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 87,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "702:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 90,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 112,
												"src": "708:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 89,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "708:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "701:15:1"
									},
									"scope": 389,
									"src": "641:216:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 139,
										"nodeType": "Block",
										"src": "1078:113:1",
										"statements": [
											{
												"id": 138,
												"nodeType": "UncheckedBlock",
												"src": "1088:97:1",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 126,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 124,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 117,
																"src": "1116:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"id": 125,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 115,
																"src": "1120:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1116:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 131,
														"nodeType": "IfStatement",
														"src": "1112:28:1",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 127,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1131:5:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 128,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1138:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 129,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1130:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 123,
															"id": 130,
															"nodeType": "Return",
															"src": "1123:17:1"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 132,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1162:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 135,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 133,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 115,
																		"src": "1168:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 134,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 117,
																		"src": "1172:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1168:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 136,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1161:13:1",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 123,
														"id": 137,
														"nodeType": "Return",
														"src": "1154:20:1"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 113,
										"nodeType": "StructuredDocumentation",
										"src": "863:134:1",
										"text": " @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 140,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySub",
									"nameLocation": "1011:6:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 118,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 115,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1026:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 140,
												"src": "1018:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 114,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1018:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 117,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1037:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 140,
												"src": "1029:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 116,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1029:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1017:22:1"
									},
									"returnParameters": {
										"id": 123,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 120,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 140,
												"src": "1063:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 119,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1063:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 122,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 140,
												"src": "1069:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 121,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1069:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1062:15:1"
									},
									"scope": 389,
									"src": "1002:189:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 181,
										"nodeType": "Block",
										"src": "1415:417:1",
										"statements": [
											{
												"id": 180,
												"nodeType": "UncheckedBlock",
												"src": "1425:401:1",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 154,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 152,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 143,
																"src": "1683:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 153,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1688:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1683:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 159,
														"nodeType": "IfStatement",
														"src": "1679:28:1",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "74727565",
																		"id": 155,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1699:4:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "true"
																	},
																	{
																		"hexValue": "30",
																		"id": 156,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1705:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 157,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1698:9:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 151,
															"id": 158,
															"nodeType": "Return",
															"src": "1691:16:1"
														}
													},
													{
														"assignments": [
															161
														],
														"declarations": [
															{
																"constant": false,
																"id": 161,
																"mutability": "mutable",
																"name": "c",
																"nameLocation": "1729:1:1",
																"nodeType": "VariableDeclaration",
																"scope": 180,
																"src": "1721:9:1",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 160,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1721:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 165,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 164,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 162,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 143,
																"src": "1733:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 163,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 145,
																"src": "1737:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1733:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "1721:17:1"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 170,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 168,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 166,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 161,
																	"src": "1756:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 167,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 143,
																	"src": "1760:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1756:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 169,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 145,
																"src": "1765:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1756:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 175,
														"nodeType": "IfStatement",
														"src": "1752:33:1",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 171,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1776:5:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 172,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1783:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 173,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1775:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 151,
															"id": 174,
															"nodeType": "Return",
															"src": "1768:17:1"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 176,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1807:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 177,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 161,
																	"src": "1813:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 178,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1806:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 151,
														"id": 179,
														"nodeType": "Return",
														"src": "1799:16:1"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 141,
										"nodeType": "StructuredDocumentation",
										"src": "1197:137:1",
										"text": " @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 182,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMul",
									"nameLocation": "1348:6:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 146,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 143,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1363:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 182,
												"src": "1355:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 142,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1355:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 145,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1374:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 182,
												"src": "1366:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 144,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1366:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1354:22:1"
									},
									"returnParameters": {
										"id": 151,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 148,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 182,
												"src": "1400:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 147,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1400:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 150,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 182,
												"src": "1406:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 149,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1406:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1399:15:1"
									},
									"scope": 389,
									"src": "1339:493:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 209,
										"nodeType": "Block",
										"src": "2057:114:1",
										"statements": [
											{
												"id": 208,
												"nodeType": "UncheckedBlock",
												"src": "2067:98:1",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 196,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 194,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 187,
																"src": "2095:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 195,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2100:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2095:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 201,
														"nodeType": "IfStatement",
														"src": "2091:29:1",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 197,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2111:5:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 198,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2118:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 199,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2110:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 193,
															"id": 200,
															"nodeType": "Return",
															"src": "2103:17:1"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 202,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2142:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 205,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 203,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 185,
																		"src": "2148:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 204,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 187,
																		"src": "2152:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2148:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 206,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2141:13:1",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 193,
														"id": 207,
														"nodeType": "Return",
														"src": "2134:20:1"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 183,
										"nodeType": "StructuredDocumentation",
										"src": "1838:138:1",
										"text": " @dev Returns the division of two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 210,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryDiv",
									"nameLocation": "1990:6:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 188,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 185,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2005:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 210,
												"src": "1997:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 184,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1997:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 187,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2016:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 210,
												"src": "2008:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 186,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2008:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1996:22:1"
									},
									"returnParameters": {
										"id": 193,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 190,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 210,
												"src": "2042:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 189,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2042:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 192,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 210,
												"src": "2048:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 191,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2048:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2041:15:1"
									},
									"scope": 389,
									"src": "1981:190:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 237,
										"nodeType": "Block",
										"src": "2406:114:1",
										"statements": [
											{
												"id": 236,
												"nodeType": "UncheckedBlock",
												"src": "2416:98:1",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 224,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 222,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 215,
																"src": "2444:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 223,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2449:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2444:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 229,
														"nodeType": "IfStatement",
														"src": "2440:29:1",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 225,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2460:5:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 226,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2467:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 227,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2459:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 221,
															"id": 228,
															"nodeType": "Return",
															"src": "2452:17:1"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 230,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2491:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 233,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 231,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 213,
																		"src": "2497:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "%",
																	"rightExpression": {
																		"id": 232,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 215,
																		"src": "2501:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2497:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 234,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2490:13:1",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 221,
														"id": 235,
														"nodeType": "Return",
														"src": "2483:20:1"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 211,
										"nodeType": "StructuredDocumentation",
										"src": "2177:148:1",
										"text": " @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 238,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMod",
									"nameLocation": "2339:6:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 216,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 213,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2354:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 238,
												"src": "2346:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 212,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2346:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 215,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2365:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 238,
												"src": "2357:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 214,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2357:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2345:22:1"
									},
									"returnParameters": {
										"id": 221,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 218,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 238,
												"src": "2391:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 217,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2391:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 220,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 238,
												"src": "2397:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 219,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2397:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2390:15:1"
									},
									"scope": 389,
									"src": "2330:190:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 252,
										"nodeType": "Block",
										"src": "2822:29:1",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 250,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 248,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 241,
														"src": "2839:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 249,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 243,
														"src": "2843:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2839:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 247,
												"id": 251,
												"nodeType": "Return",
												"src": "2832:12:1"
											}
										]
									},
									"documentation": {
										"id": 239,
										"nodeType": "StructuredDocumentation",
										"src": "2526:224:1",
										"text": " @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."
									},
									"id": 253,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nameLocation": "2764:3:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 244,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 241,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2776:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 253,
												"src": "2768:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 240,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2768:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 243,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2787:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 253,
												"src": "2779:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 242,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2779:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2767:22:1"
									},
									"returnParameters": {
										"id": 247,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 246,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 253,
												"src": "2813:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 245,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2813:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2812:9:1"
									},
									"scope": 389,
									"src": "2755:96:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 267,
										"nodeType": "Block",
										"src": "3189:29:1",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 265,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 263,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 256,
														"src": "3206:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"id": 264,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 258,
														"src": "3210:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3206:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 262,
												"id": 266,
												"nodeType": "Return",
												"src": "3199:12:1"
											}
										]
									},
									"documentation": {
										"id": 254,
										"nodeType": "StructuredDocumentation",
										"src": "2857:260:1",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 268,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nameLocation": "3131:3:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 259,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 256,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "3143:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 268,
												"src": "3135:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 255,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3135:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 258,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "3154:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 268,
												"src": "3146:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 257,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3146:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3134:22:1"
									},
									"returnParameters": {
										"id": 262,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 261,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 268,
												"src": "3180:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 260,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3180:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3179:9:1"
									},
									"scope": 389,
									"src": "3122:96:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 282,
										"nodeType": "Block",
										"src": "3532:29:1",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 280,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 278,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 271,
														"src": "3549:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"id": 279,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 273,
														"src": "3553:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3549:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 277,
												"id": 281,
												"nodeType": "Return",
												"src": "3542:12:1"
											}
										]
									},
									"documentation": {
										"id": 269,
										"nodeType": "StructuredDocumentation",
										"src": "3224:236:1",
										"text": " @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."
									},
									"id": 283,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mul",
									"nameLocation": "3474:3:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 274,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 271,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "3486:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 283,
												"src": "3478:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 270,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3478:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 273,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "3497:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 283,
												"src": "3489:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 272,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3489:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3477:22:1"
									},
									"returnParameters": {
										"id": 277,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 276,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 283,
												"src": "3523:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 275,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3523:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3522:9:1"
									},
									"scope": 389,
									"src": "3465:96:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 297,
										"nodeType": "Block",
										"src": "3917:29:1",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 295,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 293,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 286,
														"src": "3934:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"id": 294,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 288,
														"src": "3938:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3934:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 292,
												"id": 296,
												"nodeType": "Return",
												"src": "3927:12:1"
											}
										]
									},
									"documentation": {
										"id": 284,
										"nodeType": "StructuredDocumentation",
										"src": "3567:278:1",
										"text": " @dev Returns the integer division of two unsigned integers, reverting on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator.\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 298,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nameLocation": "3859:3:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 289,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 286,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "3871:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 298,
												"src": "3863:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 285,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3863:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 288,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "3882:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 298,
												"src": "3874:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 287,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3874:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3862:22:1"
									},
									"returnParameters": {
										"id": 292,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 291,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 298,
												"src": "3908:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 290,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3908:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3907:9:1"
									},
									"scope": 389,
									"src": "3850:96:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 312,
										"nodeType": "Block",
										"src": "4466:29:1",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 310,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 308,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 301,
														"src": "4483:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"id": 309,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 303,
														"src": "4487:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4483:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 307,
												"id": 311,
												"nodeType": "Return",
												"src": "4476:12:1"
											}
										]
									},
									"documentation": {
										"id": 299,
										"nodeType": "StructuredDocumentation",
										"src": "3952:442:1",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 313,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nameLocation": "4408:3:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 304,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 301,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "4420:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 313,
												"src": "4412:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 300,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4412:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 303,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "4431:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 313,
												"src": "4423:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 302,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4423:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4411:22:1"
									},
									"returnParameters": {
										"id": 307,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 306,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 313,
												"src": "4457:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 305,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4457:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4456:9:1"
									},
									"scope": 389,
									"src": "4399:96:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 337,
										"nodeType": "Block",
										"src": "5084:106:1",
										"statements": [
											{
												"id": 336,
												"nodeType": "UncheckedBlock",
												"src": "5094:90:1",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 328,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 326,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 318,
																		"src": "5126:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "<=",
																	"rightExpression": {
																		"id": 327,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 316,
																		"src": "5131:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5126:6:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 329,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 320,
																	"src": "5134:12:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 325,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "5118:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 330,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5118:29:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 331,
														"nodeType": "ExpressionStatement",
														"src": "5118:29:1"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 334,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 332,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 316,
																"src": "5168:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 333,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 318,
																"src": "5172:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5168:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 324,
														"id": 335,
														"nodeType": "Return",
														"src": "5161:12:1"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 314,
										"nodeType": "StructuredDocumentation",
										"src": "4501:453:1",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {trySub}.\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 338,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nameLocation": "4968:3:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 321,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 316,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "4989:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 338,
												"src": "4981:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 315,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4981:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 318,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "5008:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 338,
												"src": "5000:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 317,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5000:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 320,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5033:12:1",
												"nodeType": "VariableDeclaration",
												"scope": 338,
												"src": "5019:26:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 319,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5019:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4971:80:1"
									},
									"returnParameters": {
										"id": 324,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 323,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 338,
												"src": "5075:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 322,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5075:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5074:9:1"
									},
									"scope": 389,
									"src": "4959:231:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 362,
										"nodeType": "Block",
										"src": "5799:105:1",
										"statements": [
											{
												"id": 361,
												"nodeType": "UncheckedBlock",
												"src": "5809:89:1",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 353,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 351,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 343,
																		"src": "5841:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 352,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5845:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "5841:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 354,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 345,
																	"src": "5848:12:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 350,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "5833:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 355,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5833:28:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 356,
														"nodeType": "ExpressionStatement",
														"src": "5833:28:1"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 359,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 357,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 341,
																"src": "5882:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 358,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 343,
																"src": "5886:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5882:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 349,
														"id": 360,
														"nodeType": "Return",
														"src": "5875:12:1"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 339,
										"nodeType": "StructuredDocumentation",
										"src": "5196:473:1",
										"text": " @dev Returns the integer division of two unsigned integers, reverting with custom message on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 363,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nameLocation": "5683:3:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 346,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 341,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "5704:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 363,
												"src": "5696:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 340,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5696:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 343,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "5723:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 363,
												"src": "5715:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 342,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5715:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 345,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5748:12:1",
												"nodeType": "VariableDeclaration",
												"scope": 363,
												"src": "5734:26:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 344,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5734:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5686:80:1"
									},
									"returnParameters": {
										"id": 349,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 348,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 363,
												"src": "5790:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 347,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5790:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5789:9:1"
									},
									"scope": 389,
									"src": "5674:230:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 387,
										"nodeType": "Block",
										"src": "6675:105:1",
										"statements": [
											{
												"id": 386,
												"nodeType": "UncheckedBlock",
												"src": "6685:89:1",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 378,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 376,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 368,
																		"src": "6717:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 377,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "6721:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "6717:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 379,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 370,
																	"src": "6724:12:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 375,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "6709:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 380,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6709:28:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 381,
														"nodeType": "ExpressionStatement",
														"src": "6709:28:1"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 384,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 382,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 366,
																"src": "6758:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "%",
															"rightExpression": {
																"id": 383,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 368,
																"src": "6762:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6758:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 374,
														"id": 385,
														"nodeType": "Return",
														"src": "6751:12:1"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 364,
										"nodeType": "StructuredDocumentation",
										"src": "5910:635:1",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting with custom message when dividing by zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryMod}.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 388,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nameLocation": "6559:3:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 371,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 366,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "6580:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 388,
												"src": "6572:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 365,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6572:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 368,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "6599:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 388,
												"src": "6591:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 367,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6591:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 370,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6624:12:1",
												"nodeType": "VariableDeclaration",
												"scope": 388,
												"src": "6610:26:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 369,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6610:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6562:80:1"
									},
									"returnParameters": {
										"id": 374,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 373,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 388,
												"src": "6666:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 372,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6666:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6665:9:1"
									},
									"scope": 389,
									"src": "6550:230:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 390,
							"src": "482:6300:1",
							"usedErrors": []
						}
					],
					"src": "107:6676:1"
				},
				"id": 1
			},
			"Dcoffer/IDCF/IDCF.sol": {
				"ast": {
					"absolutePath": "Dcoffer/IDCF/IDCF.sol",
					"exportedSymbols": {
						"IDCF": [
							400
						]
					},
					"id": 401,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 391,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "88:23:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IDCF",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 392,
								"nodeType": "StructuredDocumentation",
								"src": "119:61:2",
								"text": " @dev Interface of an ERC721A compliant contract."
							},
							"fullyImplemented": false,
							"id": 400,
							"linearizedBaseContracts": [
								400
							],
							"name": "IDCF",
							"nameLocation": "192:4:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"functionSelector": "325b272a",
									"id": 399,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "BlockScore",
									"nameLocation": "221:10:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 395,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 394,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "240:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 399,
												"src": "232:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 393,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "232:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "231:14:2"
									},
									"returnParameters": {
										"id": 398,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 397,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 399,
												"src": "267:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 396,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "267:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "266:6:2"
									},
									"scope": 400,
									"src": "212:61:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 401,
							"src": "182:96:2",
							"usedErrors": []
						}
					],
					"src": "88:190:2"
				},
				"id": 2
			},
			"Dcoffer/treasury.sol": {
				"ast": {
					"absolutePath": "Dcoffer/treasury.sol",
					"exportedSymbols": {
						"IDCF": [
							400
						],
						"IERC20": [
							77
						],
						"SafeMath": [
							389
						],
						"treasury": [
							500
						]
					},
					"id": 501,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 402,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:3"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 403,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 501,
							"sourceUnit": 78,
							"src": "60:56:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/math/SafeMath.sol",
							"file": "@openzeppelin/contracts/utils/math/SafeMath.sol",
							"id": 404,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 501,
							"sourceUnit": 390,
							"src": "118:57:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "Dcoffer/IDCF/IDCF.sol",
							"file": "./IDCF/IDCF.sol",
							"id": 405,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 501,
							"sourceUnit": 401,
							"src": "177:25:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "treasury",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 500,
							"linearizedBaseContracts": [
								500
							],
							"name": "treasury",
							"nameLocation": "215:8:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 408,
									"libraryName": {
										"id": 406,
										"name": "SafeMath",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 389,
										"src": "236:8:3"
									},
									"nodeType": "UsingForDirective",
									"src": "230:24:3",
									"typeName": {
										"id": 407,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "249:4:3",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"constant": false,
									"id": 414,
									"mutability": "mutable",
									"name": "mine",
									"nameLocation": "265:4:3",
									"nodeType": "VariableDeclaration",
									"scope": 500,
									"src": "260:60:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IDCF_$400",
										"typeString": "contract IDCF"
									},
									"typeName": {
										"id": 410,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 409,
											"name": "IDCF",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 400,
											"src": "260:4:3"
										},
										"referencedDeclaration": 400,
										"src": "260:4:3",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IDCF_$400",
											"typeString": "contract IDCF"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "307836613534343336374643613730363442364144413564633837463745353035384139624237416639",
												"id": 412,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "number",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "277:42:3",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"value": "0x6a544367FCa7064B6ADA5dc87F7E5058A9bB7Af9"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											],
											"id": 411,
											"name": "IDCF",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 400,
											"src": "272:4:3",
											"typeDescriptions": {
												"typeIdentifier": "t_type$_t_contract$_IDCF_$400_$",
												"typeString": "type(contract IDCF)"
											}
										},
										"id": 413,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "typeConversion",
										"lValueRequested": false,
										"names": [],
										"nodeType": "FunctionCall",
										"src": "272:48:3",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IDCF_$400",
											"typeString": "contract IDCF"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 420,
									"mutability": "mutable",
									"name": "dcoff",
									"nameLocation": "332:5:3",
									"nodeType": "VariableDeclaration",
									"scope": 500,
									"src": "325:66:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IERC20_$77",
										"typeString": "contract IERC20"
									},
									"typeName": {
										"id": 416,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 415,
											"name": "IERC20",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 77,
											"src": "325:6:3"
										},
										"referencedDeclaration": 77,
										"src": "325:6:3",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$77",
											"typeString": "contract IERC20"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "307862453043383536653239383162396630336437363133353636444643363637396545653437303841",
												"id": 418,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "number",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "348:42:3",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"value": "0xbE0C856e2981b9f03d7613566DFC6679eEe4708A"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											],
											"id": 417,
											"name": "IERC20",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 77,
											"src": "341:6:3",
											"typeDescriptions": {
												"typeIdentifier": "t_type$_t_contract$_IERC20_$77_$",
												"typeString": "type(contract IERC20)"
											}
										},
										"id": 419,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "typeConversion",
										"lValueRequested": false,
										"names": [],
										"nodeType": "FunctionCall",
										"src": "341:50:3",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$77",
											"typeString": "contract IERC20"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 422,
									"mutability": "mutable",
									"name": "DcoffperBlock",
									"nameLocation": "406:13:3",
									"nodeType": "VariableDeclaration",
									"scope": 500,
									"src": "398:21:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 421,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "398:7:3",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 426,
									"mutability": "mutable",
									"name": "ScoreWithdrawn",
									"nameLocation": "462:14:3",
									"nodeType": "VariableDeclaration",
									"scope": 500,
									"src": "426:50:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 425,
										"keyType": {
											"id": 423,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "434:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "426:28:3",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 424,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "445:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 433,
										"nodeType": "Block",
										"src": "496:33:3",
										"statements": [
											{
												"expression": {
													"id": 431,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 429,
														"name": "DcoffperBlock",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 422,
														"src": "503:13:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "32653134",
														"id": 430,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "519:4:3",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_200000000000000_by_1",
															"typeString": "int_const 200000000000000"
														},
														"value": "2e14"
													},
													"src": "503:20:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 432,
												"nodeType": "ExpressionStatement",
												"src": "503:20:3"
											}
										]
									},
									"id": 434,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 427,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "494:2:3"
									},
									"returnParameters": {
										"id": 428,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "496:0:3"
									},
									"scope": 500,
									"src": "483:46:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 472,
										"nodeType": "Block",
										"src": "565:230:3",
										"statements": [
											{
												"assignments": [
													438
												],
												"declarations": [
													{
														"constant": false,
														"id": 438,
														"mutability": "mutable",
														"name": "afterScore",
														"nameLocation": "582:10:3",
														"nodeType": "VariableDeclaration",
														"scope": 472,
														"src": "574:18:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 437,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "574:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 443,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"id": 440,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "601:3:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 441,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "601:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 439,
														"name": "Score",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 499,
														"src": "595:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view returns (uint256)"
														}
													},
													"id": 442,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "595:17:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "574:38:3"
											},
											{
												"assignments": [
													445
												],
												"declarations": [
													{
														"constant": false,
														"id": 445,
														"mutability": "mutable",
														"name": "GetDCF",
														"nameLocation": "629:6:3",
														"nodeType": "VariableDeclaration",
														"scope": 472,
														"src": "621:14:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 444,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "621:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 450,
												"initialValue": {
													"arguments": [
														{
															"id": 448,
															"name": "DcoffperBlock",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 422,
															"src": "653:13:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 446,
															"name": "afterScore",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 438,
															"src": "638:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 447,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "mul",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 283,
														"src": "638:14:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 449,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "638:29:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "621:46:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 454,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "691:3:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 455,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "691:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 456,
															"name": "GetDCF",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 445,
															"src": "702:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 451,
															"name": "dcoff",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 420,
															"src": "676:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$77",
																"typeString": "contract IERC20"
															}
														},
														"id": 453,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 44,
														"src": "676:14:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (address,uint256) external returns (bool)"
														}
													},
													"id": 457,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "676:33:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 458,
												"nodeType": "ExpressionStatement",
												"src": "676:33:3"
											},
											{
												"expression": {
													"id": 470,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 459,
															"name": "ScoreWithdrawn",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 426,
															"src": "718:14:3",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 462,
														"indexExpression": {
															"expression": {
																"id": 460,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "733:3:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 461,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "733:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "718:26:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 468,
																"name": "afterScore",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 438,
																"src": "778:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"baseExpression": {
																	"id": 463,
																	"name": "ScoreWithdrawn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 426,
																	"src": "747:14:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 466,
																"indexExpression": {
																	"expression": {
																		"id": 464,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "762:3:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 465,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "762:10:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "747:26:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 467,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 253,
															"src": "747:30:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 469,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "747:42:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "718:71:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 471,
												"nodeType": "ExpressionStatement",
												"src": "718:71:3"
											}
										]
									},
									"functionSelector": "8bed4778",
									"id": 473,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "MineDcoff",
									"nameLocation": "546:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 435,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "555:2:3"
									},
									"returnParameters": {
										"id": 436,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "565:0:3"
									},
									"scope": 500,
									"src": "537:258:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 498,
										"nodeType": "Block",
										"src": "861:141:3",
										"statements": [
											{
												"assignments": [
													481
												],
												"declarations": [
													{
														"constant": false,
														"id": 481,
														"mutability": "mutable",
														"name": "_Score",
														"nameLocation": "878:6:3",
														"nodeType": "VariableDeclaration",
														"scope": 498,
														"src": "870:14:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 480,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "870:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 486,
												"initialValue": {
													"arguments": [
														{
															"id": 484,
															"name": "user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 475,
															"src": "903:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 482,
															"name": "mine",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 414,
															"src": "887:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IDCF_$400",
																"typeString": "contract IDCF"
															}
														},
														"id": 483,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "BlockScore",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 399,
														"src": "887:15:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 485,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "887:21:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "870:38:3"
											},
											{
												"assignments": [
													488
												],
												"declarations": [
													{
														"constant": false,
														"id": 488,
														"mutability": "mutable",
														"name": "afterScore",
														"nameLocation": "925:10:3",
														"nodeType": "VariableDeclaration",
														"scope": 498,
														"src": "917:18:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 487,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "917:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 495,
												"initialValue": {
													"arguments": [
														{
															"baseExpression": {
																"id": 491,
																"name": "ScoreWithdrawn",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 426,
																"src": "949:14:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																	"typeString": "mapping(address => uint256)"
																}
															},
															"id": 493,
															"indexExpression": {
																"id": 492,
																"name": "user",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 475,
																"src": "964:4:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "949:20:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 489,
															"name": "_Score",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 481,
															"src": "938:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 490,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sub",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 268,
														"src": "938:10:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 494,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "938:32:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "917:53:3"
											},
											{
												"expression": {
													"id": 496,
													"name": "afterScore",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 488,
													"src": "986:10:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 479,
												"id": 497,
												"nodeType": "Return",
												"src": "979:17:3"
											}
										]
									},
									"id": 499,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "Score",
									"nameLocation": "812:5:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 476,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 475,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "826:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 499,
												"src": "818:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 474,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "818:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "817:14:3"
									},
									"returnParameters": {
										"id": 479,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 478,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 499,
												"src": "853:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 477,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "853:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "852:9:3"
									},
									"scope": 500,
									"src": "803:199:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 501,
							"src": "206:812:3",
							"usedErrors": []
						}
					],
					"src": "33:985:3"
				},
				"id": 3
			}
		}
	}
}